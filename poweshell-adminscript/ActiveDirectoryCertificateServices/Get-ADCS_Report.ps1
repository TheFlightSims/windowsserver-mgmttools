#requires -version 2
<#
.SYNOPSIS
  Collect ADCS information, export results into a HTML report and send it by mail

.DESCRIPTION
  Collect ADCS information locally, and export results into a HTML report (failed and pending requests, plus expired certificates) and send it by mail

.INPUTS
  <None>

.OUTPUTS
   Create HTML  report, similar to $ScriptDir\[SCRIPTNAME]_[YYYY_MM_DD]_[HHhMMmSSs].html
   
   
.NOTES
  Version:        1.1
  Author:         ALBERT Jean-Marc
  Creation Date:  01/09/2015
  Purpose/Change: 1.0 - 2015.09.01 - ALBERT Jean-Marc - Initial script development
                  1.1 - 2016.10.31 - ALBERT Jean-Marc - Replace alias used instead of command name, and " per ', and multiple enhancement


  
.SOURCES
  https://www.shellandco.net/monitor-certificate-expiration/
  http://pspki.codeplex.com/
  http://stackoverflow.com/questions/16542729/send-multiple-outputs-to-the-same-html-file-in-powershell
  
  
.EXAMPLE
  <None>
#>
 

#---------------------------------------------------------[Initialisations]--------------------------------------------------------

#Get input strings
[CmdletBinding()]
param(
[string] $computername = "$ENV:COMPUTERNAME",
[string] $reportfile = "$ScriptDir\$([System.IO.Path]::GetFileNameWithoutExtension($MyInvocation.MyCommand.Definition))" + '_' + $SystemDate + '_' + $SystemTime + '.html',
[string] $cert_path = "$env:windir\System32\certsrv\CertEnroll",
[string] $crl_root_filename = 'domain.crl',
[string] $crl_sub_filename = 'domain-sub.crl',
[string] $monthQtyFail = '6',
[string] $monthQtyPend = '1',
[string] $monthQtyExpir = '3'
)



#----------------------------------------------------------[Declarations]----------------------------------------------------------

#Script Version
$sScriptVersion = '1.1'

#Write script directory path on "ScriptDir" variable
$ScriptDir = Split-Path -Path $MyInvocation.MyCommand.Definition -Parent
$Script
$SystemTime = Get-Date -uformat %Hh%Mm%Ss
$SystemDate = Get-Date -uformat %Y.%m.%d



#-----------------------------------------------------------[Functions]------------------------------------------------------------
 
#Send mail function
Function script:send_mail {

  [CmdletBinding()]
  param
  (
    [string]
    $message,

    [string]
    $subject
  )
$emailFrom = 'supervision@domain.local'
$emailCC = 'jean-marc.albert@domain.com'
$emailTo = 'jean-marc.albert@domain.com'
$smtpServer = 'smtp.domain.com'
Send-MailMessage -SmtpServer $smtpServer -To $emailTo -Cc $emailCC -From $emailFrom -Subject $subject -Body $message -BodyAsHtml -Priority High
}



#------------------------------------------------------------[Actions]------------------------------------------------------------- 

#Start stopwatch
$totalTime = New-Object -TypeName System.Diagnostics.Stopwatch
$totalTime.Start()
 
#Credits
Write-Host
Write-Host 'ADCS Certificate Expiration Report Tool ' -ForegroundColor 'Yellow'
Write-Host
if(Get-Module -ListAvailable -Name PSPKI | Where-Object { $_.name -eq 'PSPKI' })
{
#Import PSPKI PowerShell module
if(Get-Module -Name PSPKI | Where-Object { $_.name -eq 'PSPKI' })
{
Write-Host 'PSPKI PowerShell module already imported…' -ForegroundColor 'Yellow'
}
else
{
Write-Host 'Importing PSPKI PowerShell module…' -ForegroundColor 'Yellow'
Import-Module -Name PSPKI
}
Write-Host
 
 
#Set variables
Write-Host 'Setting variables…' -ForegroundColor 'Yellow'
Write-Host
$caname = $computername.ToLower()
$domaindns = $ENV:USERDNSDOMAIN.ToLower()
$todaysdate = Get-Date
$findaldate = $todaysdate.AddMonths(2)
$monthQtyFailMinus = "-$monthQtyFail"
$htmlpre = "
<font face='Calibri' color='black'><i><P>Generated by user: $ENV:USERNAME</P>
<font face='Calibri' color='black'><i><P>Root CA CRL expiration date : <font face='Calibri' color='red'>$((Get-CRL $cert_path\$crl_root_filename ).NextUpdate) (MM/DD/YYYY)</font></font>
<br>
<font face='Calibri' color='black'><i>Subordinate CA CRL expiration date : <font face='Calibri' color='red'>$((Get-CRL $cert_path\$crl_sub_filename).NextUpdate) (MM/DD/YYYY)</font></font>
"
$htmlpost = "
<br>
<br>
<P>-------------------------------------------------------------------------------------------------</P>
<P>---- Certificate informations retrived from $caname.$domaindns ----</P>
<P>-------------------------------------------------------------------------------------------------</P>
"
$htmllinebreak = '<br>'
$htmltitle = "Certificate information from $caname.$domaindns"
$htmlpreadcsfailed ="<font face='Calibri' color='black'><i><b><P>The following list represent failed requests during last $monthQtyFail months</P>"
$adcsfailed = Get-CertificationAuthority "$caname.$domaindns" | Get-FailedRequest -Filter "Request.SubmittedWhen -gt $(($todaysdate).AddMonths($monthQtyFailMinus))" | ConvertTo-HTML -Fragment -Property RequestID,Request.RequesterName,Request.SubmittedWhen,Request.CommonName
$htmlpreadcspending ="<font face='Calibri' color='black'><i><b><P>The following list represent pending requests</P>"
$adcspending = Get-CertificationAuthority "$caname.$domaindns" | Get-PendingRequest | ConvertTo-HTML -Fragment -Property RequestID,Request.RequesterName,Request.SubmittedWhen,Request.CommonName
$htmlpreadcsexpired = "<P><font face='Calibri' color='black'><i><b><P>The following certificates expire before $findaldate (MM/DD/YYYY)</P>"
$adcsexpired = Get-CertificationAuthority "$caname.$domaindns" | Get-IssuedRequest -Filter "NotAfter -ge $($todaysdate)", "NotAfter -le $(($todaysdate).AddMonths($monthQtyExpir))" | where-object {$_.CertificateTemplate -notmatch 'User|EFS|Client-Server-DA-Authentication'} | ConvertTo-HTML -Property RequestID,RequesterName,CommonName,CertificateTemplate,NotBefore,NotAfter -Fragment

#Generate report
$a = "<HTML><HEAD>
<style type='text/css'>
table {font-family:verdana,arial,sans-serif;font-size:12px;color:#333333;border-width: 1px;border-color: #729ea5;border-collapse: collapse;}
table th {font-family:verdana,arial,sans-serif;font-size:12px;background-color:#acc8cc;border-width: 1px;padding: 8px;border-style: solid;border-color: #729ea5;text-align:left;}
table tr {font-family:verdana,arial,sans-serif;background-color:#d4e3e5;}
table td {font-family:verdana,arial,sans-serif;font-size:12px;border-width: 1px;padding: 8px;border-style: solid;border-color: #729ea5;}
</style>
</HEAD><body>"
 
Write-Host 'Generating report…' -ForegroundColor 'Yellow'
Write-Host

ConvertTo-Html -Body "$htmlpre $htmlpreadcsfailed $adcsfailed $htmlpreadcspending $adcspending $htmllinebreak $htmlpreadcsexpired $adcsexpired $htmlpost" -head $a | Out-File -FilePath $reportfile
$message = gc $reportfile
 
#Send report by email
send_mail $message "Certificate expiration report $todaysdate (MM/DD/YYYY) ($caname)"
 
#Open report
Write-Host 'Opening report…' -ForegroundColor 'Yellow'
Write-Host
#Invoke-Item $reportfile
 
#Warning if PSPKI is not installed
}
else
{
Write-Host 'PSPKI is not installed. Please install it from http://pspki.codeplex.com/ ' -ForegroundColor 'Yellow'
Write-Host
}
 
#Stop stopwatch
$totalTime.Stop()
$ts = $totalTime.Elapsed
$totalTime = [system.String]::Format('{0:00}:{1:00}:{2:00}',$ts.Hours, $ts.Minutes, $ts.Seconds)
Write-Host "Process total time: $totalTime" -ForegroundColor Yellow
Write-Host

Invoke-Item $reportfile

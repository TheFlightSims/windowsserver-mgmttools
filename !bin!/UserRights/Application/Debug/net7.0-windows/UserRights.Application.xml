<?xml version="1.0"?>
<doc>
    <assembly>
        <name>UserRights.Application</name>
    </assembly>
    <members>
        <member name="T:UserRights.Application.ILsaUserRights">
            <summary>
            Represents the interface to the local security authority.
            </summary>
        </member>
        <member name="M:UserRights.Application.ILsaUserRights.Connect(System.String)">
            <summary>
            Connects to the local security authority.
            </summary>
            <param name="systemName">The remote system name to execute the task on (default localhost).</param>
        </member>
        <member name="T:UserRights.Application.IUserRightEntry">
            <summary>
            Represents the interface for a user right entry in the local security database.
            </summary>
        </member>
        <member name="P:UserRights.Application.IUserRightEntry.Privilege">
            <summary>
            Gets the privilege assigned to the principal.
            </summary>
        </member>
        <member name="P:UserRights.Application.IUserRightEntry.SecurityId">
            <summary>
            Gets the security id of the principal.
            </summary>
        </member>
        <member name="P:UserRights.Application.IUserRightEntry.AccountName">
            <summary>
            Gets the account name of the principal.
            </summary>
            <remarks>
            The account name may be empty if the query was performed remotely due to the translation possibly not working.
            </remarks>
        </member>
        <member name="T:UserRights.Application.IUserRights">
            <summary>
            Represents the interface to the local security authority user right functions.
            </summary>
        </member>
        <member name="M:UserRights.Application.IUserRights.LsaAddAccountRights(System.Security.Principal.SecurityIdentifier,System.String[])">
            <summary>
            Assigns one or more privileges to an account.
            </summary>
            <param name="accountSid">The security identifier (SID) of the account to add the privileges to.</param>
            <param name="userRights">The names of the privileges to add to the account.</param>
        </member>
        <member name="M:UserRights.Application.IUserRights.LsaEnumerateAccountRights(System.Security.Principal.SecurityIdentifier)">
            <summary>
            Gets the privileges assigned to an account.
            </summary>
            <param name="accountSid">The SID of the account for which to enumerate privileges.</param>
            <returns>The names of the assigned privileges.</returns>
        </member>
        <member name="M:UserRights.Application.IUserRights.LsaEnumerateAccountsWithUserRight(System.String)">
            <summary>
            Gets the accounts in the database of a Local Security Authority (LSA) Policy object that hold a specified privilege.
            </summary>
            <param name="userRight">The name of a privilege.</param>
            <returns>The security identifier (SID) of each account that holds the specified privilege.</returns>
        </member>
        <member name="M:UserRights.Application.IUserRights.LsaRemoveAccountRights(System.Security.Principal.SecurityIdentifier,System.String[])">
            <summary>
            Removes one or more privileges from an account.
            </summary>
            <param name="accountSid">The security identifier (SID) of the account to remove the privileges from.</param>
            <param name="userRights">The names of the privileges to remove from the account.</param>
        </member>
        <member name="T:UserRights.Application.IUserRightsManager">
            <summary>
            Represents the interface to the user rights application.
            </summary>
        </member>
        <member name="M:UserRights.Application.IUserRightsManager.GetUserRights(UserRights.Application.IUserRights)">
            <summary>
            Gets all privileges for all principals.
            </summary>
            <param name="policy">A connection to the local security authority.</param>
            <returns>A sequence of all user rights.</returns>
        </member>
        <member name="M:UserRights.Application.IUserRightsManager.ModifyPrincipal(UserRights.Application.IUserRights,System.String,System.String[],System.String[],System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Modifies the specified principal.
            </summary>
            <param name="policy">A connection to the local security authority.</param>
            <param name="principal">The principal to modify.</param>
            <param name="grants">The privileges to grant to the principal.</param>
            <param name="revocations">The privileges to revoke from the principal.</param>
            <param name="revokeAll">Revokes all privileges from the principal.</param>
            <param name="revokeOthers">Revokes all privileges from the principal excluding those being granted.</param>
            <param name="dryRun">Enables dry-run mode.</param>
            <remarks>
            <para>
            The following assumptions are expected from the input settings.
            </para>
            <list type="bullet">
            <item>
            The <c>revokeAll</c> parameter cannot be combined with any other parameter.
            </item>
            <item>
            The <c>revokeOthers</c> parameter requires the <c>grants</c> parameter, and revokes all principals provisioned except those being granted.
            </item>
            <item>
            The <c>revokeOthers</c> parameter cannot be combined with the <c>revocations</c>, or the <c>revokeAll</c> parameter.
            </item>
            <item>
            The <c>grants</c> and <c>revocations</c> parameters must be distinct without overlap, and can be combined.
            </item>
            <item>
            The <c>grants</c> parameter only grants deficit privileges.
            </item>
            <item>
            The <c>revocations</c> parameter only revokes provisioned privileges.
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:UserRights.Application.IUserRightsManager.ModifyPrivilege(UserRights.Application.IUserRights,System.String,System.String[],System.String[],System.Boolean,System.Boolean,System.Text.RegularExpressions.Regex,System.Boolean)">
            <summary>
            Modifies the specified privilege.
            </summary>
            <param name="policy">A connection to the local security authority.</param>
            <param name="privilege">The privilege to modify.</param>
            <param name="grants">The principals to grant the privilege to.</param>
            <param name="revocations">The principals to revoke the privilege from.</param>
            <param name="revokeAll">Revokes all principals from the privilege.</param>
            <param name="revokeOthers">Revokes all principals from the privilege excluding those being granted.</param>
            <param name="revokePattern">Revokes all principals whose SID matches the regular expression excluding those being granted.</param>
            <param name="dryRun">Enables dry-run mode.</param>
            <remarks>
            <para>
            The following assumptions are expected from the input options.
            </para>
            <list type="bullet">
            <item>
            The <c>revokeAll</c> parameter cannot be combined with any other parameter.
            </item>
            <item>
            The <c>revokeOthers</c> parameter requires the <c>grants</c> parameter, and revokes all principals provisioned except those being granted.
            </item>
            <item>
            The <c>revokeOthers</c> parameter cannot be combined with the <c>revocations</c>, <c>revokeAll</c>, or the <c>revokePattern</c> parameter.
            </item>
            <item>
            The <c>revokePattern</c> parameter cannot be combined with the <c>revocations</c>, <c>revokeAll</c>, or the <c>revokeOthers</c> parameter.
            </item>
            <item>
            The <c>grants</c> and <c>revocations</c> parameters must be distinct without overlap, and can be combined.
            </item>
            <item>
            The <c>grants</c> parameter only grants principals in deficit.
            </item>
            <item>
            The <c>revocations</c> parameter only revokes principals that are provisioned.
            </item>
            </list>
            </remarks>
        </member>
        <member name="T:UserRights.Application.LsaUserRights">
            <summary>
            Represents a managed wrapper around the local security authority user right functions.
            </summary>
        </member>
        <member name="M:UserRights.Application.LsaUserRights.Connect(System.String)">
            <inheritdoc />
        </member>
        <member name="M:UserRights.Application.LsaUserRights.Dispose">
            <inheritdoc />
        </member>
        <member name="M:UserRights.Application.LsaUserRights.LsaAddAccountRights(System.Security.Principal.SecurityIdentifier,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:UserRights.Application.LsaUserRights.LsaEnumerateAccountRights(System.Security.Principal.SecurityIdentifier)">
            <inheritdoc />
        </member>
        <member name="M:UserRights.Application.LsaUserRights.LsaEnumerateAccountsWithUserRight(System.String)">
            <inheritdoc />
        </member>
        <member name="M:UserRights.Application.LsaUserRights.LsaRemoveAccountRights(System.Security.Principal.SecurityIdentifier,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:UserRights.Application.LsaUserRights.Dispose(System.Boolean)">
            <summary>
            Releases resources when they are no longer required.
            </summary>
            <param name="disposing">A value indicating whether the method call comes from a dispose method (its value is <c>true</c>) or from a finalizer (its value is <c>false</c>).</param>
        </member>
        <member name="M:UserRights.Application.LsaUserRights.LsaOpenPolicy(Windows.Win32.System.WindowsProgramming.OBJECT_ATTRIBUTES@,System.UInt32,System.String)">
            <summary>
            Opens a handle to the Policy object on a local or remote system.
            </summary>
            <param name="objectAttributes">The connection attributes.</param>
            <param name="desiredAccess">The requested access rights.</param>
            <param name="systemName">The name of the target system.</param>
            <returns>A handle to the Policy object.</returns>
        </member>
        <member name="T:UserRights.Application.OperationId">
            <summary>
            Represents operational Windows event ids.
            </summary>
        </member>
        <member name="P:UserRights.Application.OperationId.PrivilegeMode">
            <summary>
            Gets a value indicating the application is executing in privilege mode.
            </summary>
        </member>
        <member name="P:UserRights.Application.OperationId.PrincipalMode">
            <summary>
            Gets a value indicating the application is executing in principal mode.
            </summary>
        </member>
        <member name="P:UserRights.Application.OperationId.ListMode">
            <summary>
            Gets a value indicating the application is executing in list mode.
            </summary>
        </member>
        <member name="P:UserRights.Application.OperationId.PrivilegeGrantSuccess">
            <summary>
            Gets a value indicating a privilege was successfully granted.
            </summary>
        </member>
        <member name="P:UserRights.Application.OperationId.PrivilegeGrantFailure">
            <summary>
            Gets a value indicating a privilege has failed to be granted.
            </summary>
        </member>
        <member name="P:UserRights.Application.OperationId.PrivilegeGrantDryrun">
            <summary>
            Gets a value indicating a privilege is being granted in dryrun mode.
            </summary>
        </member>
        <member name="P:UserRights.Application.OperationId.PrivilegeRevokeSuccess">
            <summary>
            Gets a value indicating a privilege was successfully revoked.
            </summary>
        </member>
        <member name="P:UserRights.Application.OperationId.PrivilegeRevokeFailure">
            <summary>
            Gets a value indicating a privilege has failed to be revoked.
            </summary>
        </member>
        <member name="P:UserRights.Application.OperationId.PrivilegeRevokeDryrun">
            <summary>
            Gets a value indicating a privilege is being revoked in dryrun mode.
            </summary>
        </member>
        <member name="P:UserRights.Application.OperationId.FatalError">
            <summary>
            Gets a value indicating a fatal error has occurred.
            </summary>
        </member>
        <member name="P:UserRights.Application.OperationId.SyntaxError">
            <summary>
            Gets a value indicating a syntax error has occurred.
            </summary>
        </member>
        <member name="T:UserRights.Application.UserRightEntry">
            <summary>
            Represents an entry in the local security database.
            </summary>
        </member>
        <member name="M:UserRights.Application.UserRightEntry.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:UserRights.Application.UserRightEntry"/> class.
            </summary>
            <param name="privilege">The privilege assigned to the principal.</param>
            <param name="securityId">The security id of the principal.</param>
            <param name="accountName">The account name of the principal.</param>
        </member>
        <member name="P:UserRights.Application.UserRightEntry.Privilege">
            <summary>
            Gets the privilege assigned to the principal.
            </summary>
        </member>
        <member name="P:UserRights.Application.UserRightEntry.SecurityId">
            <summary>
            Gets the security id of the principal.
            </summary>
        </member>
        <member name="P:UserRights.Application.UserRightEntry.AccountName">
            <summary>
            Gets the account name of the principal.
            </summary>
            <remarks>
            The account name may be empty if the query was performed remotely due to the translation possibly not working.
            </remarks>
        </member>
        <member name="T:UserRights.Application.UserRightsManager">
            <summary>
            Represents the applications logic.
            </summary>
        </member>
        <member name="M:UserRights.Application.UserRightsManager.#ctor(Microsoft.Extensions.Logging.ILogger{UserRights.Application.UserRightsManager})">
            <summary>
            Initializes a new instance of the <see cref="T:UserRights.Application.UserRightsManager"/> class.
            </summary>
            <param name="logger">The logging instance.</param>
        </member>
        <member name="M:UserRights.Application.UserRightsManager.GetUserRights(UserRights.Application.IUserRights)">
            <inheritdoc />
        </member>
        <member name="M:UserRights.Application.UserRightsManager.ModifyPrincipal(UserRights.Application.IUserRights,System.String,System.String[],System.String[],System.Boolean,System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:UserRights.Application.UserRightsManager.ModifyPrivilege(UserRights.Application.IUserRights,System.String,System.String[],System.String[],System.Boolean,System.Boolean,System.Text.RegularExpressions.Regex,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:UserRights.Application.UserRightsManager.GrantPrivilege(UserRights.Application.IUserRights,System.Security.Principal.SecurityIdentifier,System.String,System.Boolean)">
            <summary>
            Grants a privilege to a principal.
            </summary>
            <param name="policy">A connection to the local security authority.</param>
            <param name="principal">The principal to grant the privilege to.</param>
            <param name="privilege">The privilege to grant.</param>
            <param name="dryRun">A value indicating whether to process the action or just instrument it.</param>
        </member>
        <member name="M:UserRights.Application.UserRightsManager.RevokePrivilege(UserRights.Application.IUserRights,System.Security.Principal.SecurityIdentifier,System.String,System.Boolean)">
            <summary>
            Revokes a privilege from a principal.
            </summary>
            <param name="policy">A connection to the local security authority.</param>
            <param name="principal">The principal to revoke the privilege from.</param>
            <param name="privilege">The privilege to revoke.</param>
            <param name="dryRun">A value indicating whether to process the action or just instrument it.</param>
        </member>
        <member name="T:Windows.Win32.Foundation.PCWSTR">
            <summary>
            A pointer to a null-terminated, constant character string.
            </summary>
        </member>
        <member name="F:Windows.Win32.Foundation.PCWSTR.Value">
            <summary>
            A pointer to the first character in the string. The content should be considered readonly, as it was typed as constant in the SDK.
            </summary>
        </member>
        <member name="P:Windows.Win32.Foundation.PCWSTR.Length">
            <summary>
            Gets the number of characters up to the first null character (exclusive).
            </summary>
        </member>
        <member name="M:Windows.Win32.Foundation.PCWSTR.ToString">
            <summary>
            Returns a <see langword="string"/> with a copy of this character array, up to the first null character (exclusive).
            </summary>
            <returns>A <see langword="string"/>, or <see langword="null"/> if <see cref="F:Windows.Win32.Foundation.PCWSTR.Value"/> is <see langword="null"/>.</returns>
        </member>
        <member name="M:Windows.Win32.Foundation.PCWSTR.AsSpan">
            <summary>
            Returns a span of the characters in this string, up to the first null character (exclusive).
            </summary>
        </member>
        <member name="P:Windows.Win32.Foundation.PWSTR.Length">
            <inheritdoc cref="P:Windows.Win32.Foundation.PCWSTR.Length"/>
        </member>
        <member name="M:Windows.Win32.Foundation.PWSTR.ToString">
            <inheritdoc cref="M:Windows.Win32.Foundation.PCWSTR.ToString"/>
        </member>
        <member name="M:Windows.Win32.Foundation.PWSTR.AsSpan">
            <summary>
            Returns a span of the characters in this string, up to the first null character (exclusive).
            </summary>
        </member>
        <member name="T:Windows.Win32.LsaCloseSafeHandle">
            <summary>
            Represents a Win32 handle that can be closed with <see cref="M:Windows.Win32.PInvoke.LsaClose(Windows.Win32.Security.Authentication.Identity.LSA_HANDLE)"/>.
            </summary>
        </member>
        <member name="T:Windows.Win32.Security.Authentication.Identity.LSA_ENUMERATION_INFORMATION">
            <summary>The LSA_ENUMERATION_INFORMATION structure is used with the LsaEnumerateAccountsWithUserRight function to return a pointer to a SID.</summary>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//ntsecapi/ns-ntsecapi-lsa_enumeration_information">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Security.Authentication.Identity.LSA_ENUMERATION_INFORMATION.Sid">
            <summary>Pointer to a SID.</summary>
        </member>
        <member name="T:Windows.Win32.PInvoke">
            <content>
            Contains extern methods from "ADVAPI32.dll".
            </content>
            <content>
            Contains extern methods from "KERNEL32.dll".
            </content>
        </member>
        <member name="M:Windows.Win32.PInvoke.LsaClose(Windows.Win32.Security.Authentication.Identity.LSA_HANDLE)">
            <summary>The LsaClose function closes a handle to a Policy or TrustedDomain object.</summary>
            <param name="ObjectHandle">
            <para>A handle to a <a href="https://docs.microsoft.com/windows/desktop/SecMgmt/policy-object">Policy</a> object returned by the <a href="https://docs.microsoft.com/windows/desktop/api/ntsecapi/nf-ntsecapi-lsaopenpolicy">LsaOpenPolicy</a> function or to a <a href="https://docs.microsoft.com/windows/desktop/SecMgmt/trusteddomain-object">TrustedDomain</a> object returned by the <a href="https://docs.microsoft.com/windows/desktop/api/ntsecapi/nf-ntsecapi-lsaopentrusteddomainbyname">LsaOpenTrustedDomainByName</a> function. Following the completion of this call, the handle is no longer valid.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//ntsecapi/nf-ntsecapi-lsaclose#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is STATUS_SUCCESS. If the function fails, the return value is an NTSTATUS code. For more information, see <a href="/windows/desktop/SecMgmt/management-return-values">LSA Policy Function Return Values</a>. You can use the <a href="/windows/desktop/api/ntsecapi/nf-ntsecapi-lsantstatustowinerror">LsaNtStatusToWinError</a> function to convert the NTSTATUS code to a Windows error code.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//ntsecapi/nf-ntsecapi-lsaclose">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.LsaAddAccountRights(System.Runtime.InteropServices.SafeHandle,Windows.Win32.Foundation.PSID,System.Span{Windows.Win32.Foundation.UNICODE_STRING})">
            <inheritdoc cref="M:Windows.Win32.PInvoke.LsaAddAccountRights(Windows.Win32.Security.Authentication.Identity.LSA_HANDLE,Windows.Win32.Foundation.PSID,Windows.Win32.Foundation.UNICODE_STRING*,System.UInt32)"/>
        </member>
        <member name="M:Windows.Win32.PInvoke.LsaAddAccountRights(Windows.Win32.Security.Authentication.Identity.LSA_HANDLE,Windows.Win32.Foundation.PSID,Windows.Win32.Foundation.UNICODE_STRING*,System.UInt32)">
            <summary>Assigns one or more privileges to an account.</summary>
            <param name="PolicyHandle">
            <para>A handle to a <a href="https://docs.microsoft.com/windows/desktop/SecMgmt/policy-object">Policy</a> object. The handle must have the POLICY_LOOKUP_NAMES access right. If the account identified by the <i>AccountSid</i> parameter does not exist, the handle must have the POLICY_CREATE_ACCOUNT access right. For more information, see <a href="https://docs.microsoft.com/windows/desktop/SecMgmt/opening-a-policy-object-handle">Opening a Policy Object Handle</a>.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//ntsecapi/nf-ntsecapi-lsaaddaccountrights#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="AccountSid">Pointer to the SID of the account to which the function assigns <a href="https://docs.microsoft.com/windows/desktop/SecGloss/p-gly">privileges</a>.</param>
            <param name="UserRights">
            <para>Pointer to an array of <a href="https://docs.microsoft.com/windows/desktop/api/lsalookup/ns-lsalookup-lsa_unicode_string">LSA_UNICODE_STRING</a> structures. Each structure contains the name of a privilege to add to the account. For a list of privilege names, see <a href="https://docs.microsoft.com/windows/desktop/SecAuthZ/authorization-constants">Privilege Constants</a>.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//ntsecapi/nf-ntsecapi-lsaaddaccountrights#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="CountOfRights">Specifies the number of elements in the <i>UserRights</i> array.</param>
            <returns>
            <para>If the function succeeds, the return value is STATUS_SUCCESS. If the function fails, the return value is an NTSTATUS code, which can be the following value or one of the <a href="/windows/desktop/SecMgmt/management-return-values">LSA Policy Function Return Values</a>. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//ntsecapi/nf-ntsecapi-lsaaddaccountrights">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.LsaEnumerateAccountRights(System.Runtime.InteropServices.SafeHandle,Windows.Win32.Foundation.PSID,Windows.Win32.Foundation.UNICODE_STRING*@,System.UInt32@)">
            <inheritdoc cref="M:Windows.Win32.PInvoke.LsaEnumerateAccountRights(Windows.Win32.Security.Authentication.Identity.LSA_HANDLE,Windows.Win32.Foundation.PSID,Windows.Win32.Foundation.UNICODE_STRING**,System.UInt32*)"/>
        </member>
        <member name="M:Windows.Win32.PInvoke.LsaEnumerateAccountRights(Windows.Win32.Security.Authentication.Identity.LSA_HANDLE,Windows.Win32.Foundation.PSID,Windows.Win32.Foundation.UNICODE_STRING**,System.UInt32*)">
            <summary>The LsaEnumerateAccountRights function enumerates the privileges assigned to an account.</summary>
            <param name="PolicyHandle">
            <para>A handle to a <a href="https://docs.microsoft.com/windows/desktop/SecMgmt/policy-object">Policy</a> object. The handle must have the POLICY_LOOKUP_NAMES access right. For more information, see <a href="https://docs.microsoft.com/windows/desktop/SecMgmt/opening-a-policy-object-handle">Opening a Policy Object Handle</a>.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//ntsecapi/nf-ntsecapi-lsaenumerateaccountrights#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="AccountSid">Pointer to the SID of the account for which to enumerate privileges.</param>
            <param name="UserRights">
            <para>Receives a pointer to an array of <a href="https://docs.microsoft.com/windows/desktop/api/lsalookup/ns-lsalookup-lsa_unicode_string">LSA_UNICODE_STRING</a> structures. Each structure contains the name of a privilege held by the account. For a list of privilege names, see <a href="https://docs.microsoft.com/windows/desktop/SecAuthZ/authorization-constants">Privilege Constants</a> When you no longer need the information, pass the returned pointer to <a href="https://docs.microsoft.com/windows/desktop/api/ntsecapi/nf-ntsecapi-lsafreememory">LsaFreeMemory</a>.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//ntsecapi/nf-ntsecapi-lsaenumerateaccountrights#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="CountOfRights">Pointer to a variable that receives the number of privileges in the <i>UserRights</i> array.</param>
            <returns>
            <para>If at least one account right is found, the function succeeds and returns STATUS_SUCCESS. If no account rights are found or if the function fails for any other reason, the function returns an NTSTATUS code such as FILE_NOT_FOUND. For more information, see <a href="/windows/desktop/SecMgmt/management-return-values">LSA Policy Function Return Values</a>. Use the <a href="/windows/desktop/api/ntsecapi/nf-ntsecapi-lsantstatustowinerror">LsaNtStatusToWinError</a> function to convert the NTSTATUS code to a Windows error code.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//ntsecapi/nf-ntsecapi-lsaenumerateaccountrights">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.LsaEnumerateAccountsWithUserRight(System.Runtime.InteropServices.SafeHandle,System.Nullable{Windows.Win32.Foundation.UNICODE_STRING},System.Void*@,System.UInt32@)">
            <inheritdoc cref="M:Windows.Win32.PInvoke.LsaEnumerateAccountsWithUserRight(Windows.Win32.Security.Authentication.Identity.LSA_HANDLE,Windows.Win32.Foundation.UNICODE_STRING*,System.Void**,System.UInt32*)"/>
        </member>
        <member name="M:Windows.Win32.PInvoke.LsaEnumerateAccountsWithUserRight(Windows.Win32.Security.Authentication.Identity.LSA_HANDLE,Windows.Win32.Foundation.UNICODE_STRING*,System.Void**,System.UInt32*)">
            <summary>Returns the accounts in the database of a Local Security Authority (LSA) Policy object that hold a specified privilege.</summary>
            <param name="PolicyHandle">
            <para>A handle to a <a href="https://docs.microsoft.com/windows/desktop/SecMgmt/policy-object">Policy</a> object. The handle must have POLICY_LOOKUP_NAMES and POLICY_VIEW_LOCAL_INFORMATION user rights. For more information, see <a href="https://docs.microsoft.com/windows/desktop/SecMgmt/opening-a-policy-object-handle">Opening a Policy Object Handle</a>.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//ntsecapi/nf-ntsecapi-lsaenumerateaccountswithuserright#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="UserRight">
            <para>Pointer to an <a href="https://docs.microsoft.com/windows/desktop/api/lsalookup/ns-lsalookup-lsa_unicode_string">LSA_UNICODE_STRING</a> structure that specifies the name of a privilege. For a list of privileges, see <a href="https://docs.microsoft.com/windows/desktop/SecAuthZ/authorization-constants">Privilege Constants</a> and Account Rights Constants.</para>
            <para>If this parameter is <b>NULL</b>, the function enumerates all accounts in the LSA database of the system associated with the <a href="https://docs.microsoft.com/windows/desktop/SecMgmt/policy-object">Policy</a> object.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//ntsecapi/nf-ntsecapi-lsaenumerateaccountswithuserright#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="Buffer">
            <para>Pointer to a variable that receives a pointer to an array of <a href="https://docs.microsoft.com/windows/desktop/api/ntsecapi/ns-ntsecapi-lsa_enumeration_information">LSA_ENUMERATION_INFORMATION</a> structures. The <b>Sid</b> member of each structure is a pointer to the <a href="https://docs.microsoft.com/windows/desktop/SecGloss/s-gly">security identifier</a> (SID) of an account that holds the specified privilege.</para>
            <para>When you no longer need the information, free the memory by passing the returned pointer to the <a href="https://docs.microsoft.com/windows/desktop/api/ntsecapi/nf-ntsecapi-lsafreememory">LsaFreeMemory</a> function.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//ntsecapi/nf-ntsecapi-lsaenumerateaccountswithuserright#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="CountReturned">Pointer to a variable that receives the number of entries returned in the <i>EnumerationBuffer</i> parameter.</param>
            <returns>
            <para>If the function succeeds, the function returns STATUS_SUCCESS. If the function fails, it returns an <b>NTSTATUS</b> code, which can be one of the following values or one of the <a href="/windows/desktop/SecMgmt/management-return-values">LSA Policy Function Return Values</a>. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//ntsecapi/nf-ntsecapi-lsaenumerateaccountswithuserright">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.LsaFreeMemory(System.Void*)">
            <summary>The LsaFreeMemory function frees memory allocated for an output buffer by an LSA function call.</summary>
            <param name="Buffer">Pointer to memory buffer that was allocated by an LSA function call. If <b>LsaFreeMemory</b> is successful, this buffer is freed.</param>
            <returns>
            <para>If the function succeeds, the return value is STATUS_SUCCESS. If the function fails, the return value is an NTSTATUS code, which can be the following value or one of the <a href="/windows/desktop/SecMgmt/management-return-values">LSA Policy Function Return Values</a>. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//ntsecapi/nf-ntsecapi-lsafreememory">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.LsaOpenPolicy(System.Nullable{Windows.Win32.Foundation.UNICODE_STRING},Windows.Win32.System.WindowsProgramming.OBJECT_ATTRIBUTES@,System.UInt32,Windows.Win32.LsaCloseSafeHandle@)">
            <inheritdoc cref="M:Windows.Win32.PInvoke.LsaOpenPolicy(Windows.Win32.Foundation.UNICODE_STRING*,Windows.Win32.System.WindowsProgramming.OBJECT_ATTRIBUTES*,System.UInt32,Windows.Win32.Security.Authentication.Identity.LSA_HANDLE*)"/>
        </member>
        <member name="M:Windows.Win32.PInvoke.LsaOpenPolicy(Windows.Win32.Foundation.UNICODE_STRING*,Windows.Win32.System.WindowsProgramming.OBJECT_ATTRIBUTES*,System.UInt32,Windows.Win32.Security.Authentication.Identity.LSA_HANDLE*)">
            <summary>Opens a handle to the Policy object on a local or remote system.</summary>
            <param name="SystemName">
            <para>A pointer to an <a href="https://docs.microsoft.com/windows/desktop/api/lsalookup/ns-lsalookup-lsa_unicode_string">LSA_UNICODE_STRING</a> structure that contains the name of the target system. The name can have the form "<i>ComputerName</i>" or "&#92;&#92;<i>ComputerName</i>". If this parameter is <b>NULL</b>, the function opens the <a href="https://docs.microsoft.com/windows/desktop/SecMgmt/policy-object">Policy</a> object on the local system.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//ntsecapi/nf-ntsecapi-lsaopenpolicy#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="ObjectAttributes">
            <para>A pointer to an <a href="https://docs.microsoft.com/windows/desktop/api/lsalookup/ns-lsalookup-lsa_object_attributes">LSA_OBJECT_ATTRIBUTES</a> structure that specifies the connection attributes. The structure members are not used; initialize them to <b>NULL</b> or zero.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//ntsecapi/nf-ntsecapi-lsaopenpolicy#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="DesiredAccess">An <a href="https://docs.microsoft.com/windows/desktop/SecAuthZ/access-mask">ACCESS_MASK</a> that specifies the requested access rights. The function fails if the DACL of the target system does not allow the caller the requested access. To determine the access rights that you need, see the documentation for the LSA functions with which you want to use the policy handle.</param>
            <param name="PolicyHandle">
            <para>A pointer to an <a href="https://docs.microsoft.com/windows/desktop/SecMgmt/lsa-handle">LSA_HANDLE</a> variable that receives a handle to the <a href="https://docs.microsoft.com/windows/desktop/SecMgmt/policy-object">Policy</a> object. When you no longer need this handle, pass it to the <a href="https://docs.microsoft.com/windows/desktop/api/ntsecapi/nf-ntsecapi-lsaclose">LsaClose</a> function to close it.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//ntsecapi/nf-ntsecapi-lsaopenpolicy#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>If the function succeeds, the function returns STATUS_SUCCESS. If the function fails, it returns an <b>NTSTATUS</b> code. For more information, see <a href="/windows/desktop/SecMgmt/management-return-values">LSA Policy Function Return Values</a>. You can use the <a href="/windows/desktop/api/ntsecapi/nf-ntsecapi-lsantstatustowinerror">LsaNtStatusToWinError</a> function to convert the <b>NTSTATUS</b> code to a Windows error code.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//ntsecapi/nf-ntsecapi-lsaopenpolicy">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.LsaNtStatusToWinError(Windows.Win32.Foundation.NTSTATUS)">
            <summary>The LsaNtStatusToWinError function converts an NTSTATUS code returned by an LSA function to a Windows error code.</summary>
            <param name="Status">
            <para>An NTSTATUS code returned by an LSA function call. This value will be converted to a <a href="https://docs.microsoft.com/windows/desktop/Debug/system-error-codes">System error code</a>.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//ntsecapi/nf-ntsecapi-lsantstatustowinerror#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>The return value is the Windows error code that corresponds to the <i>Status</i> parameter. If there is no corresponding Windows error code, the return value is ERROR_MR_MID_NOT_FOUND.</returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//ntsecapi/nf-ntsecapi-lsantstatustowinerror">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.LsaRemoveAccountRights(System.Runtime.InteropServices.SafeHandle,Windows.Win32.Foundation.PSID,Windows.Win32.Foundation.BOOLEAN,System.Span{Windows.Win32.Foundation.UNICODE_STRING})">
            <inheritdoc cref="M:Windows.Win32.PInvoke.LsaRemoveAccountRights(Windows.Win32.Security.Authentication.Identity.LSA_HANDLE,Windows.Win32.Foundation.PSID,Windows.Win32.Foundation.BOOLEAN,Windows.Win32.Foundation.UNICODE_STRING*,System.UInt32)"/>
        </member>
        <member name="M:Windows.Win32.PInvoke.LsaRemoveAccountRights(Windows.Win32.Security.Authentication.Identity.LSA_HANDLE,Windows.Win32.Foundation.PSID,Windows.Win32.Foundation.BOOLEAN,Windows.Win32.Foundation.UNICODE_STRING*,System.UInt32)">
            <summary>Removes one or more privileges from an account.</summary>
            <param name="PolicyHandle">
            <para>A handle to a <a href="https://docs.microsoft.com/windows/desktop/SecMgmt/policy-object">Policy</a> object. The handle must have the POLICY_LOOKUP_NAMES access right. For more information, see <a href="https://docs.microsoft.com/windows/desktop/SecMgmt/opening-a-policy-object-handle">Opening a Policy Object Handle</a>.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//ntsecapi/nf-ntsecapi-lsaremoveaccountrights#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="AccountSid">Pointer to the <a href="https://docs.microsoft.com/windows/desktop/SecGloss/s-gly">security identifier</a> (SID) of the account from which the privileges are removed.</param>
            <param name="AllRights">If <b>TRUE</b>, the function removes all privileges and deletes the account. In this case, the function ignores the <i>UserRights</i> parameter. If <b>FALSE</b>, the function removes the privileges specified by the <i>UserRights</i> parameter.</param>
            <param name="UserRights">
            <para>Pointer to an array of <a href="https://docs.microsoft.com/windows/desktop/api/lsalookup/ns-lsalookup-lsa_unicode_string">LSA_UNICODE_STRING</a> structures. Each structure contains the name of a privilege to be removed from the account. For a list of privilege names, see <a href="https://docs.microsoft.com/windows/desktop/SecAuthZ/authorization-constants">Privilege Constants</a>.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//ntsecapi/nf-ntsecapi-lsaremoveaccountrights#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="CountOfRights">Specifies the number of elements in the <i>UserRights</i> array.</param>
            <returns>
            <para>If the function succeeds, the return value is STATUS_SUCCESS. If the function fails, the return value is an NTSTATUS code, which can be one of the following values or one of the <a href="/windows/desktop/SecMgmt/management-return-values">LSA Policy Function Return Values</a>. </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//ntsecapi/nf-ntsecapi-lsaremoveaccountrights">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.CloseHandle(Windows.Win32.Foundation.HANDLE)">
            <summary>Closes an open object handle.</summary>
            <param name="hObject">A valid handle to an open object.</param>
            <returns>
            <para>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>. If the application is running under a debugger,  the function will throw an exception if it receives either a  handle value that is not valid  or a pseudo-handle value. This can happen if you close a handle twice, or if you  call <b>CloseHandle</b> on a handle returned by the <a href="/windows/desktop/api/fileapi/nf-fileapi-findfirstfilea">FindFirstFile</a> function instead of calling the <a href="/windows/desktop/api/fileapi/nf-fileapi-findclose">FindClose</a> function.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//handleapi/nf-handleapi-closehandle">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
    </members>
</doc>

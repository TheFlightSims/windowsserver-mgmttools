<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AlphaFS</name>
    </assembly>
    <members>
        <member name="T:Alphaleonis.Win32.Filesystem.AlternateDataStreamInfo">
            <summary>Information about an alternate data stream.</summary>  
            <seealso cref="O:Alphaleonis.Win32.Filesystem.File.EnumerateAlternateDataStreams"/> 
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.AlternateDataStreamInfo.StreamName">
            <summary>Gets the name of the alternate data stream.</summary>
            <remarks>This value is an empty string for the default stream (:$DATA), and for any other data stream it contains the name of the stream.</remarks>
            <value>The name of the stream.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.AlternateDataStreamInfo.Size">
            <summary>Gets the size of the stream.</summary>      
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.AlternateDataStreamInfo.FullPath">
            <summary>Gets the full path to the stream.</summary>
            <remarks>
              This is a path in long path format that can be passed to <see cref="O:Alphaleonis.Win32.Filesystem.File.Open"/> to open the stream if
              <see cref="F:Alphaleonis.Win32.Filesystem.PathFormat.FullPath"/> or
              <see cref="F:Alphaleonis.Win32.Filesystem.PathFormat.LongFullPath"/> is specified.
            </remarks>
            <value>The full path to the stream in long path format.</value>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.AlternateDataStreamInfo.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.AlternateDataStreamInfo.Equals(System.Object)">
            <summary>Indicates whether this instance and a specified object are equal.</summary>
            <param name="obj">The object to compare with the current instance.</param>
            <returns>
              true if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.AlternateDataStreamInfo.op_Equality(Alphaleonis.Win32.Filesystem.AlternateDataStreamInfo,Alphaleonis.Win32.Filesystem.AlternateDataStreamInfo)">
            <summary>Equality operator.</summary>
            <param name="first">The first operand.</param>
            <param name="second">The second operand.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.AlternateDataStreamInfo.op_Inequality(Alphaleonis.Win32.Filesystem.AlternateDataStreamInfo,Alphaleonis.Win32.Filesystem.AlternateDataStreamInfo)">
            <summary>Inequality operator.</summary>
            <param name="first">The first operand.</param>
            <param name="second">The second operand.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.BackupStreamInfo">
            <summary>The <see cref="T:Alphaleonis.Win32.Filesystem.BackupStreamInfo"/> structure contains stream header data.</summary>
            <seealso cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.BackupStreamInfo.#ctor(Alphaleonis.Win32.Filesystem.NativeMethods.WIN32_STREAM_ID,System.String)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.BackupStreamInfo"/> class.</summary>
            <param name="streamID">The stream ID.</param>
            <param name="name">The name.</param>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.BackupStreamInfo.Size">
            <summary>Gets the size of the data in the substream, in bytes.</summary>
            <value>The size of the data in the substream, in bytes.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.BackupStreamInfo.Name">
            <summary>Gets a string that specifies the name of the alternative data stream.</summary>
            <value>A string that specifies the name of the alternative data stream.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.BackupStreamInfo.StreamType">
            <summary>Gets the type of the data in the stream.</summary>
            <value>The type of the data in the stream.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.BackupStreamInfo.Attributes">
            <summary>Gets the attributes of the data to facilitate cross-operating system transfer.</summary>
            <value>Attributes of the data to facilitate cross-operating system transfer.</value>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.CopyMoveProgressRoutine">
            <summary>Callback used by CopyFileXxx and MoveFileXxx to report progress about the copy/move operation.</summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.Directory">
            <summary>Exposes static methods for creating, moving, and enumerating through directories and subdirectories.
              <para>This class cannot be inherited.</para>
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Copy(System.String,System.String)">
            <summary>[AlphaFS] Copies an existing directory to a new directory. Overwriting a directory of the same name is not allowed.</summary>
            <remarks>
              <para>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method.</para>
              <para>If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior.</para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="sourcePath">The source directory path.</param>
            <param name="destinationPath">The destination directory path.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Copy(System.String,System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Copies an existing directory to a new directory. Overwriting a directory of the same name is not allowed.</summary>
            <remarks>
              <para>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method.</para>
              <para>If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior.</para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="sourcePath">The source directory path.</param>
            <param name="destinationPath">The destination directory path.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Copy(System.String,System.String,System.Boolean)">
            <summary>[AlphaFS] Copies an existing directory to a new directory. Overwriting a directory of the same name is allowed.</summary>
            <remarks>
              <para>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method.</para>
              <para>If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior.</para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="sourcePath">The source directory path.</param>
            <param name="destinationPath">The destination directory path.</param>
            <param name="overwrite"><see langword="true"/> if the destination directory should ignoring the read-only and hidden attributes and overwrite; otherwise, <see langword="false"/>.</param>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Copy(System.String,System.String,System.Boolean,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Copies an existing directory to a new directory. Overwriting a directory of the same name is allowed.</summary>
            <remarks>
              <para>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method.</para>
              <para>If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior.</para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="sourcePath">The source directory path.</param>
            <param name="destinationPath">The destination directory path.</param>
            <param name="overwrite"><see langword="true"/> if the destination directory should ignoring the read-only and hidden attributes and overwrite; otherwise, <see langword="false"/>.</param>      
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.CopyTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String)">
            <summary>[AlphaFS] Copies an existing directory to a new directory. Overwriting a directory of the same name is not allowed.</summary>
            <remarks>
              <para>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method.</para>
              <para>If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior.</para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="transaction">The transaction.</param>
            <param name="sourcePath">The source directory path.</param>
            <param name="destinationPath">The destination directory path.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.CopyTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Copies an existing directory to a new directory. Overwriting a directory of the same name is not allowed.</summary>
            <remarks>
              <para>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method.</para>
              <para>If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior.</para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="transaction">The transaction.</param>
            <param name="sourcePath">The source directory path.</param>
            <param name="destinationPath">The destination directory path.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.CopyTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,System.Boolean)">
            <summary>[AlphaFS] Copies an existing directory to a new directory. Overwriting a directory of the same name is allowed.</summary>
            <remarks>
              <para>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method.</para>
              <para>If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior.</para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="transaction">The transaction.</param>
            <param name="sourcePath">The source directory path.</param>
            <param name="destinationPath">The destination directory path.</param>
            <param name="overwrite"><see langword="true"/> if the destination directory should ignoring the read-only and hidden attributes and overwrite; otherwise, <see langword="false"/>.</param>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.CopyTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,System.Boolean,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Copies an existing directory to a new directory. Overwriting a directory of the same name is allowed.</summary>
            <remarks>
              <para>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method.</para>
              <para>If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior.</para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="transaction">The transaction.</param>
            <param name="sourcePath">The source directory path.</param>
            <param name="destinationPath">The destination directory path.</param>
            <param name="overwrite"><see langword="true"/> if the destination directory should ignoring the read-only and hidden attributes and overwrite; otherwise, <see langword="false"/>.</param>      
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Copy(System.String,System.String,Alphaleonis.Win32.Filesystem.CopyOptions)">
            <summary>[AlphaFS] Copies a directory and its contents to a new location, <see cref="T:Alphaleonis.Win32.Filesystem.CopyOptions"/> can be specified.</summary>
            <remarks>
              <para>Option <see cref="F:Alphaleonis.Win32.Filesystem.CopyOptions.NoBuffering"/> is recommended for very large file transfers.</para>
              <para>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method.</para>
              <para>If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior.</para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="sourcePath">The source directory path.</param>
            <param name="destinationPath">The destination directory path.</param>
            <param name="copyOptions"><see cref="T:Alphaleonis.Win32.Filesystem.CopyOptions"/> that specify how the directory is to be copied. This parameter can be <see langword="null"/>.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Copy(System.String,System.String,Alphaleonis.Win32.Filesystem.CopyOptions,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Copies a directory and its contents to a new location, <see cref="T:Alphaleonis.Win32.Filesystem.CopyOptions"/> can be specified.</summary>
            <remarks>
              <para>Option <see cref="F:Alphaleonis.Win32.Filesystem.CopyOptions.NoBuffering"/> is recommended for very large file transfers.</para>
              <para>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method.</para>
              <para>If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior.</para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="sourcePath">The source directory path.</param>
            <param name="destinationPath">The destination directory path.</param>
            <param name="copyOptions"><see cref="T:Alphaleonis.Win32.Filesystem.CopyOptions"/> that specify how the directory is to be copied. This parameter can be <see langword="null"/>.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Copy(System.String,System.String,Alphaleonis.Win32.Filesystem.CopyOptions,Alphaleonis.Win32.Filesystem.CopyMoveProgressRoutine,System.Object)">
            <summary>[AlphaFS] Copies a directory and its contents to a new location, <see cref="T:Alphaleonis.Win32.Filesystem.CopyOptions"/> can be specified,
              and the possibility of notifying the application of its progress through a callback function.
            </summary>
            <returns>A <see cref="T:Alphaleonis.Win32.Filesystem.CopyMoveResult"/> class with the status of the Copy action.</returns>
            <remarks>
              <para>Option <see cref="F:Alphaleonis.Win32.Filesystem.CopyOptions.NoBuffering"/> is recommended for very large file transfers.</para>
              <para>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method.</para>
              <para>If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior.</para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="sourcePath">The source directory path.</param>
            <param name="destinationPath">The destination directory path.</param>
            <param name="copyOptions"><see cref="T:Alphaleonis.Win32.Filesystem.CopyOptions"/> that specify how the directory is to be copied. This parameter can be <see langword="null"/>.</param>
            <param name="progressHandler">A callback function that is called each time another portion of the directory has been copied. This parameter can be <see langword="null"/>.</param>
            <param name="userProgressData">The argument to be passed to the callback function. This parameter can be <see langword="null"/>.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Copy(System.String,System.String,Alphaleonis.Win32.Filesystem.CopyOptions,Alphaleonis.Win32.Filesystem.CopyMoveProgressRoutine,System.Object,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Copies a directory and its contents to a new location, <see cref="T:Alphaleonis.Win32.Filesystem.CopyOptions"/> can be specified,
              and the possibility of notifying the application of its progress through a callback function.
            </summary>
            <returns>A <see cref="T:Alphaleonis.Win32.Filesystem.CopyMoveResult"/> class with the status of the Copy action.</returns>
            <remarks>
              <para>Option <see cref="F:Alphaleonis.Win32.Filesystem.CopyOptions.NoBuffering"/> is recommended for very large file transfers.</para>
              <para>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method.</para>
              <para>If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior.</para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="sourcePath">The source directory path.</param>
            <param name="destinationPath">The destination directory path.</param>
            <param name="copyOptions"><see cref="T:Alphaleonis.Win32.Filesystem.CopyOptions"/> that specify how the directory is to be copied. This parameter can be <see langword="null"/>.</param>
            <param name="progressHandler">A callback function that is called each time another portion of the directory has been copied. This parameter can be <see langword="null"/>.</param>
            <param name="userProgressData">The argument to be passed to the callback function. This parameter can be <see langword="null"/>.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.CopyTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,Alphaleonis.Win32.Filesystem.CopyOptions)">
            <summary>[AlphaFS] Copies a directory and its contents to a new location, <see cref="T:Alphaleonis.Win32.Filesystem.CopyOptions"/> can be specified.</summary>
            <remarks>
              <para>Option <see cref="F:Alphaleonis.Win32.Filesystem.CopyOptions.NoBuffering"/> is recommended for very large file transfers.</para>
              <para>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method.</para>
              <para>If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior.</para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="transaction">The transaction.</param>
            <param name="sourcePath">The source directory path.</param>
            <param name="destinationPath">The destination directory path.</param>
            <param name="copyOptions"><see cref="T:Alphaleonis.Win32.Filesystem.CopyOptions"/> that specify how the directory is to be copied. This parameter can be <see langword="null"/>.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.CopyTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,Alphaleonis.Win32.Filesystem.CopyOptions,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Copies a directory and its contents to a new location, <see cref="T:Alphaleonis.Win32.Filesystem.CopyOptions"/> can be specified.</summary>
            <remarks>
              <para>Option <see cref="F:Alphaleonis.Win32.Filesystem.CopyOptions.NoBuffering"/> is recommended for very large file transfers.</para>
              <para>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method.</para>
              <para>If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior.</para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="transaction">The transaction.</param>
            <param name="sourcePath">The source directory path.</param>
            <param name="destinationPath">The destination directory path.</param>
            <param name="copyOptions"><see cref="T:Alphaleonis.Win32.Filesystem.CopyOptions"/> that specify how the directory is to be copied. This parameter can be <see langword="null"/>.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.CopyTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,Alphaleonis.Win32.Filesystem.CopyOptions,Alphaleonis.Win32.Filesystem.CopyMoveProgressRoutine,System.Object)">
            <summary>[AlphaFS] Copies a directory and its contents to a new location, <see cref="T:Alphaleonis.Win32.Filesystem.CopyOptions"/> can be specified,
              and the possibility of notifying the application of its progress through a callback function.
            </summary>
            <returns>A <see cref="T:Alphaleonis.Win32.Filesystem.CopyMoveResult"/> class with the status of the Copy action.</returns>
            <remarks>
              <para>Option <see cref="F:Alphaleonis.Win32.Filesystem.CopyOptions.NoBuffering"/> is recommended for very large file transfers.</para>
              <para>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method.</para>
              <para>If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior.</para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="transaction">The transaction.</param>
            <param name="sourcePath">The source directory path.</param>
            <param name="destinationPath">The destination directory path.</param>
            <param name="copyOptions"><see cref="T:Alphaleonis.Win32.Filesystem.CopyOptions"/> that specify how the directory is to be copied. This parameter can be <see langword="null"/>.</param>
            <param name="progressHandler">A callback function that is called each time another portion of the directory has been copied. This parameter can be <see langword="null"/>.</param>
            <param name="userProgressData">The argument to be passed to the callback function. This parameter can be <see langword="null"/>.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.CopyTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,Alphaleonis.Win32.Filesystem.CopyOptions,Alphaleonis.Win32.Filesystem.CopyMoveProgressRoutine,System.Object,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Copies a directory and its contents to a new location, <see cref="T:Alphaleonis.Win32.Filesystem.CopyOptions"/> can be specified,
              and the possibility of notifying the application of its progress through a callback function.
            </summary>
            <returns>A <see cref="T:Alphaleonis.Win32.Filesystem.CopyMoveResult"/> class with the status of the Copy action.</returns>
            <remarks>
              <para>Option <see cref="F:Alphaleonis.Win32.Filesystem.CopyOptions.NoBuffering"/> is recommended for very large file transfers.</para>
              <para>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method.</para>
              <para>If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior.</para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="transaction">The transaction.</param>
            <param name="sourcePath">The source directory path.</param>
            <param name="destinationPath">The destination directory path.</param>
            <param name="copyOptions"><see cref="T:Alphaleonis.Win32.Filesystem.CopyOptions"/> that specify how the directory is to be copied. This parameter can be <see langword="null"/>.</param>
            <param name="progressHandler">A callback function that is called each time another portion of the directory has been copied. This parameter can be <see langword="null"/>.</param>
            <param name="userProgressData">The argument to be passed to the callback function. This parameter can be <see langword="null"/>.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Move(System.String,System.String)">
            <summary>Moves a file or a directory and its contents to a new location.</summary>
            <remarks>
              <para>This method does not work across disk volumes.</para>
              <para>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method.</para>
              <para>If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior.</para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="sourcePath">The source directory path.</param>
            <param name="destinationPath">The destination directory path.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Move(System.String,System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Moves a file or a directory and its contents to a new location.</summary>
            <remarks>
              <para>This method does not work across disk volumes.</para>
              <para>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method.</para>
              <para>If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior.</para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="sourcePath">The source directory path.</param>
            <param name="destinationPath">The destination directory path.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.MoveTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String)">
            <summary>[AlphaFS] Moves a file or a directory and its contents to a new location.</summary>
            <remarks>
              <para>This method does not work across disk volumes.</para>
              <para>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method.</para>
              <para>If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior.</para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="transaction">The transaction.</param>
            <param name="sourcePath">The source directory path.</param>
            <param name="destinationPath">The destination directory path.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.MoveTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Moves a file or a directory and its contents to a new location.</summary>
            <remarks>
              <para>This method does not work across disk volumes.</para>
              <para>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method.</para>
              <para>If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior.</para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="transaction">The transaction.</param>
            <param name="sourcePath">The source directory path.</param>
            <param name="destinationPath">The destination directory path.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Move(System.String,System.String,Alphaleonis.Win32.Filesystem.MoveOptions)">
            <summary>[AlphaFS] Moves a file or a directory and its contents to a new location, <see cref="T:Alphaleonis.Win32.Filesystem.MoveOptions"/> can be specified.</summary>
            <remarks>
              <para>This method does not work across disk volumes unless <paramref name="moveOptions"/> contains <see cref="F:Alphaleonis.Win32.Filesystem.MoveOptions.CopyAllowed"/>.</para>
              <para>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method.</para>
              <para>If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior.</para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="sourcePath">The source directory path.</param>
            <param name="destinationPath">The destination directory path.</param>
            <param name="moveOptions"><see cref="T:Alphaleonis.Win32.Filesystem.MoveOptions"/> that specify how the directory is to be moved. This parameter can be <see langword="null"/>.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Move(System.String,System.String,Alphaleonis.Win32.Filesystem.MoveOptions,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Moves a file or a directory and its contents to a new location, <see cref="T:Alphaleonis.Win32.Filesystem.MoveOptions"/> can be specified.</summary>
            <remarks>
              <para>This method does not work across disk volumes unless <paramref name="moveOptions"/> contains <see cref="F:Alphaleonis.Win32.Filesystem.MoveOptions.CopyAllowed"/>.</para>
              <para>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method.</para>
              <para>If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior.</para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="sourcePath">The source directory path.</param>
            <param name="destinationPath">The destination directory path.</param>
            <param name="moveOptions"><see cref="T:Alphaleonis.Win32.Filesystem.MoveOptions"/> that specify how the directory is to be moved. This parameter can be <see langword="null"/>.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Move(System.String,System.String,Alphaleonis.Win32.Filesystem.MoveOptions,Alphaleonis.Win32.Filesystem.CopyMoveProgressRoutine,System.Object)">
            <summary>[AlphaFS] Moves a file or a directory and its contents to a new location, <see cref="T:Alphaleonis.Win32.Filesystem.MoveOptions"/> can be specified,
              and the possibility of notifying the application of its progress through a callback function.
            </summary>
            <returns>A <see cref="T:Alphaleonis.Win32.Filesystem.CopyMoveResult"/> class with the status of the Move action.</returns>
            <remarks>
              <para>This method does not work across disk volumes unless <paramref name="moveOptions"/> contains <see cref="F:Alphaleonis.Win32.Filesystem.MoveOptions.CopyAllowed"/>.</para>
              <para>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method.</para>
              <para>If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior.</para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="sourcePath">The source directory path.</param>
            <param name="destinationPath">The destination directory path.</param>
            <param name="moveOptions"><see cref="T:Alphaleonis.Win32.Filesystem.MoveOptions"/> that specify how the directory is to be moved. This parameter can be <see langword="null"/>.</param>
            <param name="progressHandler">A callback function that is called each time another portion of the directory has been moved. This parameter can be <see langword="null"/>.</param>
            <param name="userProgressData">The argument to be passed to the callback function. This parameter can be <see langword="null"/>.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Move(System.String,System.String,Alphaleonis.Win32.Filesystem.MoveOptions,Alphaleonis.Win32.Filesystem.CopyMoveProgressRoutine,System.Object,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Moves a file or a directory and its contents to a new location, <see cref="T:Alphaleonis.Win32.Filesystem.MoveOptions"/> can be specified,
              and the possibility of notifying the application of its progress through a callback function.
            </summary>
            <returns>A <see cref="T:Alphaleonis.Win32.Filesystem.CopyMoveResult"/> class with the status of the Move action.</returns>
            <remarks>
              <para>This method does not work across disk volumes unless <paramref name="moveOptions"/> contains <see cref="F:Alphaleonis.Win32.Filesystem.MoveOptions.CopyAllowed"/>.</para>
              <para>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method.</para>
              <para>If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior.</para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="sourcePath">The source directory path.</param>
            <param name="destinationPath">The destination directory path.</param>
            <param name="moveOptions"><see cref="T:Alphaleonis.Win32.Filesystem.MoveOptions"/> that specify how the directory is to be moved. This parameter can be <see langword="null"/>.</param>
            <param name="progressHandler">A callback function that is called each time another portion of the directory has been moved. This parameter can be <see langword="null"/>.</param>
            <param name="userProgressData">The argument to be passed to the callback function. This parameter can be <see langword="null"/>.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.MoveTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,Alphaleonis.Win32.Filesystem.MoveOptions)">
            <summary>[AlphaFS] Moves a file or a directory and its contents to a new location, <see cref="T:Alphaleonis.Win32.Filesystem.MoveOptions"/> can be specified.</summary>
            <remarks>
              <para>This method does not work across disk volumes unless <paramref name="moveOptions"/> contains <see cref="F:Alphaleonis.Win32.Filesystem.MoveOptions.CopyAllowed"/>.</para>
              <para>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method.</para>
              <para>If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior.</para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="transaction">The transaction.</param>
            <param name="sourcePath">The source directory path.</param>
            <param name="destinationPath">The destination directory path.</param>
            <param name="moveOptions"><see cref="T:Alphaleonis.Win32.Filesystem.MoveOptions"/> that specify how the directory is to be moved. This parameter can be <see langword="null"/>.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.MoveTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,Alphaleonis.Win32.Filesystem.MoveOptions,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Moves a file or a directory and its contents to a new location, <see cref="T:Alphaleonis.Win32.Filesystem.MoveOptions"/> can be specified.</summary>
            <remarks>
              <para>This method does not work across disk volumes unless <paramref name="moveOptions"/> contains <see cref="F:Alphaleonis.Win32.Filesystem.MoveOptions.CopyAllowed"/>.</para>
              <para>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method.</para>
              <para>If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior.</para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="transaction">The transaction.</param>
            <param name="sourcePath">The source directory path.</param>
            <param name="destinationPath">The destination directory path.</param>
            <param name="moveOptions"><see cref="T:Alphaleonis.Win32.Filesystem.MoveOptions"/> that specify how the directory is to be moved. This parameter can be <see langword="null"/>.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.MoveTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,Alphaleonis.Win32.Filesystem.MoveOptions,Alphaleonis.Win32.Filesystem.CopyMoveProgressRoutine,System.Object)">
            <summary>[AlphaFS] Moves a file or a directory and its contents to a new location, <see cref="T:Alphaleonis.Win32.Filesystem.MoveOptions"/> can be specified,
              and the possibility of notifying the application of its progress through a callback function.
            </summary>
            <returns>A <see cref="T:Alphaleonis.Win32.Filesystem.CopyMoveResult"/> class with the status of the Move action.</returns>
            <remarks>
              <para>This method does not work across disk volumes unless <paramref name="moveOptions"/> contains <see cref="F:Alphaleonis.Win32.Filesystem.MoveOptions.CopyAllowed"/>.</para>
              <para>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method.</para>
              <para>If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior.</para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="transaction">The transaction.</param>
            <param name="sourcePath">The source directory path.</param>
            <param name="destinationPath">The destination directory path.</param>
            <param name="moveOptions"><see cref="T:Alphaleonis.Win32.Filesystem.MoveOptions"/> that specify how the directory is to be moved. This parameter can be <see langword="null"/>.</param>
            <param name="progressHandler">A callback function that is called each time another portion of the directory has been moved. This parameter can be <see langword="null"/>.</param>
            <param name="userProgressData">The argument to be passed to the callback function. This parameter can be <see langword="null"/>.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.MoveTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,Alphaleonis.Win32.Filesystem.MoveOptions,Alphaleonis.Win32.Filesystem.CopyMoveProgressRoutine,System.Object,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Moves a file or a directory and its contents to a new location, <see cref="T:Alphaleonis.Win32.Filesystem.MoveOptions"/> can be specified,
              and the possibility of notifying the application of its progress through a callback function.
            </summary>
            <returns>A <see cref="T:Alphaleonis.Win32.Filesystem.CopyMoveResult"/> class with the status of the Move action.</returns>
            <remarks>
              <para>This method does not work across disk volumes unless <paramref name="moveOptions"/> contains <see cref="F:Alphaleonis.Win32.Filesystem.MoveOptions.CopyAllowed"/>.</para>
              <para>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method.</para>
              <para>If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior.</para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="transaction">The transaction.</param>
            <param name="sourcePath">The source directory path.</param>
            <param name="destinationPath">The destination directory path.</param>
            <param name="moveOptions"><see cref="T:Alphaleonis.Win32.Filesystem.MoveOptions"/> that specify how the directory is to be moved. This parameter can be <see langword="null"/>.</param>
            <param name="progressHandler">A callback function that is called each time another portion of the directory has been moved. This parameter can be <see langword="null"/>.</param>
            <param name="userProgressData">The argument to be passed to the callback function. This parameter can be <see langword="null"/>.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.CopyMoveCore(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,System.Nullable{Alphaleonis.Win32.Filesystem.CopyOptions},System.Nullable{Alphaleonis.Win32.Filesystem.MoveOptions},Alphaleonis.Win32.Filesystem.CopyMoveProgressRoutine,System.Object,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>Copy/move a Non-/Transacted file or directory including its children to a new location,
              <see cref="T:Alphaleonis.Win32.Filesystem.CopyOptions"/> or <see cref="T:Alphaleonis.Win32.Filesystem.MoveOptions"/> can be specified,
              and the possibility of notifying the application of its progress through a callback function.
            </summary>
            <returns>A <see cref="T:Alphaleonis.Win32.Filesystem.CopyMoveResult"/> class with the status of the Copy or Move action.</returns>
            <remarks>
              <para>Option <see cref="F:Alphaleonis.Win32.Filesystem.CopyOptions.NoBuffering"/> is recommended for very large file transfers.</para>
              <para>You cannot use the Move method to overwrite an existing file, unless <paramref name="moveOptions"/> contains <see cref="F:Alphaleonis.Win32.Filesystem.MoveOptions.ReplaceExisting"/>.</para>
              <para>This Move method works across disk volumes.</para>
              <para>Note that if you attempt to replace a file by moving a file of the same name into that directory, you get an IOException.</para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="transaction">The transaction.</param>
            <param name="sourcePath">The source directory path.</param>
            <param name="destinationPath">The destination directory path.</param>
            <param name="copyOptions"><see cref="T:Alphaleonis.Win32.Filesystem.CopyOptions"/> that specify how the directory is to be copied. This parameter can be <see langword="null"/>.</param>
            <param name="moveOptions"><see cref="T:Alphaleonis.Win32.Filesystem.MoveOptions"/> that specify how the directory is to be moved. This parameter can be <see langword="null"/>.</param>
            <param name="progressHandler">A callback function that is called each time another portion of the file has been copied/moved. This parameter can be <see langword="null"/>.</param>
            <param name="userProgressData">The argument to be passed to the callback function. This parameter can be <see langword="null"/>.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.CountFileSystemObjects(System.String,Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions)">
            <summary>[AlphaFS] Counts file system objects: files, folders or both) in a given directory.</summary>
            <returns>The counted number of file system objects.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="path">The directory path.</param>
            <param name="options"><see cref="T:Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions"/> flags that specify how the directory is to be enumerated.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.CountFileSystemObjects(System.String,Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Counts file system objects: files, folders or both) in a given directory.</summary>
            <returns>The counted number of file system objects.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="path">The directory path.</param>
            <param name="options"><see cref="T:Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions"/> flags that specify how the directory is to be enumerated.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.CountFileSystemObjects(System.String,System.String,Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions)">
            <summary>[AlphaFS] Counts file system objects: files, folders or both) in a given directory.</summary>
            <returns>The counted number of file system objects.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="path">The directory path.</param>
            <param name="searchPattern">
              The search string to match against the names of directories in <paramref name="path"/>.
              This parameter can contain a combination of valid literal path and wildcard
              (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/> and <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>) characters, but does not support regular expressions.
            </param>
            <param name="options"><see cref="T:Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions"/> flags that specify how the directory is to be enumerated.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.CountFileSystemObjects(System.String,System.String,Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Counts file system objects: files, folders or both) in a given directory.</summary>
            <returns>The counted number of file system objects.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="path">The directory path.</param>
            <param name="searchPattern">
              The search string to match against the names of directories in <paramref name="path"/>.
              This parameter can contain a combination of valid literal path and wildcard
              (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/> and <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>) characters, but does not support regular expressions.
            </param>
            <param name="options"><see cref="T:Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions"/> flags that specify how the directory is to be enumerated.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.CountFileSystemObjectsTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions)">
            <summary>[AlphaFS] Counts file system objects: files, folders or both) in a given directory.</summary>
            <returns>The counted number of file system objects.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory path.</param>
            <param name="options"><see cref="T:Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions"/> flags that specify how the directory is to be enumerated.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.CountFileSystemObjectsTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Counts file system objects: files, folders or both) in a given directory.</summary>
            <returns>The counted number of file system objects.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory path.</param>
            <param name="options"><see cref="T:Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions"/> flags that specify how the directory is to be enumerated.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.CountFileSystemObjectsTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions)">
            <summary>[AlphaFS] Counts file system objects: files, folders or both) in a given directory.</summary>
            <returns>The counted number of file system objects.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory path.</param>
            <param name="searchPattern">
              The search string to match against the names of directories in <paramref name="path"/>.
              This parameter can contain a combination of valid literal path and wildcard
              (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/> and <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>) characters, but does not support regular expressions.
            </param>
            <param name="options"><see cref="T:Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions"/> flags that specify how the directory is to be enumerated.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.CountFileSystemObjectsTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Counts file system objects: files, folders or both) in a given directory.</summary>
            <returns>The counted number of file system objects.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory path.</param>
            <param name="searchPattern">
              The search string to match against the names of directories in <paramref name="path"/>.
              This parameter can contain a combination of valid literal path and wildcard
              (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/> and <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>) characters, but does not support regular expressions.
            </param>
            <param name="options"><see cref="T:Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions"/> flags that specify how the directory is to be enumerated.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.DeleteEmptySubdirectories(System.String,System.Boolean)">
            <summary>[AlphaFS] Deletes empty subdirectories from the specified directory.</summary>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <param name="path">The name of the directory to remove empty subdirectories from.</param>
            <param name="recursive"><see langword="true"/> deletes empty subdirectories from this directory and its subdirectories.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.DeleteEmptySubdirectories(System.String,System.Boolean,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Deletes empty subdirectories from the specified directory.</summary>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <param name="path">The name of the directory to remove empty subdirectories from.</param>
            <param name="recursive"><see langword="true"/> deletes empty subdirectories from this directory and its subdirectories.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.DeleteEmptySubdirectories(System.String,System.Boolean,System.Boolean)">
            <summary>[AlphaFS] Deletes empty subdirectories from the specified directory.</summary>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <param name="path">The name of the directory to remove empty subdirectories from.</param>
            <param name="recursive"><see langword="true"/> deletes empty subdirectories from this directory and its subdirectories.</param>
            <param name="ignoreReadOnly"><see langword="true"/> overrides read only <see cref="T:System.IO.FileAttributes"/> of empty directories.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.DeleteEmptySubdirectories(System.String,System.Boolean,System.Boolean,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Deletes empty subdirectories from the specified directory.</summary>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <param name="path">The name of the directory to remove empty subdirectories from.</param>
            <param name="recursive"><see langword="true"/> deletes empty subdirectories from this directory and its subdirectories.</param>
            <param name="ignoreReadOnly"><see langword="true"/> overrides read only <see cref="T:System.IO.FileAttributes"/> of empty directories.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.DeleteEmptySubdirectoriesTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Boolean)">
            <summary>[AlphaFS] Deletes empty subdirectories from the specified directory.</summary>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <param name="transaction">The transaction.</param>
            <param name="path">The name of the directory to remove empty subdirectories from.</param>
            <param name="recursive"><see langword="true"/> deletes empty subdirectories from this directory and its subdirectories.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.DeleteEmptySubdirectoriesTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Boolean,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Deletes empty subdirectories from the specified directory.</summary>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <param name="transaction">The transaction.</param>
            <param name="path">The name of the directory to remove empty subdirectories from.</param>
            <param name="recursive"><see langword="true"/> deletes empty subdirectories from this directory and its subdirectories.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.DeleteEmptySubdirectoriesTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Boolean,System.Boolean)">
            <summary>[AlphaFS] Deletes empty subdirectories from the specified directory.</summary>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <param name="transaction">The transaction.</param>
            <param name="path">The name of the directory to remove empty subdirectories from.</param>
            <param name="recursive"><see langword="true"/> deletes empty subdirectories from this directory and its subdirectories.</param>
            <param name="ignoreReadOnly"><see langword="true"/> overrides read only <see cref="T:System.IO.FileAttributes"/> of empty directories.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.DeleteEmptySubdirectoriesTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Boolean,System.Boolean,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Deletes empty subdirectories from the specified directory.</summary>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <param name="transaction">The transaction.</param>
            <param name="path">The name of the directory to remove empty subdirectories from.</param>
            <param name="recursive"><see langword="true"/> deletes empty subdirectories from this directory and its subdirectories.</param>
            <param name="ignoreReadOnly"><see langword="true"/> overrides read only <see cref="T:System.IO.FileAttributes"/> of empty directories.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.DeleteEmptySubdirectoriesCore(Alphaleonis.Win32.Filesystem.FileSystemEntryInfo,Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Boolean,System.Boolean,System.Boolean,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>Delete empty subdirectories from the specified directory.</summary>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="fileSystemEntryInfo">A FileSystemEntryInfo instance. Use either <paramref name="fileSystemEntryInfo"/> or <paramref name="path"/>, not both.</param>
            <param name="transaction">The transaction.</param>
            <param name="path">The name of the directory to remove empty subdirectories from. Use either <paramref name="path"/> or <paramref name="fileSystemEntryInfo"/>, not both.</param>
            <param name="recursive"><see langword="true"/> deletes empty subdirectories from this directory and its subdirectories.</param>
            <param name="ignoreReadOnly"><see langword="true"/> overrides read only <see cref="T:System.IO.FileAttributes"/> of empty directories.</param>
            <param name="initialize">When <see langword="true"/> indicates the method is called externally.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Delete(System.String)">
            <summary>Deletes an empty directory from a specified path.</summary>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <exception cref="T:Alphaleonis.Win32.Filesystem.DirectoryReadOnlyException"/>
            <param name="path">The name of the empty directory to remove. This directory must be writable and empty.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Delete(System.String,System.Boolean)">
            <summary>Deletes the specified directory and, if indicated, any subdirectories in the directory.</summary>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <exception cref="T:Alphaleonis.Win32.Filesystem.DirectoryReadOnlyException"/>
            <param name="path">The name of the directory to remove.</param>
            <param name="recursive"><see langword="true"/> to remove directories, subdirectories, and files in <paramref name="path"/>. <see langword="false"/> otherwise.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Delete(System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Deletes an empty directory from a specified path.</summary>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <exception cref="T:Alphaleonis.Win32.Filesystem.DirectoryReadOnlyException"/>
            <param name="path">The name of the empty directory to remove. This directory must be writable and empty.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Delete(System.String,System.Boolean,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Deletes the specified directory and, if indicated, any subdirectories in the directory.</summary>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <exception cref="T:Alphaleonis.Win32.Filesystem.DirectoryReadOnlyException"/>
            <param name="path">The name of the directory to remove.</param>
            <param name="recursive"><see langword="true"/> to remove directories, subdirectories, and files in <paramref name="path"/>. <see langword="false"/> otherwise.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Delete(System.String,System.Boolean,System.Boolean)">
            <summary>[AlphaFS] Deletes the specified directory and, if indicated, any subdirectories in the directory.</summary>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <exception cref="T:Alphaleonis.Win32.Filesystem.DirectoryReadOnlyException"/>
            <param name="path">The name of the directory to remove.</param>
            <param name="recursive"><see langword="true"/> to remove directories, subdirectories, and files in <paramref name="path"/>. <see langword="false"/> otherwise.</param>
            <param name="ignoreReadOnly"><see langword="true"/> overrides read only <see cref="T:System.IO.FileAttributes"/> of files and directories.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Delete(System.String,System.Boolean,System.Boolean,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Deletes the specified directory and, if indicated, any subdirectories in the directory.</summary>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <exception cref="T:Alphaleonis.Win32.Filesystem.DirectoryReadOnlyException"/>
            <param name="path">The name of the directory to remove.</param>
            <param name="recursive"><see langword="true"/> to remove directories, subdirectories, and files in <paramref name="path"/>. <see langword="false"/> otherwise.</param>
            <param name="ignoreReadOnly"><see langword="true"/> overrides read only <see cref="T:System.IO.FileAttributes"/> of files and directories.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.DeleteTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>[AlphaFS] Deletes an empty directory from a specified path.</summary>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <exception cref="T:Alphaleonis.Win32.Filesystem.DirectoryReadOnlyException"/>
            <param name="transaction">The transaction.</param>
            <param name="path">The name of the empty directory to remove. This directory must be writable and empty.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.DeleteTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Deletes an empty directory from a specified path.</summary>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <exception cref="T:Alphaleonis.Win32.Filesystem.DirectoryReadOnlyException"/>
            <param name="transaction">The transaction.</param>
            <param name="path">The name of the empty directory to remove. This directory must be writable and empty.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.DeleteTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Boolean)">
            <summary>[AlphaFS] Deletes the specified directory and, if indicated, any subdirectories in the directory.</summary>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <exception cref="T:Alphaleonis.Win32.Filesystem.DirectoryReadOnlyException"/>
            <param name="transaction">The transaction.</param>
            <param name="path">The name of the directory to remove.</param>
            <param name="recursive"><see langword="true"/> to remove directories, subdirectories, and files in <paramref name="path"/>. <see langword="false"/> otherwise.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.DeleteTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Boolean,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Deletes the specified directory and, if indicated, any subdirectories in the directory.</summary>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <exception cref="T:Alphaleonis.Win32.Filesystem.DirectoryReadOnlyException"/>
            <param name="transaction">The transaction.</param>
            <param name="path">The name of the directory to remove.</param>
            <param name="recursive"><see langword="true"/> to remove directories, subdirectories, and files in <paramref name="path"/>. <see langword="false"/> otherwise.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.DeleteTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Boolean,System.Boolean)">
            <summary>[AlphaFS] Deletes the specified directory and, if indicated, any subdirectories in the directory.</summary>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <exception cref="T:Alphaleonis.Win32.Filesystem.DirectoryReadOnlyException"/>
            <param name="transaction">The transaction.</param>
            <param name="path">The name of the directory to remove.</param>
            <param name="recursive"><see langword="true"/> to remove directories, subdirectories, and files in <paramref name="path"/>. <see langword="false"/> otherwise.</param>
            <param name="ignoreReadOnly"><see langword="true"/> overrides read only <see cref="T:System.IO.FileAttributes"/> of files and directories.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.DeleteTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Boolean,System.Boolean,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Deletes the specified directory and, if indicated, any subdirectories in the directory.</summary>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <exception cref="T:Alphaleonis.Win32.Filesystem.DirectoryReadOnlyException"/>
            <param name="transaction">The transaction.</param>
            <param name="path">The name of the directory to remove.</param>
            <param name="recursive"><see langword="true"/> to remove directories, subdirectories, and files in <paramref name="path"/>. <see langword="false"/> otherwise.</param>
            <param name="ignoreReadOnly"><see langword="true"/> overrides read only <see cref="T:System.IO.FileAttributes"/> of files and directories.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.DeleteDirectoryCore(Alphaleonis.Win32.Filesystem.FileSystemEntryInfo,Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Boolean,System.Boolean,System.Boolean,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>Deletes the specified directory and, if indicated, any subdirectories in the directory.</summary>
            <remarks>The RemoveDirectory function marks a directory for deletion on close. Therefore, the directory is not removed until the last handle to the directory is closed.</remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <exception cref="T:Alphaleonis.Win32.Filesystem.DirectoryReadOnlyException"/>
            <param name="fileSystemEntryInfo">A FileSystemEntryInfo instance. Use either <paramref name="fileSystemEntryInfo"/> or <paramref name="path"/>, not both.</param>
            <param name="transaction">The transaction.</param>
            <param name="path">The name of the directory to remove. Use either <paramref name="path"/> or <paramref name="fileSystemEntryInfo"/>, not both.</param>
            <param name="recursive"><see langword="true"/> to remove all files and subdirectories recursively; <see langword="false"/> otherwise only the top level empty directory.</param>
            <param name="ignoreReadOnly"><see langword="true"/> overrides read only attribute of files and directories.</param>
            <param name="continueOnNotExist"><see langword="true"/> does not throw an Exception when the file system object does not exist.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.CreateDirectory(System.String)">
            <summary>Creates all directories and subdirectories in the specified path unless they already exist.</summary>
            <returns>An object that represents the directory at the specified path. This object is returned regardless of whether a directory at the specified path already exists.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="path">The directory to create.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.CreateDirectory(System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Creates all the directories in the specified path, applying the specified Windows security.</summary>
            <returns>An object that represents the directory at the specified path. This object is returned regardless of whether a directory at the specified path already exists.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="path">The directory to create.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.CreateDirectory(System.String,System.Boolean)">
            <summary>[AlphaFS] Creates all the directories in the specified path, applying the specified Windows security.</summary>
            <returns>An object that represents the directory at the specified path. This object is returned regardless of whether a directory at the specified path already exists.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="path">The directory to create.</param>
            <param name="compress">When <see langword="true"/> compresses the directory.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.CreateDirectory(System.String,System.Boolean,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Creates all the directories in the specified path, applying the specified Windows security.</summary>
            <returns>An object that represents the directory at the specified path. This object is returned regardless of whether a directory at the specified path already exists.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="path">The directory to create.</param>
            <param name="compress">When <see langword="true"/> compresses the directory.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.CreateDirectory(System.String,System.Security.AccessControl.DirectorySecurity)">
            <summary>Creates all the directories in the specified path, unless the already exist, applying the specified Windows security.</summary>
            <returns>An object that represents the directory at the specified path. This object is returned regardless of whether a directory at the specified path already exists.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="path">The directory to create.</param>
            <param name="directorySecurity">The access control to apply to the directory.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.CreateDirectory(System.String,System.Security.AccessControl.DirectorySecurity,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Creates all the directories in the specified path, applying the specified Windows security.</summary>
            <returns>An object that represents the directory at the specified path. This object is returned regardless of whether a directory at the specified path already exists.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="path">The directory to create.</param>
            <param name="directorySecurity">The access control to apply to the directory.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.CreateDirectory(System.String,System.Security.AccessControl.DirectorySecurity,System.Boolean)">
            <summary>[AlphaFS] Creates all the directories in the specified path, applying the specified Windows security.</summary>
            <returns>An object that represents the directory at the specified path. This object is returned regardless of whether a directory at the specified path already exists.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="path">The directory to create.</param>
            <param name="directorySecurity">The access control to apply to the directory.</param>
            <param name="compress">When <see langword="true"/> compresses the directory.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.CreateDirectory(System.String,System.Security.AccessControl.DirectorySecurity,System.Boolean,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Creates all the directories in the specified path, applying the specified Windows security.</summary>
            <returns>An object that represents the directory at the specified path. This object is returned regardless of whether a directory at the specified path already exists.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="path">The directory to create.</param>
            <param name="directorySecurity">The access control to apply to the directory.</param>
            <param name="compress">When <see langword="true"/> compresses the directory.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.CreateDirectory(System.String,System.String)">
            <summary>[AlphaFS] Creates a new directory, with the attributes of a specified template directory.</summary>
            <returns>An object that represents the directory at the specified path. This object is returned regardless of whether a directory at the specified path already exists.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="path">The directory to create.</param>
            <param name="templatePath">The path of the directory to use as a template when creating the new directory.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.CreateDirectory(System.String,System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Creates a new directory, with the attributes of a specified template directory.</summary>
            <returns>An object that represents the directory at the specified path. This object is returned regardless of whether a directory at the specified path already exists.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="path">The directory to create.</param>
            <param name="templatePath">The path of the directory to use as a template when creating the new directory.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.CreateDirectory(System.String,System.String,System.Boolean)">
            <summary>[AlphaFS] Creates a new directory, with the attributes of a specified template directory.</summary>
            <returns>An object that represents the directory at the specified path. This object is returned regardless of whether a directory at the specified path already exists.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="path">The directory to create.</param>
            <param name="templatePath">The path of the directory to use as a template when creating the new directory.</param>
            <param name="compress">When <see langword="true"/> compresses the directory.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.CreateDirectory(System.String,System.String,System.Boolean,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Creates a new directory, with the attributes of a specified template directory.</summary>
            <returns>An object that represents the directory at the specified path. This object is returned regardless of whether a directory at the specified path already exists.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="path">The directory to create.</param>
            <param name="templatePath">The path of the directory to use as a template when creating the new directory.</param>
            <param name="compress">When <see langword="true"/> compresses the directory.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.CreateDirectory(System.String,System.String,System.Security.AccessControl.DirectorySecurity)">
            <summary>[AlphaFS] Creates all the directories in the specified path of a specified template directory and applies the specified Windows security.</summary>
            <returns>An object that represents the directory at the specified path. This object is returned regardless of whether a directory at the specified path already exists.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="path">The directory to create.</param>
            <param name="templatePath">The path of the directory to use as a template when creating the new directory.</param>
            <param name="directorySecurity">The access control to apply to the directory.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.CreateDirectory(System.String,System.String,System.Security.AccessControl.DirectorySecurity,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Creates all the directories in the specified path of a specified template directory and applies the specified Windows security.</summary>
            <returns>An object that represents the directory at the specified path. This object is returned regardless of whether a directory at the specified path already exists.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="path">The directory to create.</param>
            <param name="templatePath">The path of the directory to use as a template when creating the new directory.</param>
            <param name="directorySecurity">The access control to apply to the directory.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.CreateDirectory(System.String,System.String,System.Security.AccessControl.DirectorySecurity,System.Boolean)">
            <summary>[AlphaFS] Creates all the directories in the specified path of a specified template directory and applies the specified Windows security.</summary>
            <returns>An object that represents the directory at the specified path. This object is returned regardless of whether a directory at the specified path already exists.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="path">The directory to create.</param>
            <param name="templatePath">The path of the directory to use as a template when creating the new directory.</param>
            <param name="directorySecurity">The access control to apply to the directory.</param>
            <param name="compress">When <see langword="true"/> compresses the directory.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.CreateDirectory(System.String,System.String,System.Security.AccessControl.DirectorySecurity,System.Boolean,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Creates all the directories in the specified path of a specified template directory and applies the specified Windows security.</summary>
            <returns>An object that represents the directory at the specified path. This object is returned regardless of whether a directory at the specified path already exists.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="path">The directory to create.</param>
            <param name="templatePath">The path of the directory to use as a template when creating the new directory.</param>
            <param name="directorySecurity">The access control to apply to the directory.</param>
            <param name="compress">When <see langword="true"/> compresses the directory.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.CreateDirectoryTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>Creates all directories and subdirectories in the specified path unless they already exist.</summary>
            <returns>An object that represents the directory at the specified path. This object is returned regardless of whether a directory at the specified path already exists.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory to create.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.CreateDirectoryTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Creates all the directories in the specified path, applying the specified Windows security.</summary>
            <returns>An object that represents the directory at the specified path. This object is returned regardless of whether a directory at the specified path already exists.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory to create.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.CreateDirectoryTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Boolean)">
            <summary>[AlphaFS] Creates all the directories in the specified path, applying the specified Windows security.</summary>
            <returns>An object that represents the directory at the specified path. This object is returned regardless of whether a directory at the specified path already exists.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory to create.</param>
            <param name="compress">When <see langword="true"/> compresses the directory.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.CreateDirectoryTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Boolean,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Creates all the directories in the specified path, applying the specified Windows security.</summary>
            <returns>An object that represents the directory at the specified path. This object is returned regardless of whether a directory at the specified path already exists.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory to create.</param>
            <param name="compress">When <see langword="true"/> compresses the directory.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.CreateDirectoryTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Security.AccessControl.DirectorySecurity)">
            <summary>Creates all the directories in the specified path, unless the already exist, applying the specified Windows security.</summary>
            <returns>An object that represents the directory at the specified path. This object is returned regardless of whether a directory at the specified path already exists.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory to create.</param>
            <param name="directorySecurity">The access control to apply to the directory.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.CreateDirectoryTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Security.AccessControl.DirectorySecurity,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Creates all the directories in the specified path, applying the specified Windows security.</summary>
            <returns>An object that represents the directory at the specified path. This object is returned regardless of whether a directory at the specified path already exists.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory to create.</param>
            <param name="directorySecurity">The access control to apply to the directory.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.CreateDirectoryTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Security.AccessControl.DirectorySecurity,System.Boolean)">
            <summary>[AlphaFS] Creates all the directories in the specified path, applying the specified Windows security.</summary>
            <returns>An object that represents the directory at the specified path. This object is returned regardless of whether a directory at the specified path already exists.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory to create.</param>
            <param name="directorySecurity">The access control to apply to the directory.</param>
            <param name="compress">When <see langword="true"/> compresses the directory.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.CreateDirectoryTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Security.AccessControl.DirectorySecurity,System.Boolean,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Creates all the directories in the specified path, applying the specified Windows security.</summary>
            <returns>An object that represents the directory at the specified path. This object is returned regardless of whether a directory at the specified path already exists.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory to create.</param>
            <param name="directorySecurity">The access control to apply to the directory.</param>
            <param name="compress">When <see langword="true"/> compresses the directory.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.CreateDirectoryTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String)">
            <summary>[AlphaFS] Creates a new directory, with the attributes of a specified template directory.</summary>
            <returns>An object that represents the directory at the specified path. This object is returned regardless of whether a directory at the specified path already exists.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory to create.</param>
            <param name="templatePath">The path of the directory to use as a template when creating the new directory.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.CreateDirectoryTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Creates a new directory, with the attributes of a specified template directory.</summary>
            <returns>An object that represents the directory at the specified path. This object is returned regardless of whether a directory at the specified path already exists.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory to create.</param>
            <param name="templatePath">The path of the directory to use as a template when creating the new directory.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.CreateDirectoryTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,System.Boolean)">
            <summary>[AlphaFS] Creates a new directory, with the attributes of a specified template directory.</summary>
            <returns>An object that represents the directory at the specified path. This object is returned regardless of whether a directory at the specified path already exists.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory to create.</param>
            <param name="templatePath">The path of the directory to use as a template when creating the new directory.</param>
            <param name="compress">When <see langword="true"/> compresses the directory.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.CreateDirectoryTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,System.Boolean,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Creates a new directory, with the attributes of a specified template directory.</summary>
            <returns>An object that represents the directory at the specified path. This object is returned regardless of whether a directory at the specified path already exists.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory to create.</param>
            <param name="templatePath">The path of the directory to use as a template when creating the new directory.</param>
            <param name="compress">When <see langword="true"/> compresses the directory.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.CreateDirectoryTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,System.Security.AccessControl.DirectorySecurity)">
            <summary>[AlphaFS] Creates all the directories in the specified path of a specified template directory and applies the specified Windows security.</summary>
            <returns>An object that represents the directory at the specified path. This object is returned regardless of whether a directory at the specified path already exists.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory to create.</param>
            <param name="templatePath">The path of the directory to use as a template when creating the new directory.</param>
            <param name="directorySecurity">The access control to apply to the directory.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.CreateDirectoryTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,System.Security.AccessControl.DirectorySecurity,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Creates all the directories in the specified path of a specified template directory and applies the specified Windows security.</summary>
            <returns>An object that represents the directory at the specified path. This object is returned regardless of whether a directory at the specified path already exists.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory to create.</param>
            <param name="templatePath">The path of the directory to use as a template when creating the new directory.</param>
            <param name="directorySecurity">The access control to apply to the directory.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.CreateDirectoryTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,System.Security.AccessControl.DirectorySecurity,System.Boolean)">
            <summary>[AlphaFS] Creates all the directories in the specified path of a specified template directory and applies the specified Windows security.</summary>
            <returns>An object that represents the directory at the specified path. This object is returned regardless of whether a directory at the specified path already exists.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory to create.</param>
            <param name="templatePath">The path of the directory to use as a template when creating the new directory.</param>
            <param name="directorySecurity">The access control to apply to the directory.</param>
            <param name="compress">When <see langword="true"/> compresses the directory.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.CreateDirectoryTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,System.Security.AccessControl.DirectorySecurity,System.Boolean,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Creates all the directories in the specified path of a specified template directory and applies the specified Windows security.</summary>
            <returns>An object that represents the directory at the specified path. This object is returned regardless of whether a directory at the specified path already exists.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory to create.</param>
            <param name="templatePath">The path of the directory to use as a template when creating the new directory.</param>
            <param name="directorySecurity">The access control to apply to the directory.</param>
            <param name="compress">When <see langword="true"/> compresses the directory.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.CreateDirectoryCore(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,System.Security.AccessControl.ObjectSecurity,System.Boolean,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>Creates a new directory with the attributes of a specified template directory (if one is specified). 
              If the underlying file system supports security on files and directories, the function applies the specified security descriptor to the new directory.
              The new directory retains the other attributes of the specified template directory.
            </summary>
            <returns>
              <para>Returns an object that represents the directory at the specified path.</para>
              <para>This object is returned regardless of whether a directory at the specified path already exists.</para>
            </returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory to create.</param>
            <param name="templatePath">The path of the directory to use as a template when creating the new directory. May be <see langword="null"/> to indicate that no template should be used.</param>
            <param name="directorySecurity">The <see cref="T:System.Security.AccessControl.DirectorySecurity"/> access control to apply to the directory, may be null.</param>
            <param name="compress">When <see langword="true"/> compresses the directory.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateDirectories(System.String)">
            <summary>Returns an enumerable collection of directory names in a specified <paramref name="path"/>.</summary>
            <returns>An enumerable collection of the full names (including paths) for the directories in the directory specified by <paramref name="path"/>.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="path">The directory to search.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateDirectories(System.String,System.String)">
            <summary>Returns an enumerable collection of directory names that match a <paramref name="searchPattern"/> in a specified <paramref name="path"/>.</summary>
            <returns>An enumerable collection of the full names (including paths) for the directories in the directory specified by <paramref name="path"/> and that match the specified <paramref name="searchPattern"/>.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">
              The search string to match against the names of directories in <paramref name="path"/>.
              This parameter can contain a combination of valid literal path and wildcard
              (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/> and <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>) characters, but does not support regular expressions.
            </param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateDirectories(System.String,System.String,System.IO.SearchOption)">
            <summary>Returns an enumerable collection of directory names that match a <paramref name="searchPattern"/> in a specified <paramref name="path"/>, and optionally searches subdirectories.</summary>
            <returns>An enumerable collection of the full names (including paths) for the directories in the directory specified by <paramref name="path"/> and that match the specified <paramref name="searchPattern"/> and <paramref name="searchOption"/>.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">
              The search string to match against the names of directories in <paramref name="path"/>.
              This parameter can contain a combination of valid literal path and wildcard
              (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/> and <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>) characters, but does not support regular expressions.
            </param>
            <param name="searchOption">
              One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the <paramref name="searchOption"/>
              should include only the current directory or should include all subdirectories.
            </param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateDirectories(System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Returns an enumerable collection of directory names in a specified <paramref name="path"/>.</summary>
            <returns>An enumerable collection of the full names (including paths) for the directories in the directory specified by <paramref name="path"/>.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="path">The directory to search.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateDirectories(System.String,System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Returns an enumerable collection of directory names that match a <paramref name="searchPattern"/> in a specified <paramref name="path"/>.</summary>
            <returns>An enumerable collection of the full names (including paths) for the directories in the directory specified by <paramref name="path"/> and that match the specified <paramref name="searchPattern"/>.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">
              The search string to match against the names of directories in <paramref name="path"/>.
              This parameter can contain a combination of valid literal path and wildcard
              (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/> and <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>) characters, but does not support regular expressions.
            </param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateDirectories(System.String,System.String,System.IO.SearchOption,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Returns an enumerable collection of directory names that match a <paramref name="searchPattern"/> in a specified <paramref name="path"/>, and optionally searches subdirectories.</summary>
            <returns>An enumerable collection of the full names (including paths) for the directories in the directory specified by <paramref name="path"/> and that match the specified <paramref name="searchPattern"/> and <paramref name="searchOption"/>.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">
              The search string to match against the names of directories in <paramref name="path"/>.
              This parameter can contain a combination of valid literal path and wildcard
              (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/> and <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>) characters, but does not support regular expressions.
            </param>
            <param name="searchOption">
              One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the <paramref name="searchOption"/>
              should include only the current directory or should include all subdirectories.
            </param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateDirectories(System.String,Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions)">
            <summary>[AlphaFS] Returns an enumerable collection of directory names in a specified <paramref name="path"/>.</summary>
            <returns>An enumerable collection of the full names (including paths) for the directories in the directory specified by <paramref name="path"/>.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="path">The directory to search.</param>
            <param name="options"><see cref="T:Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions"/> flags that specify how the directory is to be enumerated.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateDirectories(System.String,Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Returns an enumerable collection of directory names in a specified <paramref name="path"/>.</summary>
            <returns>An enumerable collection of the full names (including paths) for the directories in the directory specified by <paramref name="path"/>.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="path">The directory to search.</param>
            <param name="options"><see cref="T:Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions"/> flags that specify how the directory is to be enumerated.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateDirectories(System.String,System.String,Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions)">
            <summary>[AlphaFS] Returns an enumerable collection of directory names in a specified <paramref name="path"/>.</summary>
            <returns>An enumerable collection of the full names (including paths) for the directories in the directory specified by <paramref name="path"/>.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">
              The search string to match against the names of directories in <paramref name="path"/>.
              This parameter can contain a combination of valid literal path and wildcard
              (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/> and <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>) characters, but does not support regular expressions.
            </param>
            <param name="options"><see cref="T:Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions"/> flags that specify how the directory is to be enumerated.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateDirectories(System.String,System.String,Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Returns an enumerable collection of directory names in a specified <paramref name="path"/>.</summary>
            <returns>An enumerable collection of the full names (including paths) for the directories in the directory specified by <paramref name="path"/>.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">
              The search string to match against the names of directories in <paramref name="path"/>.
              This parameter can contain a combination of valid literal path and wildcard
              (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/> and <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>) characters, but does not support regular expressions.
            </param>
            <param name="options"><see cref="T:Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions"/> flags that specify how the directory is to be enumerated.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateDirectoriesTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>[AlphaFS] Returns an enumerable collection of directory instances in a specified <paramref name="path"/>.</summary>
            <returns>An enumerable collection of the full names (including paths) for the directories in the directory specified by <paramref name="path"/>.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory to search.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateDirectoriesTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String)">
            <summary>[AlphaFS] Returns an enumerable collection of directory instances that match a <paramref name="searchPattern"/> in a specified <paramref name="path"/>.</summary>
            <returns>An enumerable collection of the full names (including paths) for the directories in the directory specified by <paramref name="path"/> and that match the specified <paramref name="searchPattern"/>.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">
              The search string to match against the names of directories in <paramref name="path"/>.
              This parameter can contain a combination of valid literal path and wildcard
              (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/> and <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>) characters, but does not support regular expressions.
            </param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateDirectoriesTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,System.IO.SearchOption)">
            <summary>[AlphaFS] Returns an enumerable collection of directory names that match a <paramref name="searchPattern"/> in a specified <paramref name="path"/>, and optionally searches subdirectories.</summary>
            <returns>An enumerable collection of the full names (including paths) for the directories in the directory specified by <paramref name="path"/> and that match the specified <paramref name="searchPattern"/> and <paramref name="searchOption"/>.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">
              The search string to match against the names of directories in <paramref name="path"/>.
              This parameter can contain a combination of valid literal path and wildcard
              (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/> and <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>) characters, but does not support regular expressions.
            </param>
            <param name="searchOption">
              One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the <paramref name="searchOption"/>
              should include only the current directory or should include all subdirectories.
            </param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateDirectoriesTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Returns an enumerable collection of directory instances in a specified <paramref name="path"/>.</summary>
            <returns>An enumerable collection of the full names (including paths) for the directories in the directory specified by <paramref name="path"/>.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory to search.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateDirectoriesTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Returns an enumerable collection of directory instances that match a <paramref name="searchPattern"/> in a specified <paramref name="path"/>.</summary>
            <returns>An enumerable collection of the full names (including paths) for the directories in the directory specified by <paramref name="path"/> and that match the specified <paramref name="searchPattern"/>.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">
              The search string to match against the names of directories in <paramref name="path"/>.
              This parameter can contain a combination of valid literal path and wildcard
              (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/> and <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>) characters, but does not support regular expressions.
            </param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateDirectoriesTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,System.IO.SearchOption,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Returns an enumerable collection of directory names that match a <paramref name="searchPattern"/> in a specified <paramref name="path"/>, and optionally searches subdirectories.</summary>
            <returns>An enumerable collection of the full names (including paths) for the directories in the directory specified by <paramref name="path"/> and that match the specified <paramref name="searchPattern"/> and <paramref name="searchOption"/>.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">
              The search string to match against the names of directories in <paramref name="path"/>.
              This parameter can contain a combination of valid literal path and wildcard
              (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/> and <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>) characters, but does not support regular expressions.
            </param>
            <param name="searchOption">
              One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the <paramref name="searchOption"/>
              should include only the current directory or should include all subdirectories.
            </param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateDirectoriesTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions)">
            <summary>[AlphaFS] Returns an enumerable collection of directory instances in a specified <paramref name="path"/>.</summary>
            <returns>An enumerable collection of the full names (including paths) for the directories in the directory specified by <paramref name="path"/>.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory to search.</param>
            <param name="options"><see cref="T:Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions"/> flags that specify how the directory is to be enumerated.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateDirectoriesTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Returns an enumerable collection of directory instances in a specified <paramref name="path"/>.</summary>
            <returns>An enumerable collection of the full names (including paths) for the directories in the directory specified by <paramref name="path"/>.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory to search.</param>
            <param name="options"><see cref="T:Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions"/> flags that specify how the directory is to be enumerated.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateDirectoriesTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions)">
            <summary>[AlphaFS] Returns an enumerable collection of directory instances that match a <paramref name="searchPattern"/> in a specified <paramref name="path"/>.</summary>
            <returns>An enumerable collection of the full names (including paths) for the directories in the directory specified by <paramref name="path"/> and that match the specified <paramref name="searchPattern"/>.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">
              The search string to match against the names of directories in <paramref name="path"/>.
              This parameter can contain a combination of valid literal path and wildcard
              (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/> and <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>) characters, but does not support regular expressions.
            </param>
            <param name="options"><see cref="T:Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions"/> flags that specify how the directory is to be enumerated.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateDirectoriesTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Returns an enumerable collection of directory instances that match a <paramref name="searchPattern"/> in a specified <paramref name="path"/>.</summary>
            <returns>An enumerable collection of the full names (including paths) for the directories in the directory specified by <paramref name="path"/> and that match the specified <paramref name="searchPattern"/>.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">
              The search string to match against the names of directories in <paramref name="path"/>.
              This parameter can contain a combination of valid literal path and wildcard
              (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/> and <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>) characters, but does not support regular expressions.
            </param>
            <param name="options"><see cref="T:Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions"/> flags that specify how the directory is to be enumerated.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateFiles(System.String)">
            <summary>Returns an enumerable collection of file names in a specified <paramref name="path"/>.</summary>
            <returns>An enumerable collection of the full names (including paths) for the files in the directory specified by <paramref name="path"/>.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="path">The directory to search.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateFiles(System.String,System.String)">
            <summary>Returns an enumerable collection of file names in a specified <paramref name="path"/>.</summary>
            <returns>An enumerable collection of the full names (including paths) for the files in the directory specified by <paramref name="path"/> and that match the <paramref name="searchPattern"/>.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">
              The search string to match against the names of directories in <paramref name="path"/>.
              This parameter can contain a combination of valid literal path and wildcard
              (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/> and <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>) characters, but does not support regular expressions.
            </param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateFiles(System.String,System.String,System.IO.SearchOption)">
            <summary>Returns an enumerable collection of file names that match a <paramref name="searchPattern"/> in a specified <paramref name="path"/>, and optionally searches subdirectories.</summary>
            <returns>An enumerable collection of the full names (including paths) for the files in the directory specified by <paramref name="path"/> and that match the specified <paramref name="searchPattern"/> and <paramref name="searchOption"/>.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">
              The search string to match against the names of directories in <paramref name="path"/>.
              This parameter can contain a combination of valid literal path and wildcard
              (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/> and <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>) characters, but does not support regular expressions.
            </param>
            <param name="searchOption">
              One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the <paramref name="searchOption"/>
              should include only the current directory or should include all subdirectories.
            </param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateFiles(System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Returns an enumerable collection of file names in a specified <paramref name="path"/>.</summary>
            <returns>An enumerable collection of the full names (including paths) for the files in the directory specified by <paramref name="path"/>.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="path">The directory to search.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateFiles(System.String,System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Returns an enumerable collection of file names in a specified <paramref name="path"/>.</summary>
            <returns>An enumerable collection of the full names (including paths) for the files in the directory specified by <paramref name="path"/> and that match the <paramref name="searchPattern"/>.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">
              The search string to match against the names of directories in <paramref name="path"/>.
              This parameter can contain a combination of valid literal path and wildcard
              (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/> and <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>) characters, but does not support regular expressions.
            </param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateFiles(System.String,System.String,System.IO.SearchOption,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Returns an enumerable collection of file names that match a <paramref name="searchPattern"/> in a specified <paramref name="path"/>, and optionally searches subdirectories.</summary>
            <returns>An enumerable collection of the full names (including paths) for the files in the directory specified by <paramref name="path"/> and that match the specified <paramref name="searchPattern"/> and <paramref name="searchOption"/>.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">
              The search string to match against the names of directories in <paramref name="path"/>.
              This parameter can contain a combination of valid literal path and wildcard
              (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/> and <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>) characters, but does not support regular expressions.
            </param>
            <param name="searchOption">
              One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the <paramref name="searchOption"/>
              should include only the current directory or should include all subdirectories.
            </param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateFiles(System.String,Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions)">
            <summary>[AlphaFS] Returns an enumerable collection of file names in a specified <paramref name="path"/>.</summary>
            <returns>An enumerable collection of the full names (including paths) for the files in the directory specified by <paramref name="path"/>.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="path">The directory to search.</param>
            <param name="options"><see cref="T:Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions"/> flags that specify how the directory is to be enumerated.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateFiles(System.String,Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Returns an enumerable collection of file names in a specified <paramref name="path"/>.</summary>
            <returns>An enumerable collection of the full names (including paths) for the files in the directory specified by <paramref name="path"/>.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="path">The directory to search.</param>
            <param name="options"><see cref="T:Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions"/> flags that specify how the directory is to be enumerated.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateFiles(System.String,System.String,Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions)">
            <summary>[AlphaFS] Returns an enumerable collection of file names in a specified <paramref name="path"/>.</summary>
            <returns>An enumerable collection of the full names (including paths) for the files in the directory specified by <paramref name="path"/> and that match the <paramref name="searchPattern"/>.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">
              The search string to match against the names of directories in <paramref name="path"/>.
              This parameter can contain a combination of valid literal path and wildcard
              (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/> and <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>) characters, but does not support regular expressions.
            </param>
            <param name="options"><see cref="T:Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions"/> flags that specify how the directory is to be enumerated.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateFiles(System.String,System.String,Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Returns an enumerable collection of file names in a specified <paramref name="path"/>.</summary>
            <returns>An enumerable collection of the full names (including paths) for the files in the directory specified by <paramref name="path"/> and that match the <paramref name="searchPattern"/>.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">
              The search string to match against the names of directories in <paramref name="path"/>.
              This parameter can contain a combination of valid literal path and wildcard
              (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/> and <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>) characters, but does not support regular expressions.
            </param>
            <param name="options"><see cref="T:Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions"/> flags that specify how the directory is to be enumerated.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateFilesTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>[AlphaFS] Returns an enumerable collection of file names in a specified <paramref name="path"/>.</summary>
            <returns>An enumerable collection of the full names (including paths) for the files in the directory specified by <paramref name="path"/>.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory to search.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateFilesTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String)">
            <summary>[AlphaFS] Returns an enumerable collection of file instances that match a <paramref name="searchPattern"/> in a specified <paramref name="path"/>.</summary>
            <returns>An enumerable collection of the full names (including paths) for the files in the directory specified by <paramref name="path"/> and that match the <paramref name="searchPattern"/>.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">
              The search string to match against the names of directories in <paramref name="path"/>.
              This parameter can contain a combination of valid literal path and wildcard
              (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/> and <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>) characters, but does not support regular expressions.
            </param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateFilesTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,System.IO.SearchOption)">
            <summary>[AlphaFS] Returns an enumerable collection of file instances instances that match a <paramref name="searchPattern"/> in a specified <paramref name="path"/>, and optionally searches subdirectories.</summary>
            <returns>An enumerable collection of the full names (including paths) for the files in the directory specified by <paramref name="path"/> and that match the specified <paramref name="searchPattern"/> and <paramref name="searchOption"/>.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">
              The search string to match against the names of directories in <paramref name="path"/>.
              This parameter can contain a combination of valid literal path and wildcard
              (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/> and <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>) characters, but does not support regular expressions.
            </param>
            <param name="searchOption">
              One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the <paramref name="searchOption"/>
              should include only the current directory or should include all subdirectories.
            </param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateFilesTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Returns an enumerable collection of file names in a specified <paramref name="path"/>.</summary>
            <returns>An enumerable collection of the full names (including paths) for the files in the directory specified by <paramref name="path"/>.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory to search.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateFilesTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Returns an enumerable collection of file instances that match a <paramref name="searchPattern"/> in a specified <paramref name="path"/>.</summary>
            <returns>An enumerable collection of the full names (including paths) for the files in the directory specified by <paramref name="path"/> and that match the <paramref name="searchPattern"/>.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">
              The search string to match against the names of directories in <paramref name="path"/>.
              This parameter can contain a combination of valid literal path and wildcard
              (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/> and <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>) characters, but does not support regular expressions.
            </param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateFilesTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,System.IO.SearchOption,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Returns an enumerable collection of file instances instances that match a <paramref name="searchPattern"/> in a specified <paramref name="path"/>, and optionally searches subdirectories.</summary>
            <returns>An enumerable collection of the full names (including paths) for the files in the directory specified by <paramref name="path"/> and that match the specified <paramref name="searchPattern"/> and <paramref name="searchOption"/>.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">
              The search string to match against the names of directories in <paramref name="path"/>.
              This parameter can contain a combination of valid literal path and wildcard
              (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/> and <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>) characters, but does not support regular expressions.
            </param>
            <param name="searchOption">
              One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the <paramref name="searchOption"/>
              should include only the current directory or should include all subdirectories.
            </param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateFilesTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions)">
            <summary>[AlphaFS] Returns an enumerable collection of file names in a specified <paramref name="path"/>.</summary>
            <returns>An enumerable collection of the full names (including paths) for the files in the directory specified by <paramref name="path"/>.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory to search.</param>
            <param name="options"><see cref="T:Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions"/> flags that specify how the directory is to be enumerated.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateFilesTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Returns an enumerable collection of file names in a specified <paramref name="path"/>.</summary>
            <returns>An enumerable collection of the full names (including paths) for the files in the directory specified by <paramref name="path"/>.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory to search.</param>
            <param name="options"><see cref="T:Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions"/> flags that specify how the directory is to be enumerated.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateFilesTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions)">
            <summary>[AlphaFS] Returns an enumerable collection of file instances that match a <paramref name="searchPattern"/> in a specified <paramref name="path"/>.</summary>
            <returns>An enumerable collection of the full names (including paths) for the files in the directory specified by <paramref name="path"/> and that match the <paramref name="searchPattern"/>.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">
              The search string to match against the names of directories in <paramref name="path"/>.
              This parameter can contain a combination of valid literal path and wildcard
              (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/> and <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>) characters, but does not support regular expressions.
            </param>
            <param name="options"><see cref="T:Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions"/> flags that specify how the directory is to be enumerated.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateFilesTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Returns an enumerable collection of file instances that match a <paramref name="searchPattern"/> in a specified <paramref name="path"/>.</summary>
            <returns>An enumerable collection of the full names (including paths) for the files in the directory specified by <paramref name="path"/> and that match the <paramref name="searchPattern"/>.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">
              The search string to match against the names of directories in <paramref name="path"/>.
              This parameter can contain a combination of valid literal path and wildcard
              (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/> and <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>) characters, but does not support regular expressions.
            </param>
            <param name="options"><see cref="T:Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions"/> flags that specify how the directory is to be enumerated.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateFileSystemEntryInfos``1(System.String)">
            <summary>[AlphaFS] Returns an enumerable collection of file system entries in a specified path.</summary>
            <returns>The matching file system entries. The type of the items is determined by the type <typeparamref name="T"/>.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <typeparam name="T">The type to return. This may be one of the following types:
               <list type="definition">
               <item>
                  <term><see cref="T:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo"/></term>
                  <description>This method will return instances of <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo"/> instances.</description>
               </item>
               <item>
                  <term><see cref="T:Alphaleonis.Win32.Filesystem.FileSystemInfo"/></term>
                  <description>This method will return instances of <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> and <see cref="T:Alphaleonis.Win32.Filesystem.FileInfo"/> instances.</description>
               </item>
               <item>
                  <term><see cref="T:System.String"/></term>
                  <description>This method will return the full path of each item.</description>
               </item>
            </list>
            </typeparam>
            <param name="path">The directory to search.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateFileSystemEntryInfos``1(System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Returns an enumerable collection of file system entries in a specified path.</summary>
            <returns>The matching file system entries. The type of the items is determined by the type <typeparamref name="T"/>.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <typeparam name="T">The type to return. This may be one of the following types:
               <list type="definition">
               <item>
                  <term><see cref="T:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo"/></term>
                  <description>This method will return instances of <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo"/> instances.</description>
               </item>
               <item>
                  <term><see cref="T:Alphaleonis.Win32.Filesystem.FileSystemInfo"/></term>
                  <description>This method will return instances of <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> and <see cref="T:Alphaleonis.Win32.Filesystem.FileInfo"/> instances.</description>
               </item>
               <item>
                  <term><see cref="T:System.String"/></term>
                  <description>This method will return the full path of each item.</description>
               </item>
            </list>
            </typeparam>
            <param name="path">The directory to search.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateFileSystemEntryInfos``1(System.String,Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions)">
            <summary>[AlphaFS] Returns an enumerable collection of file system entries in a specified path.</summary>
            <returns>The matching file system entries. The type of the items is determined by the type <typeparamref name="T"/>.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <typeparam name="T">The type to return. This may be one of the following types:
               <list type="definition">
               <item>
                  <term><see cref="T:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo"/></term>
                  <description>This method will return instances of <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo"/> instances.</description>
               </item>
               <item>
                  <term><see cref="T:Alphaleonis.Win32.Filesystem.FileSystemInfo"/></term>
                  <description>This method will return instances of <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> and <see cref="T:Alphaleonis.Win32.Filesystem.FileInfo"/> instances.</description>
               </item>
               <item>
                  <term><see cref="T:System.String"/></term>
                  <description>This method will return the full path of each item.</description>
               </item>
            </list>
            </typeparam>
            <param name="path">The directory to search.</param>
            <param name="options"><see cref="T:Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions"/> flags that specify how the directory is to be enumerated.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateFileSystemEntryInfos``1(System.String,Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Returns an enumerable collection of file system entries in a specified path.</summary>
            <returns>The matching file system entries. The type of the items is determined by the type <typeparamref name="T"/>.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <typeparam name="T">The type to return. This may be one of the following types:
               <list type="definition">
               <item>
                  <term><see cref="T:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo"/></term>
                  <description>This method will return instances of <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo"/> instances.</description>
               </item>
               <item>
                  <term><see cref="T:Alphaleonis.Win32.Filesystem.FileSystemInfo"/></term>
                  <description>This method will return instances of <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> and <see cref="T:Alphaleonis.Win32.Filesystem.FileInfo"/> instances.</description>
               </item>
               <item>
                  <term><see cref="T:System.String"/></term>
                  <description>This method will return the full path of each item.</description>
               </item>
            </list>
            </typeparam>
            <param name="path">The directory to search.</param>
            <param name="options"><see cref="T:Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions"/> flags that specify how the directory is to be enumerated.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateFileSystemEntryInfos``1(System.String,System.String)">
            <summary>[AlphaFS] Returns an enumerable collection of file system entries that match a <paramref name="searchPattern" /> in a specified path.</summary>
            <returns>The matching file system entries. The type of the items is determined by the type <typeparamref name="T"/>.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <typeparam name="T">The type to return. This may be one of the following types:
               <list type="definition">
               <item>
                  <term><see cref="T:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo"/></term>
                  <description>This method will return instances of <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo"/> instances.</description>
               </item>
               <item>
                  <term><see cref="T:Alphaleonis.Win32.Filesystem.FileSystemInfo"/></term>
                  <description>This method will return instances of <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> and <see cref="T:Alphaleonis.Win32.Filesystem.FileInfo"/> instances.</description>
               </item>
               <item>
                  <term><see cref="T:System.String"/></term>
                  <description>This method will return the full path of each item.</description>
               </item>
            </list>
            </typeparam>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">
              The search string to match against the names of directories in <paramref name="path"/>.
              This parameter can contain a combination of valid literal path and wildcard
              (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/> and <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>) characters, but does not support regular expressions.
            </param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateFileSystemEntryInfos``1(System.String,System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Returns an enumerable collection of file system entries that match a <paramref name="searchPattern"/> in a specified path.</summary>
            <returns>The matching file system entries. The type of the items is determined by the type <typeparamref name="T"/>.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <typeparam name="T">The type to return. This may be one of the following types:
               <list type="definition">
               <item>
                  <term><see cref="T:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo"/></term>
                  <description>This method will return instances of <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo"/> instances.</description>
               </item>
               <item>
                  <term><see cref="T:Alphaleonis.Win32.Filesystem.FileSystemInfo"/></term>
                  <description>This method will return instances of <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> and <see cref="T:Alphaleonis.Win32.Filesystem.FileInfo"/> instances.</description>
               </item>
               <item>
                  <term><see cref="T:System.String"/></term>
                  <description>This method will return the full path of each item.</description>
               </item>
            </list>
            </typeparam>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">
              The search string to match against the names of directories in <paramref name="path"/>.
              This parameter can contain a combination of valid literal path and wildcard
              (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/> and <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>) characters, but does not support regular expressions.
            </param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateFileSystemEntryInfos``1(System.String,System.String,Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions)">
            <summary>[AlphaFS] Returns an enumerable collection of file system entries that match a <paramref name="searchPattern"/> in a specified path using <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions"/>.</summary>
            <returns>The matching file system entries. The type of the items is determined by the type <typeparamref name="T"/>.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <typeparam name="T">The type to return. This may be one of the following types:
               <list type="definition">
               <item>
                  <term><see cref="T:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo"/></term>
                  <description>This method will return instances of <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo"/> instances.</description>
               </item>
               <item>
                  <term><see cref="T:Alphaleonis.Win32.Filesystem.FileSystemInfo"/></term>
                  <description>This method will return instances of <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> and <see cref="T:Alphaleonis.Win32.Filesystem.FileInfo"/> instances.</description>
               </item>
               <item>
                  <term><see cref="T:System.String"/></term>
                  <description>This method will return the full path of each item.</description>
               </item>
            </list>
            </typeparam>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">
              The search string to match against the names of directories in <paramref name="path"/>.
              This parameter can contain a combination of valid literal path and wildcard
              (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/> and <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>) characters, but does not support regular expressions.
            </param>
            <param name="options"><see cref="T:Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions"/> flags that specify how the directory is to be enumerated.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateFileSystemEntryInfos``1(System.String,System.String,Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Returns an enumerable collection of file system entries that match a <paramref name="searchPattern"/> in a specified path using <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions"/>.</summary>
            <returns>The matching file system entries. The type of the items is determined by the type <typeparamref name="T"/>.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <typeparam name="T">The type to return. This may be one of the following types:
               <list type="definition">
               <item>
                  <term><see cref="T:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo"/></term>
                  <description>This method will return instances of <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo"/> instances.</description>
               </item>
               <item>
                  <term><see cref="T:Alphaleonis.Win32.Filesystem.FileSystemInfo"/></term>
                  <description>This method will return instances of <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> and <see cref="T:Alphaleonis.Win32.Filesystem.FileInfo"/> instances.</description>
               </item>
               <item>
                  <term><see cref="T:System.String"/></term>
                  <description>This method will return the full path of each item.</description>
               </item>
            </list>
            </typeparam>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">
              The search string to match against the names of directories in <paramref name="path"/>.
              This parameter can contain a combination of valid literal path and wildcard
              (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/> and <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>) characters, but does not support regular expressions.
            </param>
            <param name="options"><see cref="T:Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions"/> flags that specify how the directory is to be enumerated.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateFileSystemEntryInfosTransacted``1(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>[AlphaFS] Returns an enumerable collection of file system entries in a specified path.</summary>
            <returns>The matching file system entries. The type of the items is determined by the type <typeparamref name="T"/>.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <typeparam name="T">The type to return. This may be one of the following types:
               <list type="definition">
               <item>
                  <term><see cref="T:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo"/></term>
                  <description>This method will return instances of <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo"/> instances.</description>
               </item>
               <item>
                  <term><see cref="T:Alphaleonis.Win32.Filesystem.FileSystemInfo"/></term>
                  <description>This method will return instances of <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> and <see cref="T:Alphaleonis.Win32.Filesystem.FileInfo"/> instances.</description>
               </item>
               <item>
                  <term><see cref="T:System.String"/></term>
                  <description>This method will return the full path of each item.</description>
               </item>
            </list>
            </typeparam>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory to search.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateFileSystemEntryInfosTransacted``1(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Returns an enumerable collection of file system entries in a specified path.</summary>
            <returns>The matching file system entries. The type of the items is determined by the type <typeparamref name="T"/>.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <typeparam name="T">The type to return. This may be one of the following types:
               <list type="definition">
               <item>
                  <term><see cref="T:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo"/></term>
                  <description>This method will return instances of <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo"/> instances.</description>
               </item>
               <item>
                  <term><see cref="T:Alphaleonis.Win32.Filesystem.FileSystemInfo"/></term>
                  <description>This method will return instances of <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> and <see cref="T:Alphaleonis.Win32.Filesystem.FileInfo"/> instances.</description>
               </item>
               <item>
                  <term><see cref="T:System.String"/></term>
                  <description>This method will return the full path of each item.</description>
               </item>
            </list>
            </typeparam>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory to search.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateFileSystemEntryInfosTransacted``1(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions)">
            <summary>[AlphaFS] Returns an enumerable collection of file system entries in a specified path.</summary>
            <returns>The matching file system entries. The type of the items is determined by the type <typeparamref name="T"/>.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <typeparam name="T">The type to return. This may be one of the following types:
               <list type="definition">
               <item>
                  <term><see cref="T:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo"/></term>
                  <description>This method will return instances of <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo"/> instances.</description>
               </item>
               <item>
                  <term><see cref="T:Alphaleonis.Win32.Filesystem.FileSystemInfo"/></term>
                  <description>This method will return instances of <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> and <see cref="T:Alphaleonis.Win32.Filesystem.FileInfo"/> instances.</description>
               </item>
               <item>
                  <term><see cref="T:System.String"/></term>
                  <description>This method will return the full path of each item.</description>
               </item>
            </list>
            </typeparam>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory to search.</param>
            <param name="options"><see cref="T:Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions"/> flags that specify how the directory is to be enumerated.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateFileSystemEntryInfosTransacted``1(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Returns an enumerable collection of file system entries in a specified path.</summary>
            <returns>The matching file system entries. The type of the items is determined by the type <typeparamref name="T"/>.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <typeparam name="T">The type to return. This may be one of the following types:
               <list type="definition">
               <item>
                  <term><see cref="T:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo"/></term>
                  <description>This method will return instances of <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo"/> instances.</description>
               </item>
               <item>
                  <term><see cref="T:Alphaleonis.Win32.Filesystem.FileSystemInfo"/></term>
                  <description>This method will return instances of <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> and <see cref="T:Alphaleonis.Win32.Filesystem.FileInfo"/> instances.</description>
               </item>
               <item>
                  <term><see cref="T:System.String"/></term>
                  <description>This method will return the full path of each item.</description>
               </item>
            </list>
            </typeparam>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory to search.</param>
            <param name="options"><see cref="T:Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions"/> flags that specify how the directory is to be enumerated.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateFileSystemEntryInfosTransacted``1(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String)">
            <summary>[AlphaFS] Returns an enumerable collection of file system entries that match a <paramref name="searchPattern"/> in a specified path.</summary>
            <returns>The matching file system entries. The type of the items is determined by the type <typeparamref name="T"/>.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <typeparam name="T">The type to return. This may be one of the following types:
               <list type="definition">
               <item>
                  <term><see cref="T:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo"/></term>
                  <description>This method will return instances of <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo"/> instances.</description>
               </item>
               <item>
                  <term><see cref="T:Alphaleonis.Win32.Filesystem.FileSystemInfo"/></term>
                  <description>This method will return instances of <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> and <see cref="T:Alphaleonis.Win32.Filesystem.FileInfo"/> instances.</description>
               </item>
               <item>
                  <term><see cref="T:System.String"/></term>
                  <description>This method will return the full path of each item.</description>
               </item>
            </list>
            </typeparam>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">
              The search string to match against the names of directories in <paramref name="path"/>.
              This parameter can contain a combination of valid literal path and wildcard
              (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/> and <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>) characters, but does not support regular expressions.
            </param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateFileSystemEntryInfosTransacted``1(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Returns an enumerable collection of file system entries that match a <paramref name="searchPattern"/> in a specified path.</summary>
            <returns>The matching file system entries. The type of the items is determined by the type <typeparamref name="T"/>.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <typeparam name="T">The type to return. This may be one of the following types:
               <list type="definition">
               <item>
                  <term><see cref="T:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo"/></term>
                  <description>This method will return instances of <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo"/> instances.</description>
               </item>
               <item>
                  <term><see cref="T:Alphaleonis.Win32.Filesystem.FileSystemInfo"/></term>
                  <description>This method will return instances of <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> and <see cref="T:Alphaleonis.Win32.Filesystem.FileInfo"/> instances.</description>
               </item>
               <item>
                  <term><see cref="T:System.String"/></term>
                  <description>This method will return the full path of each item.</description>
               </item>
            </list>
            </typeparam>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">
              The search string to match against the names of directories in <paramref name="path"/>.
              This parameter can contain a combination of valid literal path and wildcard
              (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/> and <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>) characters, but does not support regular expressions.
            </param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateFileSystemEntryInfosTransacted``1(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions)">
            <summary>[AlphaFS] Returns an enumerable collection of file system entries that match a <paramref name="searchPattern"/> in a specified path using <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions"/>.</summary>
            <returns>The matching file system entries. The type of the items is determined by the type <typeparamref name="T"/>.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <typeparam name="T">The type to return. This may be one of the following types:
               <list type="definition">
               <item>
                  <term><see cref="T:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo"/></term>
                  <description>This method will return instances of <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo"/> instances.</description>
               </item>
               <item>
                  <term><see cref="T:Alphaleonis.Win32.Filesystem.FileSystemInfo"/></term>
                  <description>This method will return instances of <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> and <see cref="T:Alphaleonis.Win32.Filesystem.FileInfo"/> instances.</description>
               </item>
               <item>
                  <term><see cref="T:System.String"/></term>
                  <description>This method will return the full path of each item.</description>
               </item>
            </list>
            </typeparam>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">
              The search string to match against the names of directories in <paramref name="path"/>.
              This parameter can contain a combination of valid literal path and wildcard
              (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/> and <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>) characters, but does not support regular expressions.
            </param>
            <param name="options"><see cref="T:Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions"/> flags that specify how the directory is to be enumerated.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateFileSystemEntryInfosTransacted``1(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Returns an enumerable collection of file system entries that match a <paramref name="searchPattern"/> in a specified path using <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions"/>.</summary>
            <returns>The matching file system entries. The type of the items is determined by the type <typeparamref name="T"/>.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <typeparam name="T">The type to return. This may be one of the following types:
               <list type="definition">
               <item>
                  <term><see cref="T:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo"/></term>
                  <description>This method will return instances of <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo"/> instances.</description>
               </item>
               <item>
                  <term><see cref="T:Alphaleonis.Win32.Filesystem.FileSystemInfo"/></term>
                  <description>This method will return instances of <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> and <see cref="T:Alphaleonis.Win32.Filesystem.FileInfo"/> instances.</description>
               </item>
               <item>
                  <term><see cref="T:System.String"/></term>
                  <description>This method will return the full path of each item.</description>
               </item>
            </list>
            </typeparam>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">
              The search string to match against the names of directories in <paramref name="path"/>.
              This parameter can contain a combination of valid literal path and wildcard
              (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/> and <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>) characters, but does not support regular expressions.
            </param>
            <param name="options"><see cref="T:Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions"/> flags that specify how the directory is to be enumerated.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateFileSystemEntryInfosCore``1(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>Returns an enumerable collection of file system entries in a specified path using <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions"/>.</summary>
            <returns>The matching file system entries. The type of the items is determined by the type <typeparamref name="T"/>.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <typeparam name="T">The type to return. This may be one of the following types:
               <list type="definition">
               <item>
                  <term><see cref="T:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo"/></term>
                  <description>This method will return instances of <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo"/> instances.</description>
               </item>
               <item>
                  <term><see cref="T:Alphaleonis.Win32.Filesystem.FileSystemInfo"/></term>
                  <description>This method will return instances of <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> and <see cref="T:Alphaleonis.Win32.Filesystem.FileInfo"/> instances.</description>
               </item>
               <item>
                  <term><see cref="T:System.String"/></term>
                  <description>This method will return the full path of each item.</description>
               </item>
            </list>
            </typeparam>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">
              The search string to match against the names of directories in <paramref name="path"/>.
              This parameter can contain a combination of valid literal path and wildcard
              (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/> and <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>) characters, but does not support regular expressions.
            </param>
            <param name="options"><see cref="T:Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions"/> flags that specify how the directory is to be enumerated.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateFileSystemEntries(System.String)">
            <summary>Returns an enumerable collection of file names and directory names in a specified <paramref name="path"/>.</summary>
            <returns>An enumerable collection of file system entries in the directory specified by <paramref name="path"/>.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="path">The directory to search.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateFileSystemEntries(System.String,System.String)">
            <summary>Returns an enumerable collection of file names and directory names that match a <paramref name="searchPattern"/> in a specified <paramref name="path"/>.</summary>
            <returns>An enumerable collection of file system entries in the directory specified by <paramref name="path"/> and that match the specified <paramref name="searchPattern"/>.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">
              The search string to match against the names of directories in <paramref name="path"/>.
              This parameter can contain a combination of valid literal path and wildcard
              (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/> and <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>) characters, but does not support regular expressions.
            </param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateFileSystemEntries(System.String,System.String,System.IO.SearchOption)">
            <summary>Returns an enumerable collection of file names and directory names that match a <paramref name="searchPattern"/> in a specified <paramref name="path"/>, and optionally searches subdirectories.</summary>
            <returns>An enumerable collection of file system entries in the directory specified by <paramref name="path"/> and that match the specified <paramref name="searchPattern"/> and <paramref name="searchOption"/>.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">
              The search string to match against the names of directories in <paramref name="path"/>.
              This parameter can contain a combination of valid literal path and wildcard
              (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/> and <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>) characters, but does not support regular expressions.
            </param>
            <param name="searchOption">
              One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the <paramref name="searchOption"/>
              should include only the current directory or should include all subdirectories.
            </param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateFileSystemEntries(System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Returns an enumerable collection of file names and directory names in a specified <paramref name="path"/>.</summary>
            <returns>An enumerable collection of file system entries in the directory specified by <paramref name="path"/>.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="path">The directory to search.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateFileSystemEntries(System.String,System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Returns an enumerable collection of file names and directory names that match a <paramref name="searchPattern"/> in a specified <paramref name="path"/>.</summary>
            <returns>An enumerable collection of file system entries in the directory specified by <paramref name="path"/> and that match the specified <paramref name="searchPattern"/>.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">
              The search string to match against the names of directories in <paramref name="path"/>.
              This parameter can contain a combination of valid literal path and wildcard
              (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/> and <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>) characters, but does not support regular expressions.
            </param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateFileSystemEntries(System.String,System.String,System.IO.SearchOption,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Returns an enumerable collection of file names and directory names that match a <paramref name="searchPattern"/> in a specified <paramref name="path"/>, and optionally searches subdirectories.</summary>
            <returns>An enumerable collection of file system entries in the directory specified by <paramref name="path"/> and that match the specified <paramref name="searchPattern"/> and <paramref name="searchOption"/>.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">
              The search string to match against the names of directories in <paramref name="path"/>.
              This parameter can contain a combination of valid literal path and wildcard
              (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/> and <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>) characters, but does not support regular expressions.
            </param>
            <param name="searchOption">
              One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the <paramref name="searchOption"/>
              should include only the current directory or should include all subdirectories.
            </param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateFileSystemEntries(System.String,Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions)">
            <summary>[AlphaFS] Returns an enumerable collection of file names and directory names in a specified <paramref name="path"/>.</summary>
            <returns>An enumerable collection of file system entries in the directory specified by <paramref name="path"/>.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="path">The directory to search.</param>
            <param name="options"><see cref="T:Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions"/> flags that specify how the directory is to be enumerated.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateFileSystemEntries(System.String,Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Returns an enumerable collection of file names and directory names in a specified <paramref name="path"/>.</summary>
            <returns>An enumerable collection of file system entries in the directory specified by <paramref name="path"/>.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="path">The directory to search.</param>
            <param name="options"><see cref="T:Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions"/> flags that specify how the directory is to be enumerated.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateFileSystemEntries(System.String,System.String,Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions)">
            <summary>[AlphaFS] Returns an enumerable collection of file names and directory names that match a <paramref name="searchPattern"/> in a specified <paramref name="path"/>.</summary>
            <returns>An enumerable collection of file system entries in the directory specified by <paramref name="path"/> and that match the specified <paramref name="searchPattern"/>.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">
              The search string to match against the names of directories in <paramref name="path"/>.
              This parameter can contain a combination of valid literal path and wildcard
              (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/> and <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>) characters, but does not support regular expressions.
            </param>
            <param name="options"><see cref="T:Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions"/> flags that specify how the directory is to be enumerated.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateFileSystemEntries(System.String,System.String,Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Returns an enumerable collection of file names and directory names that match a <paramref name="searchPattern"/> in a specified <paramref name="path"/>.</summary>
            <returns>An enumerable collection of file system entries in the directory specified by <paramref name="path"/> and that match the specified <paramref name="searchPattern"/>.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">
              The search string to match against the names of directories in <paramref name="path"/>.
              This parameter can contain a combination of valid literal path and wildcard
              (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/> and <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>) characters, but does not support regular expressions.
            </param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
            <param name="options"><see cref="T:Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions"/> flags that specify how the directory is to be enumerated.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateFileSystemEntriesTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>[AlphaFS] Returns an enumerable collection of file names and directory names in a specified <paramref name="path"/>.</summary>
            <returns>An enumerable collection of file system entries in the directory specified by <paramref name="path"/>.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory to search.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateFileSystemEntriesTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String)">
            <summary>[AlphaFS] Returns an enumerable collection of file names and directory names that match a <paramref name="searchPattern"/> in a specified <paramref name="path"/>.</summary>
            <returns>An enumerable collection of file system entries in the directory specified by <paramref name="path"/> and that match the specified <paramref name="searchPattern"/>.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">
              The search string to match against the names of directories in <paramref name="path"/>.
              This parameter can contain a combination of valid literal path and wildcard
              (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/> and <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>) characters, but does not support regular expressions.
            </param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateFileSystemEntriesTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,System.IO.SearchOption)">
            <summary>[AlphaFS] Returns an enumerable collection of file names and directory names that match a <paramref name="searchPattern"/> in a specified <paramref name="path"/>, and optionally searches subdirectories.</summary>
            <returns>An enumerable collection of file system entries in the directory specified by <paramref name="path"/> and that match the specified <paramref name="searchPattern"/> and <paramref name="searchOption"/>.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">
              The search string to match against the names of directories in <paramref name="path"/>.
              This parameter can contain a combination of valid literal path and wildcard
              (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/> and <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>) characters, but does not support regular expressions.
            </param>
            <param name="searchOption">
              One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the <paramref name="searchOption"/>
              should include only the current directory or should include all subdirectories.
            </param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateFileSystemEntriesTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Returns an enumerable collection of file names and directory names in a specified <paramref name="path"/>.</summary>
            <returns>An enumerable collection of file system entries in the directory specified by <paramref name="path"/>.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory to search.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateFileSystemEntriesTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Returns an enumerable collection of file names and directory names that match a <paramref name="searchPattern"/> in a specified <paramref name="path"/>.</summary>
            <returns>An enumerable collection of file system entries in the directory specified by <paramref name="path"/> and that match the specified <paramref name="searchPattern"/>.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">
              The search string to match against the names of directories in <paramref name="path"/>.
              This parameter can contain a combination of valid literal path and wildcard
              (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/> and <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>) characters, but does not support regular expressions.
            </param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateFileSystemEntriesTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,System.IO.SearchOption,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Returns an enumerable collection of file names and directory names that match a <paramref name="searchPattern"/> in a specified <paramref name="path"/>, and optionally searches subdirectories.</summary>
            <returns>An enumerable collection of file system entries in the directory specified by <paramref name="path"/> and that match the specified <paramref name="searchPattern"/> and <paramref name="searchOption"/>.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">
              The search string to match against the names of directories in <paramref name="path"/>.
              This parameter can contain a combination of valid literal path and wildcard
              (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/> and <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>) characters, but does not support regular expressions.
            </param>
            <param name="searchOption">
              One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the <paramref name="searchOption"/>
              should include only the current directory or should include all subdirectories.
            </param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateFileSystemEntriesTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions)">
            <summary>[AlphaFS] Returns an enumerable collection of file names and directory names in a specified <paramref name="path"/>.</summary>
            <returns>An enumerable collection of file system entries in the directory specified by <paramref name="path"/>.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory to search.</param>
            <param name="options"><see cref="T:Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions"/> flags that specify how the directory is to be enumerated.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateFileSystemEntriesTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Returns an enumerable collection of file names and directory names in a specified <paramref name="path"/>.</summary>
            <returns>An enumerable collection of file system entries in the directory specified by <paramref name="path"/>.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory to search.</param>
            <param name="options"><see cref="T:Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions"/> flags that specify how the directory is to be enumerated.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateFileSystemEntriesTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions)">
            <summary>[AlphaFS] Returns an enumerable collection of file names and directory names that match a <paramref name="searchPattern"/> in a specified <paramref name="path"/>.</summary>
            <returns>An enumerable collection of file system entries in the directory specified by <paramref name="path"/> and that match the specified <paramref name="searchPattern"/>.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">
              The search string to match against the names of directories in <paramref name="path"/>.
              This parameter can contain a combination of valid literal path and wildcard
              (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/> and <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>) characters, but does not support regular expressions.
            </param>
            <param name="options"><see cref="T:Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions"/> flags that specify how the directory is to be enumerated.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateFileSystemEntriesTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Returns an enumerable collection of file names and directory names that match a <paramref name="searchPattern"/> in a specified <paramref name="path"/>.</summary>
            <returns>An enumerable collection of file system entries in the directory specified by <paramref name="path"/> and that match the specified <paramref name="searchPattern"/>.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">
              The search string to match against the names of directories in <paramref name="path"/>.
              This parameter can contain a combination of valid literal path and wildcard
              (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/> and <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>) characters, but does not support regular expressions.
            </param>
            <param name="options"><see cref="T:Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions"/> flags that specify how the directory is to be enumerated.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Exists(System.String)">
            <summary>Determines whether the given path refers to an existing directory on disk.</summary>
            <returns>
              <para>Returns <see langword="true"/> if <paramref name="path"/> refers to an existing directory.</para>
              <para>Returns <see langword="false"/> if the directory does not exist or an error occurs when trying to determine if the specified file exists.</para>
            </returns>
            <remarks>
              The Exists method returns <see langword="false"/> if any error occurs while trying to determine if the specified file exists.
              This can occur in situations that raise exceptions such as passing a file name with invalid characters or too many characters,
              a failing or missing disk, or if the caller does not have permission to read the file.
            </remarks>
            <param name="path">The path to test.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Exists(System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Determines whether the given path refers to an existing directory on disk.</summary>
            <returns>
              <para>Returns <see langword="true"/> if <paramref name="path"/> refers to an existing directory.</para>
              <para>Returns <see langword="false"/> if the directory does not exist or an error occurs when trying to determine if the specified file exists.</para>
            </returns>
            <remarks>
              The Exists method returns <see langword="false"/> if any error occurs while trying to determine if the specified file exists.
              This can occur in situations that raise exceptions such as passing a file name with invalid characters or too many characters,
              a failing or missing disk, or if the caller does not have permission to read the file.
            </remarks>
            <param name="path">The path to test.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.ExistsTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>[AlphaFS] Determines whether the given path refers to an existing directory on disk.</summary>
            <returns>
              <para>Returns <see langword="true"/> if <paramref name="path"/> refers to an existing directory.</para>
              <para>Returns <see langword="false"/> if the directory does not exist or an error occurs when trying to determine if the specified file exists.</para>
            </returns>
            <remarks>
              The Exists method returns <see langword="false"/> if any error occurs while trying to determine if the specified file exists.
              This can occur in situations that raise exceptions such as passing a file name with invalid characters or too many characters,
              a failing or missing disk, or if the caller does not have permission to read the file.
            </remarks>
            <param name="transaction">The transaction.</param>
            <param name="path">The path to test.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.ExistsTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Determines whether the given path refers to an existing directory on disk.</summary>
            <returns>
              <para>Returns <see langword="true"/> if <paramref name="path"/> refers to an existing directory.</para>
              <para>Returns <see langword="false"/> if the directory does not exist or an error occurs when trying to determine if the specified file exists.</para>
            </returns>
            <remarks>
              The Exists method returns <see langword="false"/> if any error occurs while trying to determine if the specified file exists.
              This can occur in situations that raise exceptions such as passing a file name with invalid characters or too many characters,
              a failing or missing disk, or if the caller does not have permission to read the file.
            </remarks>
            <param name="transaction">The transaction.</param>
            <param name="path">The path to test.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetDirectories(System.String)">
            <summary>Returns the names of subdirectories (including their paths) in the specified directory.</summary>
            <returns>An array of the full names (including paths) of subdirectories in the specified path, or an empty array if no directories are found.</returns>
            <remarks>
              <para>The names returned by this method are prefixed with the directory information provided in path.</para>
              <para>The EnumerateDirectories and GetDirectories methods differ as follows: When you use EnumerateDirectories, you can start enumerating the collection of names
                before the whole collection is returned; when you use GetDirectories, you must wait for the whole array of names to be returned before you can access the array.
                Therefore, when you are working with many files and directories, EnumerateDirectories can be more efficient.
              </para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="path">The directory to search.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetDirectories(System.String,System.String)">
            <summary>Returns the names of subdirectories (including their paths) that match the specified search pattern in the specified directory.</summary>
            <returns>An array of the full names (including paths) of the subdirectories that match the search pattern in the specified directory, or an empty array if no directories are found.</returns>
            <remarks>
              <para>The names returned by this method are prefixed with the directory information provided in path.</para>
              <para>The EnumerateDirectories and GetDirectories methods differ as follows: When you use EnumerateDirectories, you can start enumerating the collection of names
                before the whole collection is returned; when you use GetDirectories, you must wait for the whole array of names to be returned before you can access the array.
                Therefore, when you are working with many files and directories, EnumerateDirectories can be more efficient.
              </para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">
              The search string to match against the names of directories in <paramref name="path"/>.
              This parameter can contain a combination of valid literal path and wildcard
              (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/> and <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>) characters, but does not support regular expressions.
            </param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetDirectories(System.String,System.String,System.IO.SearchOption)">
            <summary>Returns the names of the subdirectories (including their paths) that match the specified search pattern in the specified directory, and optionally searches subdirectories.</summary>
            <returns>An array of the full names (including paths) of the subdirectories that match the specified criteria, or an empty array if no directories are found.</returns>
            <remarks>
              <para>The names returned by this method are prefixed with the directory information provided in path.</para>
              <para>The EnumerateDirectories and GetDirectories methods differ as follows: When you use EnumerateDirectories, you can start enumerating the collection of names
                before the whole collection is returned; when you use GetDirectories, you must wait for the whole array of names to be returned before you can access the array.
                Therefore, when you are working with many files and directories, EnumerateDirectories can be more efficient.
              </para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">
              The search string to match against the names of directories in <paramref name="path"/>.
              This parameter can contain a combination of valid literal path and wildcard
              (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/> and <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>) characters, but does not support regular expressions.
            </param>
            <param name="searchOption">
              One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the <paramref name="searchOption"/>
              should include only the current directory or should include all subdirectories.
            </param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetDirectoriesTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>Returns the names of subdirectories (including their paths) in the specified directory.</summary>
            <returns>An array of the full names (including paths) of subdirectories in the specified path, or an empty array if no directories are found.</returns>
            <remarks>
              <para>The names returned by this method are prefixed with the directory information provided in path.</para>
              <para>The EnumerateDirectories and GetDirectories methods differ as follows: When you use EnumerateDirectories, you can start enumerating the collection of names
                before the whole collection is returned; when you use GetDirectories, you must wait for the whole array of names to be returned before you can access the array.
                Therefore, when you are working with many files and directories, EnumerateDirectories can be more efficient.
              </para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory to search.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetDirectoriesTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String)">
            <summary>Returns the names of subdirectories (including their paths) that match the specified search pattern in the specified directory.</summary>
            <returns>An array of the full names (including paths) of the subdirectories that match the search pattern in the specified directory, or an empty array if no directories are found.</returns>
            <remarks>
              <para>The names returned by this method are prefixed with the directory information provided in path.</para>
              <para>The EnumerateDirectories and GetDirectories methods differ as follows: When you use EnumerateDirectories, you can start enumerating the collection of names
                before the whole collection is returned; when you use GetDirectories, you must wait for the whole array of names to be returned before you can access the array.
                Therefore, when you are working with many files and directories, EnumerateDirectories can be more efficient.
              </para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">
              The search string to match against the names of directories in <paramref name="path"/>.
              This parameter can contain a combination of valid literal path and wildcard
              (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/> and <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>) characters, but does not support regular expressions.
            </param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetDirectoriesTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,System.IO.SearchOption)">
            <summary>Returns the names of the subdirectories (including their paths) that match the specified search pattern in the specified directory, and optionally searches subdirectories.</summary>
            <returns>An array of the full names (including paths) of the subdirectories that match the specified criteria, or an empty array if no directories are found.</returns>
            <remarks>
              <para>The names returned by this method are prefixed with the directory information provided in path.</para>
              <para>The EnumerateDirectories and GetDirectories methods differ as follows: When you use EnumerateDirectories, you can start enumerating the collection of names
                before the whole collection is returned; when you use GetDirectories, you must wait for the whole array of names to be returned before you can access the array.
                Therefore, when you are working with many files and directories, EnumerateDirectories can be more efficient.
              </para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">
              The search string to match against the names of directories in <paramref name="path"/>.
              This parameter can contain a combination of valid literal path and wildcard
              (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/> and <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>) characters, but does not support regular expressions.
            </param>
            <param name="searchOption">
              One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the <paramref name="searchOption"/>
              should include only the current directory or should include all subdirectories.
            </param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetFiles(System.String)">
            <summary>Returns the names of files (including their paths) in the specified directory.</summary>
            <returns>An array of the full names (including paths) for the files in the specified directory, or an empty array if no files are found.</returns>
            <remarks>
              <para>The returned file names are appended to the supplied <paramref name="path"/> parameter.</para>
              <para>The order of the returned file names is not guaranteed; use the Sort() method if a specific sort order is required.</para>
              <para>The EnumerateFiles and GetFiles methods differ as follows: When you use EnumerateFiles, you can start enumerating the collection of names
                before the whole collection is returned; when you use GetFiles, you must wait for the whole array of names to be returned before you can access the array.
                Therefore, when you are working with many files and directories, EnumerateFiles can be more efficient.
              </para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="path">The directory to search.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetFiles(System.String,System.String)">
            <summary>Returns the names of files (including their paths) that match the specified search pattern in the specified directory.</summary>
            <returns>An array of the full names (including paths) for the files in the specified directory that match the specified search pattern, or an empty array if no files are found.</returns>
            <remarks>
              <para>The returned file names are appended to the supplied <paramref name="path"/> parameter.</para>
              <para>The order of the returned file names is not guaranteed; use the Sort() method if a specific sort order is required.</para>
              <para>The EnumerateFiles and GetFiles methods differ as follows: When you use EnumerateFiles, you can start enumerating the collection of names
                before the whole collection is returned; when you use GetFiles, you must wait for the whole array of names to be returned before you can access the array.
                Therefore, when you are working with many files and directories, EnumerateFiles can be more efficient.
              </para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">
              The search string to match against the names of directories in <paramref name="path"/>.
              This parameter can contain a combination of valid literal path and wildcard
              (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/> and <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>) characters, but does not support regular expressions.
            </param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetFiles(System.String,System.String,System.IO.SearchOption)">
            <summary>Returns the names of files (including their paths) that match the specified search pattern in the current directory, and optionally searches subdirectories.</summary>
            <returns>An array of the full names (including paths) for the files in the specified directory that match the specified search pattern and option, or an empty array if no files are found.</returns>
            <remarks>
              <para>The returned file names are appended to the supplied <paramref name="path"/> parameter.</para>
              <para>The order of the returned file names is not guaranteed; use the Sort() method if a specific sort order is required.</para>
              <para>The EnumerateFiles and GetFiles methods differ as follows: When you use EnumerateFiles, you can start enumerating the collection of names
                before the whole collection is returned; when you use GetFiles, you must wait for the whole array of names to be returned before you can access the array.
                Therefore, when you are working with many files and directories, EnumerateFiles can be more efficient.
              </para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">
              The search string to match against the names of directories in <paramref name="path"/>.
              This parameter can contain a combination of valid literal path and wildcard
              (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/> and <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>) characters, but does not support regular expressions.
            </param>
            <param name="searchOption">
              One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the <paramref name="searchOption"/>
              should include only the current directory or should include all subdirectories.
            </param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetFilesTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>Returns the names of files (including their paths) in the specified directory.</summary>
            <returns>An array of the full names (including paths) for the files in the specified directory, or an empty array if no files are found.</returns>
            <remarks>
              <para>The returned file names are appended to the supplied <paramref name="path"/> parameter.</para>
              <para>The order of the returned file names is not guaranteed; use the Sort() method if a specific sort order is required.</para>
              <para>The EnumerateFiles and GetFiles methods differ as follows: When you use EnumerateFiles, you can start enumerating the collection of names
                before the whole collection is returned; when you use GetFiles, you must wait for the whole array of names to be returned before you can access the array.
                Therefore, when you are working with many files and directories, EnumerateFiles can be more efficient.
              </para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory to search.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetFilesTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String)">
            <summary>Returns the names of files (including their paths) that match the specified search pattern in the specified directory.</summary>
            <returns>An array of the full names (including paths) for the files in the specified directory that match the specified search pattern, or an empty array if no files are found.</returns>
            <remarks>
              <para>The returned file names are appended to the supplied <paramref name="path"/> parameter.</para>
              <para>The order of the returned file names is not guaranteed; use the Sort() method if a specific sort order is required.</para>
              <para>The EnumerateFiles and GetFiles methods differ as follows: When you use EnumerateFiles, you can start enumerating the collection of names
                before the whole collection is returned; when you use GetFiles, you must wait for the whole array of names to be returned before you can access the array.
                Therefore, when you are working with many files and directories, EnumerateFiles can be more efficient.
              </para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">
              The search string to match against the names of directories in <paramref name="path"/>.
              This parameter can contain a combination of valid literal path and wildcard
              (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/> and <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>) characters, but does not support regular expressions.
            </param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetFilesTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,System.IO.SearchOption)">
            <summary>Returns the names of files (including their paths) that match the specified search pattern in the current directory, and optionally searches subdirectories.</summary>
            <returns>An array of the full names (including paths) for the files in the specified directory that match the specified search pattern and option, or an empty array if no files are found.</returns>
            <remarks>
              <para>The returned file names are appended to the supplied <paramref name="path"/> parameter.</para>
              <para>The order of the returned file names is not guaranteed; use the Sort() method if a specific sort order is required.</para>
              <para>The EnumerateFiles and GetFiles methods differ as follows: When you use EnumerateFiles, you can start enumerating the collection of names
                before the whole collection is returned; when you use GetFiles, you must wait for the whole array of names to be returned before you can access the array.
                Therefore, when you are working with many files and directories, EnumerateFiles can be more efficient.
              </para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">
              The search string to match against the names of directories in <paramref name="path"/>.
              This parameter can contain a combination of valid literal path and wildcard
              (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/> and <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>) characters, but does not support regular expressions.
            </param>
            <param name="searchOption">
              One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the <paramref name="searchOption"/>
              should include only the current directory or should include all subdirectories.
            </param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetCreationTime(System.String)">
            <summary>Gets the creation date and time of the specified directory.</summary>
            <returns>A <see cref="T:System.DateTime"/> structure set to the creation date and time for the specified directory. This value is expressed in local time.</returns>
            <param name="path">The directory for which to obtain creation date and time information.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetCreationTimeUtc(System.String)">
            <summary>Gets the creation date and time, in Coordinated Universal Time (UTC) format, of the specified directory.</summary>
            <returns>A <see cref="T:System.DateTime"/> structure set to the creation date and time for the specified directory. This value is expressed in UTC time.</returns>
            <param name="path">The directory for which to obtain creation date and time information, in Coordinated Universal Time (UTC) format.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetCreationTime(System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Gets the creation date and time of the specified directory.</summary>
            <returns>A <see cref="T:System.DateTime"/> structure set to the creation date and time for the specified directory. This value is expressed in local time.</returns>
            <param name="path">The directory for which to obtain creation date and time information.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetCreationTimeUtc(System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Gets the creation date and time, in Coordinated Universal Time (UTC) format, of the specified directory.</summary>
            <returns>A <see cref="T:System.DateTime"/> structure set to the creation date and time for the specified directory. This value is expressed in UTC time.</returns>
            <param name="path">The directory for which to obtain creation date and time information, in Coordinated Universal Time (UTC) format.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetCreationTimeTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>[AlphaFS] Gets the creation date and time of the specified directory.</summary>
            <returns>A <see cref="T:System.DateTime"/> structure set to the creation date and time for the specified directory. This value is expressed in local time.</returns>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory for which to obtain creation date and time information.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetCreationTimeTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Gets the creation date and time of the specified directory.</summary>
            <returns>A <see cref="T:System.DateTime"/> structure set to the creation date and time for the specified directory. This value is expressed in local time.</returns>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory for which to obtain creation date and time information.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetCreationTimeUtcTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>[AlphaFS] Gets the creation date and time, in Coordinated Universal Time (UTC) format, of the specified directory.</summary>
            <returns>A <see cref="T:System.DateTime"/> structure set to the creation date and time for the specified directory. This value is expressed in UTC time.</returns>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory for which to obtain creation date and time information, in Coordinated Universal Time (UTC) format.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetCreationTimeUtcTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Gets the creation date and time, in Coordinated Universal Time (UTC) format, of the specified directory.</summary>
            <returns>A <see cref="T:System.DateTime"/> structure set to the creation date and time for the specified directory. This value is expressed in UTC time.</returns>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory for which to obtain creation date and time information, in Coordinated Universal Time (UTC) format.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetLastAccessTime(System.String)">
            <summary>Gets the date and time that the specified directory was last accessed.</summary>
            <returns>A <see cref="T:System.DateTime"/> structure set to the date and time that the specified directory was last accessed. This value is expressed in local time.</returns>
            <param name="path">The directory for which to obtain access date and time information.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetLastAccessTimeUtc(System.String)">
            <summary>Gets the date and time, in coordinated universal time (UTC), that the specified directory was last accessed.</summary>
            <returns>A <see cref="T:System.DateTime"/> structure set to the date and time that the specified directory was last accessed. This value is expressed in UTC time.</returns>
            <param name="path">The directory for which to obtain access date and time information.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetLastAccessTime(System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Gets the date and time that the specified directory was last accessed.</summary>
            <returns>A <see cref="T:System.DateTime"/> structure set to the date and time that the specified directory was last accessed. This value is expressed in local time.</returns>
            <param name="path">The directory for which to obtain access date and time information.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetLastAccessTimeUtc(System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Gets the date and time, in coordinated universal time (UTC), that the specified directory was last accessed.</summary>
            <returns>A <see cref="T:System.DateTime"/> structure set to the date and time that the specified directory was last accessed. This value is expressed in UTC time.</returns>
            <param name="path">The directory for which to obtain access date and time information.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetLastAccessTimeTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>[AlphaFS] Gets the date and time that the specified directory was last accessed.</summary>
            <returns>A <see cref="T:System.DateTime"/> structure set to the date and time that the specified directory was last accessed. This value is expressed in local time.</returns>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory for which to obtain access date and time information.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetLastAccessTimeTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Gets the date and time that the specified directory was last accessed.</summary>
            <returns>A <see cref="T:System.DateTime"/> structure set to the date and time that the specified directory was last accessed. This value is expressed in local time.</returns>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory for which to obtain access date and time information.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetLastAccessTimeUtcTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>[AlphaFS] Gets the date and time, in coordinated universal time (UTC), that the specified directory was last accessed.</summary>
            <returns>A <see cref="T:System.DateTime"/> structure set to the date and time that the specified directory was last accessed. This value is expressed in UTC time.</returns>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory for which to obtain access date and time information.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetLastAccessTimeUtcTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Gets the date and time, in coordinated universal time (UTC), that the specified directory was last accessed.</summary>
            <returns>A <see cref="T:System.DateTime"/> structure set to the date and time that the specified directory was last accessed. This value is expressed in UTC time.</returns>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory for which to obtain access date and time information.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetLastWriteTime(System.String)">
            <summary>Gets the date and time that the specified directory was last written to.</summary>
            <returns>A <see cref="T:System.DateTime"/> structure set to the date and time that the specified directory was last written to. This value is expressed in local time.</returns>
            <param name="path">The directory for which to obtain write date and time information.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetLastWriteTimeUtc(System.String)">
            <summary>Gets the date and time, in coordinated universal time (UTC) time, that the specified directory was last written to.</summary>
            <returns>A <see cref="T:System.DateTime"/> structure set to the date and time that the specified directory was last written to. This value is expressed in UTC time.</returns>
            <param name="path">The directory for which to obtain write date and time information.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetLastWriteTime(System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Gets the date and time that the specified directory was last written to.</summary>
            <returns>A <see cref="T:System.DateTime"/> structure set to the date and time that the specified directory was last written to. This value is expressed in local time.</returns>
            <param name="path">The directory for which to obtain write date and time information.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetLastWriteTimeUtc(System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Gets the date and time, in coordinated universal time (UTC) time, that the specified directory was last written to.</summary>
            <returns>A <see cref="T:System.DateTime"/> structure set to the date and time that the specified directory was last written to. This value is expressed in UTC time.</returns>
            <param name="path">The directory for which to obtain write date and time information.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetLastWriteTimeTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>[AlphaFS] Gets the date and time that the specified directory was last written to.</summary>
            <returns>A <see cref="T:System.DateTime"/> structure set to the date and time that the specified directory was last written to. This value is expressed in local time.</returns>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory for which to obtain write date and time information.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetLastWriteTimeTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Gets the date and time that the specified directory was last written to.</summary>
            <returns>A <see cref="T:System.DateTime"/> structure set to the date and time that the specified directory was last written to. This value is expressed in local time.</returns>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory for which to obtain write date and time information.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetLastWriteTimeUtcTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>[AlphaFS] Gets the date and time, in coordinated universal time (UTC) time, that the specified directory was last written to.</summary>
            <returns>A <see cref="T:System.DateTime"/> structure set to the date and time that the specified directory was last written to. This value is expressed in UTC time.</returns>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory for which to obtain write date and time information.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetLastWriteTimeUtcTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Gets the date and time, in coordinated universal time (UTC) time, that the specified directory was last written to.</summary>
            <returns>A <see cref="T:System.DateTime"/> structure set to the date and time that the specified directory was last written to. This value is expressed in UTC time.</returns>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory for which to obtain write date and time information.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.HasInheritedPermissions(System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Check if the directory has permission inheritance enabled.</summary>
            <returns><see langword="true"/> if permission inheritance is enabled, <see langword="false"/> if permission inheritance is disabled.</returns>
            <param name="path">The full path to the directory to check.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.HasInheritedPermissions(System.String)">
            <summary>[AlphaFS] Check if the directory has permission inheritance enabled.</summary>
            <param name="path">The full path to the directory to check.</param>
            <returns><see langword="true"/> if permission inheritance is enabled, <see langword="false"/> if permission inheritance is disabled.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetAccessControl(System.String)">
            <summary>Gets a <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object that encapsulates the access control list (ACL) entries for the specified directory.</summary>
            <returns>A <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object that encapsulates the access control rules for the file described by the <paramref name="path"/> parameter.</returns>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <param name="path">The path to a directory containing a <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object that describes the file's access control list (ACL) information.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetAccessControl(System.String,System.Security.AccessControl.AccessControlSections)">
            <summary>Gets a <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object that encapsulates the specified type of access control list (ACL) entries for a particular directory.</summary>
            <returns>A <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object that encapsulates the access control rules for the directory described by the <paramref name="path"/> parameter. </returns>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <param name="path">The path to a directory containing a <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object that describes the directory's access control list (ACL) information.</param>
            <param name="includeSections">One (or more) of the <see cref="T:System.Security.AccessControl.AccessControlSections"/> values that specifies the type of access control list (ACL) information to receive.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetAccessControl(System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Gets a <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object that encapsulates the access control list (ACL) entries for the specified directory.</summary>
            <returns>A <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object that encapsulates the access control rules for the file described by the <paramref name="path"/> parameter.</returns>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <param name="path">The path to a directory containing a <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object that describes the file's access control list (ACL) information.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetAccessControl(System.String,System.Security.AccessControl.AccessControlSections,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Gets a <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object that encapsulates the specified type of access control list (ACL) entries for a particular directory.</summary>
            <returns>A <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object that encapsulates the access control rules for the directory described by the <paramref name="path"/> parameter. </returns>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <param name="path">The path to a directory containing a <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object that describes the directory's access control list (ACL) information.</param>
            <param name="includeSections">One (or more) of the <see cref="T:System.Security.AccessControl.AccessControlSections"/> values that specifies the type of access control list (ACL) information to receive.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetAccessControl(Microsoft.Win32.SafeHandles.SafeFileHandle)">
            <summary>[AlphaFS] Gets a <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object that encapsulates the access control list (ACL) entries for the specified directory handle.</summary>
            <returns>A <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object that encapsulates the access control rules for the file described by the <paramref name="handle"/> parameter.</returns>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <param name="handle">A <see cref="T:System.Runtime.InteropServices.SafeHandle"/> to a directory containing a <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object that describes the directory's access control list (ACL) information.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetAccessControl(Microsoft.Win32.SafeHandles.SafeFileHandle,System.Security.AccessControl.AccessControlSections)">
            <summary>[AlphaFS] Gets a <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object that encapsulates the specified type of access control list (ACL) entries for a particular directory handle.</summary>
            <returns>A <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object that encapsulates the access control rules for the directory described by the <paramref name="handle"/> parameter. </returns>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <param name="handle">A <see cref="T:System.Runtime.InteropServices.SafeHandle"/> to a directory containing a <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object that describes the directory's access control list (ACL) information.</param>
            <param name="includeSections">One (or more) of the <see cref="T:System.Security.AccessControl.AccessControlSections"/> values that specifies the type of access control list (ACL) information to receive.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetChangeTime(System.String)">
            <summary>[AlphaFS] Gets the change date and time of the specified directory.</summary>
            <returns>A <see cref="T:System.DateTime"/> structure set to the change date and time for the specified directory. This value is expressed in local time.</returns>
            <param name="path">The directory for which to obtain creation date and time information.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetChangeTime(System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Gets the change date and time of the specified directory.</summary>
            <returns>A <see cref="T:System.DateTime"/> structure set to the change date and time for the specified directory. This value is expressed in local time.</returns>
            <param name="path">The directory for which to obtain creation date and time information.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetChangeTimeUtc(System.String)">
            <summary>[AlphaFS] Gets the change date and time, in Coordinated Universal Time (UTC) format, of the specified directory.</summary>
            <returns>A <see cref="T:System.DateTime"/> structure set to the change date and time for the specified directory. This value is expressed in UTC time.</returns>
            <param name="path">The file for which to obtain change date and time information, in Coordinated Universal Time (UTC) format.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetChangeTimeUtc(System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Gets the change date and time, in Coordinated Universal Time (UTC) format, of the specified directory.</summary>
            <returns>A <see cref="T:System.DateTime"/> structure set to the change date and time for the specified directory. This value is expressed in UTC time.</returns>
            <param name="path">The file for which to obtain change date and time information, in Coordinated Universal Time (UTC) format.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetChangeTime(Microsoft.Win32.SafeHandles.SafeFileHandle)">
            <summary>[AlphaFS] Gets the change date and time of the specified directory.</summary>
            <returns>A <see cref="T:System.DateTime"/> structure set to the change date and time for the specified directory. This value is expressed in local time.</returns>
            <param name="safeHandle">An open handle to the directory from which to retrieve information.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetChangeTimeUtc(Microsoft.Win32.SafeHandles.SafeFileHandle)">
            <summary>[AlphaFS] Gets the change date and time, in Coordinated Universal Time (UTC) format, of the specified directory.</summary>
            <returns>A <see cref="T:System.DateTime"/> structure set to the change date and time for the specified directory. This value is expressed in UTC time.</returns>
            <param name="safeHandle">An open handle to the directory from which to retrieve information.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetChangeTimeTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>[AlphaFS] Gets the change date and time of the specified directory.</summary>
            <returns>A <see cref="T:System.DateTime"/> structure set to the change date and time for the specified directory. This value is expressed in local time.</returns>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory for which to obtain creation date and time information.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetChangeTimeTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Gets the change date and time of the specified directory.</summary>
            <returns>A <see cref="T:System.DateTime"/> structure set to the change date and time for the specified directory. This value is expressed in local time.</returns>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory for which to obtain creation date and time information.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetChangeTimeUtcTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>[AlphaFS] Gets the change date and time, in Coordinated Universal Time (UTC) format, of the specified directory.</summary>
            <returns>A <see cref="T:System.DateTime"/> structure set to the change date and time for the specified directory. This value is expressed in UTC time.</returns>
            <param name="transaction">The transaction.</param>
            <param name="path">The file for which to obtain change date and time information, in Coordinated Universal Time (UTC) format.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetChangeTimeUtcTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Gets the change date and time, in Coordinated Universal Time (UTC) format, of the specified directory.</summary>
            <returns>A <see cref="T:System.DateTime"/> structure set to the change date and time for the specified directory. This value is expressed in UTC time.</returns>
            <param name="transaction">The transaction.</param>
            <param name="path">The file for which to obtain change date and time information, in Coordinated Universal Time (UTC) format.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetCurrentDirectory">
            <summary>
            Gets the current working directory of the application.
            <para>
              MSDN: Multithreaded applications and shared library code should not use the GetCurrentDirectory function and should avoid using relative path names.
              The current directory state written by the SetCurrentDirectory function is stored as a global variable in each process,
              therefore multithreaded applications cannot reliably use this value without possible data corruption from other threads that may also be reading or setting this value.
              <para>This limitation also applies to the SetCurrentDirectory and GetFullPathName functions. The exception being when the application is guaranteed to be running in a single thread,
              for example parsing file names from the command line argument string in the main thread prior to creating any additional threads.</para>
              <para>Using relative path names in multithreaded applications or shared library code can yield unpredictable results and is not supported.</para>
            </para>
            </summary>
            <returns>The path of the current working directory without a trailing directory separator.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.SetCurrentDirectory(System.String)">
            <summary>
            Sets the application's current working directory to the specified directory.
            <para>
              MSDN: Multithreaded applications and shared library code should not use the GetCurrentDirectory function and should avoid using relative path names.
              The current directory state written by the SetCurrentDirectory function is stored as a global variable in each process,
              therefore multithreaded applications cannot reliably use this value without possible data corruption from other threads that may also be reading or setting this value.
              <para>This limitation also applies to the SetCurrentDirectory and GetFullPathName functions. The exception being when the application is guaranteed to be running in a single thread,
              for example parsing file names from the command line argument string in the main thread prior to creating any additional threads.</para>
              <para>Using relative path names in multithreaded applications or shared library code can yield unpredictable results and is not supported.</para>
            </para>
            </summary>
            <param name="path">The path to which the current working directory is set.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.SetCurrentDirectory(System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>
            Sets the application's current working directory to the specified directory.
            <para>
              MSDN: Multithreaded applications and shared library code should not use the GetCurrentDirectory function and should avoid using relative path names.
              The current directory state written by the SetCurrentDirectory function is stored as a global variable in each process,
              therefore multithreaded applications cannot reliably use this value without possible data corruption from other threads that may also be reading or setting this value.
              <para>This limitation also applies to the SetCurrentDirectory and GetFullPathName functions. The exception being when the application is guaranteed to be running in a single thread,
              for example parsing file names from the command line argument string in the main thread prior to creating any additional threads.</para>
              <para>Using relative path names in multithreaded applications or shared library code can yield unpredictable results and is not supported.</para>
            </para>
            </summary>
            <param name="path">The path to which the current working directory is set.</param>
            <param name="pathFormat">Indicates the format of the path parameter.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetFileSystemEntries(System.String)">
            <summary>Returns the names of all files and subdirectories in the specified directory.</summary>
            <returns>An string[] array of the names of files and subdirectories in the specified directory.</returns>
            <remarks>
              <para>The EnumerateFileSystemEntries and GetFileSystemEntries methods differ as follows: When you use EnumerateFileSystemEntries,
                you can start enumerating the collection of entries before the whole collection is returned; when you use GetFileSystemEntries,
                you must wait for the whole array of entries to be returned before you can access the array.
                Therefore, when you are working with many files and directories, EnumerateFiles can be more efficient.
              </para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="path">The directory for which file and subdirectory names are returned.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetFileSystemEntries(System.String,System.String)">
            <summary>Returns an array of file system entries that match the specified search criteria.</summary>
            <returns>An string[] array of file system entries that match the specified search criteria.</returns>
            <remarks>
              <para>The EnumerateFileSystemEntries and GetFileSystemEntries methods differ as follows: When you use EnumerateFileSystemEntries,
                you can start enumerating the collection of entries before the whole collection is returned; when you use GetFileSystemEntries,
                you must wait for the whole array of entries to be returned before you can access the array.
                Therefore, when you are working with many files and directories, EnumerateFiles can be more efficient.
              </para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="path">The path to be searched.</param>
            <param name="searchPattern">
              The search string to match against the names of directories in <paramref name="path"/>.
              This parameter can contain a combination of valid literal path and wildcard
              (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/> and <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>) characters, but does not support regular expressions.
            </param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetFileSystemEntries(System.String,System.String,System.IO.SearchOption)">
            <summary>Gets an array of all the file names and directory names that match a <paramref name="searchPattern"/> in a specified path, and optionally searches subdirectories.</summary>
            <returns>An string[] array of file system entries that match the specified search criteria.</returns>
            <remarks>
              <para>The EnumerateFileSystemEntries and GetFileSystemEntries methods differ as follows: When you use EnumerateFileSystemEntries,
                you can start enumerating the collection of entries before the whole collection is returned; when you use GetFileSystemEntries,
                you must wait for the whole array of entries to be returned before you can access the array.
                Therefore, when you are working with many files and directories, EnumerateFiles can be more efficient.
              </para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">
              The search string to match against the names of directories in <paramref name="path"/>.
              This parameter can contain a combination of valid literal path and wildcard
              (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/> and <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>) characters, but does not support regular expressions.
            </param>
            <param name="searchOption">
              One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the <paramref name="searchOption"/>
              should include only the current directory or should include all subdirectories.
            </param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetFileSystemEntriesTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>Returns the names of all files and subdirectories in the specified directory.</summary>
            <returns>An string[] array of the names of files and subdirectories in the specified directory.</returns>
            <remarks>
              <para>The EnumerateFileSystemEntries and GetFileSystemEntries methods differ as follows: When you use EnumerateFileSystemEntries,
                you can start enumerating the collection of entries before the whole collection is returned; when you use GetFileSystemEntries,
                you must wait for the whole array of entries to be returned before you can access the array.
                Therefore, when you are working with many files and directories, EnumerateFiles can be more efficient.
              </para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory for which file and subdirectory names are returned.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetFileSystemEntriesTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String)">
            <summary>Returns an array of file system entries that match the specified search criteria.</summary>
            <returns>An string[] array of file system entries that match the specified search criteria.</returns>
            <remarks>
              <para>The EnumerateFileSystemEntries and GetFileSystemEntries methods differ as follows: When you use EnumerateFileSystemEntries,
                you can start enumerating the collection of entries before the whole collection is returned; when you use GetFileSystemEntries,
                you must wait for the whole array of entries to be returned before you can access the array.
                Therefore, when you are working with many files and directories, EnumerateFiles can be more efficient.
              </para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="transaction">The transaction.</param>
            <param name="path">The path to be searched.</param>
            <param name="searchPattern">
              The search string to match against the names of directories in <paramref name="path"/>.
              This parameter can contain a combination of valid literal path and wildcard
              (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/> and <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>) characters, but does not support regular expressions.
            </param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetFileSystemEntriesTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,System.IO.SearchOption)">
            <summary>Gets an array of all the file names and directory names that match a <paramref name="searchPattern"/> in a specified path, and optionally searches subdirectories.</summary>
            <returns>An string[] array of file system entries that match the specified search criteria.</returns>
            <remarks>
              <para>The EnumerateFileSystemEntries and GetFileSystemEntries methods differ as follows: When you use EnumerateFileSystemEntries,
                you can start enumerating the collection of entries before the whole collection is returned; when you use GetFileSystemEntries,
                you must wait for the whole array of entries to be returned before you can access the array.
                Therefore, when you are working with many files and directories, EnumerateFiles can be more efficient.
              </para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">
              The search string to match against the names of directories in <paramref name="path"/>.
              This parameter can contain a combination of valid literal path and wildcard
              (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/> and <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>) characters, but does not support regular expressions.
            </param>
            <param name="searchOption">
              One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the <paramref name="searchOption"/>
              should include only the current directory or should include all subdirectories.
            </param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetDirectoryRoot(System.String)">
            <summary>Returns the volume information, root information, or both for the specified path.</summary>
            <returns>The volume information, root information, or both for the specified path, or <see langword="null"/> if <paramref name="path"/> path does not contain root directory information.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.NotSupportedException"/>
            <param name="path">The path of a file or directory.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetDirectoryRoot(System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>Returns the volume information, root information, or both for the specified path.</summary>
            <returns>The volume information, root information, or both for the specified path, or <see langword="null"/> if <paramref name="path"/> path does not contain root directory information.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.NotSupportedException"/>
            <param name="path">The path of a file or directory.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetDirectoryRootTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>[AlphaFS] Returns the volume information, root information, or both for the specified path.</summary>
            <returns>The volume information, root information, or both for the specified path, or <see langword="null"/> if <paramref name="path"/> path does not contain root directory information.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.NotSupportedException"/>
            <param name="transaction">The transaction.</param>
            <param name="path">The path of a file or directory.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetDirectoryRootTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>Returns the volume information, root information, or both for the specified path.</summary>
            <returns>The volume information, root information, or both for the specified path, or <see langword="null"/> if <paramref name="path"/> path does not contain root directory information.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.NotSupportedException"/>
            <param name="transaction">The transaction.</param>
            <param name="path">The path of a file or directory.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetDirectoryRootCore(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>Returns the volume information, root information, or both for the specified path.</summary>
            <returns>The volume information, root information, or both for the specified path, or <see langword="null"/> if <paramref name="path"/> path does not contain root directory information.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.NotSupportedException"/>
            <param name="transaction">The transaction.</param>
            <param name="path">The path of a file or directory.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetLogicalDrives">
            <summary>Retrieves the names of the logical drives on this computer in the form "&lt;drive letter&gt;:\".</summary>
            <returns>An array of type <see cref="T:System.String"/> that represents the logical drives on a computer.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetLogicalDrives(System.Boolean,System.Boolean)">
            <summary>[AlphaFS] Retrieves the names of the logical drives on this computer in the form "&lt;drive letter&gt;:\".</summary>
            <returns>An array of type <see cref="T:System.String"/> that represents the logical drives on a computer.</returns>
            <param name="fromEnvironment">Retrieve logical drives as known by the Environment.</param>
            <param name="isReady">Retrieve only when accessible (IsReady) logical drives.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateLogicalDrives(System.Boolean,System.Boolean)">
            <summary>[AlphaFS] Enumerates the drive names of all logical drives on a computer.</summary>
            <returns>An IEnumerable of type <see cref="T:Alphaleonis.Win32.Filesystem.DriveInfo"/> that represents the logical drives on a computer.</returns>
            <param name="fromEnvironment">Retrieve logical drives as known by the Environment.</param>
            <param name="isReady">Retrieve only when accessible (IsReady) logical drives.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateLogicalDrivesCore(System.Boolean,System.Boolean)">
            <summary>Enumerates the drive names of all logical drives on a computer.</summary>
            <returns>An IEnumerable of type <see cref="T:Alphaleonis.Win32.Filesystem.DriveInfo"/> that represents the logical drives on a computer.</returns>
            <param name="fromEnvironment">Retrieve logical drives as known by the Environment.</param>
            <param name="isReady">Retrieve only when accessible (IsReady) logical drives.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetParent(System.String)">
            <summary>Retrieves the parent directory of the specified path, including both absolute and relative paths.</summary>
            <param name="path">The path for which to retrieve the parent directory.</param>
            <returns>The parent directory, or <see langword="null"/> if <paramref name="path"/> is the root directory, including the root of a UNC server or share name.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetParent(System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Retrieves the parent directory of the specified path, including both absolute and relative paths.</summary>
            <returns>The parent directory, or <see langword="null"/> if <paramref name="path"/> is the root directory, including the root of a UNC server or share name.</returns>
            <param name="path">The path for which to retrieve the parent directory.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetParentTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>[AlphaFS] Retrieves the parent directory of the specified path, including both absolute and relative paths.</summary>
            <returns>The parent directory, or <see langword="null"/> if <paramref name="path"/> is the root directory, including the root of a UNC server or share name.</returns>
            <param name="transaction">The transaction.</param>
            <param name="path">The path for which to retrieve the parent directory.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetParentTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>Retrieves the parent directory of the specified path, including both absolute and relative paths.</summary>
            <returns>The parent directory, or <see langword="null"/> if <paramref name="path"/> is the root directory, including the root of a UNC server or share name.</returns>
            <param name="transaction">The transaction.</param>
            <param name="path">The path for which to retrieve the parent directory.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetParentCore(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>Retrieves the parent directory of the specified path, including both absolute and relative paths.</summary>
            <returns>The parent directory, or <see langword="null"/> if <paramref name="path"/> is the root directory, including the root of a UNC server or share name.</returns>
            <param name="transaction">The transaction.</param>
            <param name="path">The path for which to retrieve the parent directory.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.SetAccessControl(System.String,System.Security.AccessControl.DirectorySecurity)">
            <summary>Applies access control list (ACL) entries described by a <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object to the specified directory.</summary>
            <param name="path">A directory to add or remove access control list (ACL) entries from.</param>
            <param name="directorySecurity">A <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object that describes an ACL entry to apply to the directory described by the path parameter.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.SetAccessControl(System.String,System.Security.AccessControl.DirectorySecurity,System.Security.AccessControl.AccessControlSections)">
            <summary>Applies access control list (ACL) entries described by a <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object to the specified directory.</summary>
            <remarks>Note that unlike <see cref="M:System.IO.File.SetAccessControl(System.String,System.Security.AccessControl.FileSecurity)"/> this method does <b>not</b> automatically
            determine what parts of the specified <see cref="T:System.Security.AccessControl.DirectorySecurity"/> instance has been modified. Instead, the
            parameter <paramref name="includeSections"/> is used to specify what entries from <paramref name="directorySecurity"/> to apply to <paramref name="path"/>.</remarks>
            <param name="path">A directory to add or remove access control list (ACL) entries from.</param>
            <param name="directorySecurity">A <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object that describes an ACL entry to apply to the directory described by the path parameter.</param>
            <param name="includeSections">One or more of the <see cref="T:System.Security.AccessControl.AccessControlSections"/> values that specifies the type of access control list (ACL) information to set.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.SetAccessControl(System.String,System.Security.AccessControl.DirectorySecurity,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Applies access control list (ACL) entries described by a <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object to the specified directory.</summary>
            <param name="path">A directory to add or remove access control list (ACL) entries from.</param>
            <param name="directorySecurity">A <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object that describes an ACL entry to apply to the directory described by the path parameter.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.SetAccessControl(System.String,System.Security.AccessControl.DirectorySecurity,System.Security.AccessControl.AccessControlSections,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Applies access control list (ACL) entries described by a <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object to the specified directory.</summary>
            <remarks>Note that unlike <see cref="M:System.IO.File.SetAccessControl(System.String,System.Security.AccessControl.FileSecurity)"/> this method does <b>not</b> automatically
            determine what parts of the specified <see cref="T:System.Security.AccessControl.DirectorySecurity"/> instance has been modified. Instead, the
            parameter <paramref name="includeSections"/> is used to specify what entries from <paramref name="directorySecurity"/> to apply to <paramref name="path"/>.</remarks>
            <param name="path">A directory to add or remove access control list (ACL) entries from.</param>
            <param name="directorySecurity">A <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object that describes an ACL entry to apply to the directory described by the path parameter.</param>
            <param name="includeSections">One or more of the <see cref="T:System.Security.AccessControl.AccessControlSections"/> values that specifies the type of access control list (ACL) information to set.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.SetAccessControl(Microsoft.Win32.SafeHandles.SafeFileHandle,System.Security.AccessControl.DirectorySecurity)">
            <summary>Applies access control list (ACL) entries described by a <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object to the specified directory.</summary>
            <param name="handle">A <see cref="T:Microsoft.Win32.SafeHandles.SafeFileHandle"/> to a file to add or remove access control list (ACL) entries from.</param>
            <param name="directorySecurity">A <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object that describes an ACL entry to apply to the directory described by the path parameter.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.SetAccessControl(Microsoft.Win32.SafeHandles.SafeFileHandle,System.Security.AccessControl.DirectorySecurity,System.Security.AccessControl.AccessControlSections)">
            <summary>Applies access control list (ACL) entries described by a <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object to the specified directory.</summary>
            <param name="handle">A <see cref="T:Microsoft.Win32.SafeHandles.SafeFileHandle"/> to a file to add or remove access control list (ACL) entries from.</param>
            <param name="directorySecurity">A <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object that describes an ACL entry to apply to the directory described by the path parameter.</param>
            <param name="includeSections">One or more of the <see cref="T:System.Security.AccessControl.AccessControlSections"/> values that specifies the type of access control list (ACL) information to set.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.SetCreationTime(System.String,System.DateTime)">
            <summary>Sets the date and time the directory was created.</summary>
            <param name="path">The directory for which to set the creation date and time information.</param>
            <param name="creationTime">A <see cref="T:System.DateTime"/> containing the value to set for the creation date and time of <paramref name="path"/>. This value is expressed in local time.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.SetCreationTimeUtc(System.String,System.DateTime)">
            <summary>Sets the date and time, in coordinated universal time (UTC), that the directory was created.</summary>
            <param name="path">The directory for which to set the creation date and time information.</param>
            <param name="creationTimeUtc">A <see cref="T:System.DateTime"/> containing the value to set for the creation date and time of <paramref name="path"/>. This value is expressed in UTC time.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.SetCreationTime(System.String,System.DateTime,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Sets the date and time the directory was created.</summary>
            <param name="path">The directory for which to set the creation date and time information.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
            <param name="creationTime">A <see cref="T:System.DateTime"/> containing the value to set for the creation date and time of <paramref name="path"/>. This value is expressed in local time.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.SetCreationTime(System.String,System.DateTime,System.Boolean,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Sets the date and time the directory was created.</summary>
            <param name="path">The directory for which to set the creation date and time information.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
            <param name="creationTime">A <see cref="T:System.DateTime"/> containing the value to set for the creation date and time of <paramref name="path"/>. This value is expressed in local time.</param>
            <param name="modifyReparsePoint">If <see langword="true"/>, the date and time information will apply to the reparse point (symlink or junction) and not the file or directory linked to. No effect if <paramref name="path"/> does not refer to a reparse point.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.SetCreationTimeUtc(System.String,System.DateTime,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Sets the date and time, in coordinated universal time (UTC), that the directory was created.</summary>
            <param name="path">The directory for which to set the creation date and time information.</param>
            <param name="creationTimeUtc">A <see cref="T:System.DateTime"/> containing the value to set for the creation date and time of <paramref name="path"/>. This value is expressed in UTC time.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.SetCreationTimeUtc(System.String,System.DateTime,System.Boolean,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Sets the date and time, in coordinated universal time (UTC), that the directory was created.</summary>
            <param name="path">The directory for which to set the creation date and time information.</param>
            <param name="creationTimeUtc">A <see cref="T:System.DateTime"/> containing the value to set for the creation date and time of <paramref name="path"/>. This value is expressed in UTC time.</param>
            <param name="modifyReparsePoint">If <see langword="true"/>, the date and time information will apply to the reparse point (symlink or junction) and not the file or directory linked to. No effect if <paramref name="path"/> does not refer to a reparse point.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.SetCreationTimeTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.DateTime)">
            <summary>[AlphaFS] Sets the date and time the directory was created.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory for which to set the creation date and time information.</param>
            <param name="creationTime">A <see cref="T:System.DateTime"/> containing the value to set for the creation date and time of <paramref name="path"/>. This value is expressed in local time.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.SetCreationTimeTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.DateTime,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Sets the date and time the directory was created.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory for which to set the creation date and time information.</param>
            <param name="creationTime">A <see cref="T:System.DateTime"/> containing the value to set for the creation date and time of <paramref name="path"/>. This value is expressed in local time.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.SetCreationTimeTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.DateTime,System.Boolean,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Sets the date and time the directory was created.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory for which to set the creation date and time information.</param>
            <param name="creationTime">A <see cref="T:System.DateTime"/> containing the value to set for the creation date and time of <paramref name="path"/>. This value is expressed in local time.</param>
            <param name="modifyReparsePoint">If <see langword="true"/>, the date and time information will apply to the reparse point (symlink or junction) and not the file or directory linked to. No effect if <paramref name="path"/> does not refer to a reparse point.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.SetCreationTimeUtcTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.DateTime)">
            <summary>[AlphaFS] Sets the date and time, in coordinated universal time (UTC), that the directory was created.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory for which to set the creation date and time information.</param>
            <param name="creationTimeUtc">A <see cref="T:System.DateTime"/> containing the value to set for the creation date and time of <paramref name="path"/>. This value is expressed in UTC time.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.SetCreationTimeUtcTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.DateTime,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Sets the date and time, in coordinated universal time (UTC), that the directory was created.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory for which to set the creation date and time information.</param>
            <param name="creationTimeUtc">A <see cref="T:System.DateTime"/> containing the value to set for the creation date and time of <paramref name="path"/>. This value is expressed in UTC time.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.SetCreationTimeUtcTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.DateTime,System.Boolean,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Sets the date and time, in coordinated universal time (UTC), that the directory was created.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory for which to set the creation date and time information.</param>
            <param name="creationTimeUtc">A <see cref="T:System.DateTime"/> containing the value to set for the creation date and time of <paramref name="path"/>. This value is expressed in UTC time.</param>
            <param name="modifyReparsePoint">If <see langword="true"/>, the date and time information will apply to the reparse point (symlink or junction) and not the file or directory linked to. No effect if <paramref name="path"/> does not refer to a reparse point.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.SetLastAccessTime(System.String,System.DateTime)">
            <summary>Sets the date and time that the specified directory was last accessed.</summary>
            <param name="path">The file for which to set the access date and time information.</param>
            <param name="lastAccessTime">A <see cref="T:System.DateTime"/> containing the value to set for the last access date and time of <paramref name="path"/>. This value is expressed in local time.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.SetLastAccessTimeUtc(System.String,System.DateTime)">
            <summary>Sets the date and time, in coordinated universal time (UTC), that the specified directory was last accessed.</summary>
            <param name="path">The directory for which to set the access date and time information.</param>
            <param name="lastAccessTimeUtc">A <see cref="T:System.DateTime"/> containing the value to set for the last access date and time of <paramref name="path"/>. This value is expressed in UTC time.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.SetLastAccessTime(System.String,System.DateTime,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Sets the date and time that the specified directory was last accessed.</summary>
            <param name="path">The file for which to set the access date and time information.</param>
            <param name="lastAccessTime">A <see cref="T:System.DateTime"/> containing the value to set for the last access date and time of <paramref name="path"/>. This value is expressed in local time.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.SetLastAccessTime(System.String,System.DateTime,System.Boolean,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Sets the date and time that the specified directory was last accessed.</summary>
            <param name="path">The file for which to set the access date and time information.</param>
            <param name="lastAccessTime">A <see cref="T:System.DateTime"/> containing the value to set for the last access date and time of <paramref name="path"/>. This value is expressed in local time.</param>
            <param name="modifyReparsePoint">If <see langword="true"/>, the date and time information will apply to the reparse point (symlink or junction) and not the file or directory linked to. No effect if <paramref name="path"/> does not refer to a reparse point.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.SetLastAccessTimeUtc(System.String,System.DateTime,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Sets the date and time, in coordinated universal time (UTC), that the specified directory was last accessed.</summary>
            <param name="path">The directory for which to set the access date and time information.</param>
            <param name="lastAccessTimeUtc">A <see cref="T:System.DateTime"/> containing the value to set for the last access date and time of <paramref name="path"/>. This value is expressed in UTC time.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.SetLastAccessTimeUtc(System.String,System.DateTime,System.Boolean,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Sets the date and time, in coordinated universal time (UTC), that the specified directory was last accessed.</summary>
            <param name="path">The directory for which to set the access date and time information.</param>
            <param name="lastAccessTimeUtc">A <see cref="T:System.DateTime"/> containing the value to set for the last access date and time of <paramref name="path"/>. This value is expressed in UTC time.</param>
            <param name="modifyReparsePoint">If <see langword="true"/>, the date and time information will apply to the reparse point (symlink or junction) and not the file or directory linked to. No effect if <paramref name="path"/> does not refer to a reparse point.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.SetLastAccessTimeTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.DateTime)">
            <summary>[AlphaFS] Sets the date and time that the specified directory was last accessed.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory for which to set the access date and time information.</param>
            <param name="lastAccessTime">A <see cref="T:System.DateTime"/> containing the value to set for the last access date and time of <paramref name="path"/>. This value is expressed in local time.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.SetLastAccessTimeTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.DateTime,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Sets the date and time that the specified directory was last accessed.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory for which to set the access date and time information.</param>
            <param name="lastAccessTime">A <see cref="T:System.DateTime"/> containing the value to set for the last access date and time of <paramref name="path"/>. This value is expressed in local time.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.SetLastAccessTimeTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.DateTime,System.Boolean,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Sets the date and time that the specified directory was last accessed.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory for which to set the access date and time information.</param>
            <param name="lastAccessTime">A <see cref="T:System.DateTime"/> containing the value to set for the last access date and time of <paramref name="path"/>. This value is expressed in local time.</param>
            <param name="modifyReparsePoint">If <see langword="true"/>, the date and time information will apply to the reparse point (symlink or junction) and not the file or directory linked to. No effect if <paramref name="path"/> does not refer to a reparse point.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.SetLastAccessTimeUtcTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.DateTime)">
            <summary>[AlphaFS] Sets the date and time, in coordinated universal time (UTC), that the specified directory was last accessed.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory for which to set the access date and time information.</param>
            <param name="lastAccessTimeUtc">A <see cref="T:System.DateTime"/> containing the value to set for the last access date and time of <paramref name="path"/>. This value is expressed in UTC time.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.SetLastAccessTimeUtcTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.DateTime,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Sets the date and time, in coordinated universal time (UTC), that the specified directory was last accessed.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory for which to set the access date and time information.</param>
            <param name="lastAccessTimeUtc">A <see cref="T:System.DateTime"/> containing the value to set for the last access date and time of <paramref name="path"/>. This value is expressed in UTC time.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.SetLastAccessTimeUtcTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.DateTime,System.Boolean,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Sets the date and time, in coordinated universal time (UTC), that the specified directory was last accessed.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory for which to set the access date and time information.</param>
            <param name="lastAccessTimeUtc">A <see cref="T:System.DateTime"/> containing the value to set for the last access date and time of <paramref name="path"/>. This value is expressed in UTC time.</param>
            <param name="modifyReparsePoint">If <see langword="true"/>, the date and time information will apply to the reparse point (symlink or junction) and not the file or directory linked to. No effect if <paramref name="path"/> does not refer to a reparse point.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.SetTimestamps(System.String,System.DateTime,System.DateTime,System.DateTime)">
            <summary>[AlphaFS] Sets all the date and time stamps for the specified directory, at once.</summary>
            <param name="path">The directory for which to set the dates and times information.</param>
            <param name="creationTime">A <see cref="T:System.DateTime"/> containing the value to set for the creation date and time of <paramref name="path"/>. This value is expressed in local time.</param>
            <param name="lastAccessTime">A <see cref="T:System.DateTime"/> containing the value to set for the last access date and time of <paramref name="path"/>. This value is expressed in local time.</param>
            <param name="lastWriteTime">A <see cref="T:System.DateTime"/> containing the value to set for the last write date and time of <paramref name="path"/>. This value is expressed in local time.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.SetTimestamps(System.String,System.DateTime,System.DateTime,System.DateTime,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Sets all the date and time stamps for the specified directory, at once.</summary>
            <param name="path">The directory for which to set the dates and times information.</param>
            <param name="creationTime">A <see cref="T:System.DateTime"/> containing the value to set for the creation date and time of <paramref name="path"/>. This value is expressed in local time.</param>
            <param name="lastAccessTime">A <see cref="T:System.DateTime"/> containing the value to set for the last access date and time of <paramref name="path"/>. This value is expressed in local time.</param>
            <param name="lastWriteTime">A <see cref="T:System.DateTime"/> containing the value to set for the last write date and time of <paramref name="path"/>. This value is expressed in local time.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.SetTimestamps(System.String,System.DateTime,System.DateTime,System.DateTime,System.Boolean,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Sets all the date and time stamps for the specified directory, at once.</summary>
            <param name="path">The directory for which to set the dates and times information.</param>
            <param name="creationTime">A <see cref="T:System.DateTime"/> containing the value to set for the creation date and time of <paramref name="path"/>. This value is expressed in local time.</param>
            <param name="lastAccessTime">A <see cref="T:System.DateTime"/> containing the value to set for the last access date and time of <paramref name="path"/>. This value is expressed in local time.</param>
            <param name="lastWriteTime">A <see cref="T:System.DateTime"/> containing the value to set for the last write date and time of <paramref name="path"/>. This value is expressed in local time.</param>
            <param name="modifyReparsePoint">If <see langword="true"/>, the date and time information will apply to the reparse point (symlink or junction) and not the file or directory linked to. No effect if <paramref name="path"/> does not refer to a reparse point.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.SetTimestampsUtc(System.String,System.DateTime,System.DateTime,System.DateTime)">
            <summary>[AlphaFS] Sets all the date and time stamps, in coordinated universal time (UTC), for the specified directory, at once.</summary>
            <param name="path">The directory for which to set the dates and times information.</param>
            <param name="creationTimeUtc">A <see cref="T:System.DateTime"/> containing the value to set for the creation date and time of <paramref name="path"/>. This value is expressed in UTC time.</param>
            <param name="lastAccessTimeUtc">A <see cref="T:System.DateTime"/> containing the value to set for the last access date and time of <paramref name="path"/>. This value is expressed in UTC time.</param>
            <param name="lastWriteTimeUtc">A <see cref="T:System.DateTime"/> containing the value to set for the last write date and time of <paramref name="path"/>. This value is expressed in UTC time.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.SetTimestampsUtc(System.String,System.DateTime,System.DateTime,System.DateTime,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Sets all the date and time stamps, in coordinated universal time (UTC), for the specified directory, at once.</summary>
            <param name="path">The directory for which to set the dates and times information.</param>
            <param name="creationTimeUtc">A <see cref="T:System.DateTime"/> containing the value to set for the creation date and time of <paramref name="path"/>. This value is expressed in UTC time.</param>
            <param name="lastAccessTimeUtc">A <see cref="T:System.DateTime"/> containing the value to set for the last access date and time of <paramref name="path"/>. This value is expressed in UTC time.</param>
            <param name="lastWriteTimeUtc">A <see cref="T:System.DateTime"/> containing the value to set for the last write date and time of <paramref name="path"/>. This value is expressed in UTC time.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.SetTimestampsUtc(System.String,System.DateTime,System.DateTime,System.DateTime,System.Boolean,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Sets all the date and time stamps, in coordinated universal time (UTC), for the specified directory, at once.</summary>
            <param name="path">The directory for which to set the dates and times information.</param>
            <param name="creationTimeUtc">A <see cref="T:System.DateTime"/> containing the value to set for the creation date and time of <paramref name="path"/>. This value is expressed in UTC time.</param>
            <param name="lastAccessTimeUtc">A <see cref="T:System.DateTime"/> containing the value to set for the last access date and time of <paramref name="path"/>. This value is expressed in UTC time.</param>
            <param name="lastWriteTimeUtc">A <see cref="T:System.DateTime"/> containing the value to set for the last write date and time of <paramref name="path"/>. This value is expressed in UTC time.</param>
            <param name="modifyReparsePoint">If <see langword="true"/>, the date and time information will apply to the reparse point (symlink or junction) and not the file or directory linked to. No effect if <paramref name="path"/> does not refer to a reparse point.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.SetTimestampsTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.DateTime,System.DateTime,System.DateTime)">
            <summary>[AlphaFS] Sets all the date and time stamps for the specified directory, at once.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory for which to set the dates and times information.</param>
            <param name="creationTime">A <see cref="T:System.DateTime"/> containing the value to set for the creation date and time of <paramref name="path"/>. This value is expressed in local time.</param>
            <param name="lastAccessTime">A <see cref="T:System.DateTime"/> containing the value to set for the last access date and time of <paramref name="path"/>. This value is expressed in local time.</param>
            <param name="lastWriteTime">A <see cref="T:System.DateTime"/> containing the value to set for the last write date and time of <paramref name="path"/>. This value is expressed in local time.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.SetTimestampsTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.DateTime,System.DateTime,System.DateTime,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Sets all the date and time stamps for the specified directory, at once.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory for which to set the dates and times information.</param>
            <param name="creationTime">A <see cref="T:System.DateTime"/> containing the value to set for the creation date and time of <paramref name="path"/>. This value is expressed in local time.</param>
            <param name="lastAccessTime">A <see cref="T:System.DateTime"/> containing the value to set for the last access date and time of <paramref name="path"/>. This value is expressed in local time.</param>
            <param name="lastWriteTime">A <see cref="T:System.DateTime"/> containing the value to set for the last write date and time of <paramref name="path"/>. This value is expressed in local time.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.SetTimestampsTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.DateTime,System.DateTime,System.DateTime,System.Boolean,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Sets all the date and time stamps for the specified directory, at once.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory for which to set the dates and times information.</param>
            <param name="creationTime">A <see cref="T:System.DateTime"/> containing the value to set for the creation date and time of <paramref name="path"/>. This value is expressed in local time.</param>
            <param name="lastAccessTime">A <see cref="T:System.DateTime"/> containing the value to set for the last access date and time of <paramref name="path"/>. This value is expressed in local time.</param>
            <param name="lastWriteTime">A <see cref="T:System.DateTime"/> containing the value to set for the last write date and time of <paramref name="path"/>. This value is expressed in local time.</param>
            <param name="modifyReparsePoint">If <see langword="true"/>, the date and time information will apply to the reparse point (symlink or junction) and not the file or directory linked to. No effect if <paramref name="path"/> does not refer to a reparse point.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.SetTimestampsUtcTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.DateTime,System.DateTime,System.DateTime)">
            <summary>[AlphaFS] Sets all the date and time stamps, in coordinated universal time (UTC), for the specified directory, at once.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory for which to set the dates and times information.</param>
            <param name="creationTimeUtc">A <see cref="T:System.DateTime"/> containing the value to set for the creation date and time of <paramref name="path"/>. This value is expressed in UTC time.</param>
            <param name="lastAccessTimeUtc">A <see cref="T:System.DateTime"/> containing the value to set for the last access date and time of <paramref name="path"/>. This value is expressed in UTC time.</param>
            <param name="lastWriteTimeUtc">A <see cref="T:System.DateTime"/> containing the value to set for the last write date and time of <paramref name="path"/>. This value is expressed in UTC time.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.SetTimestampsUtcTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.DateTime,System.DateTime,System.DateTime,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Sets all the date and time stamps, in coordinated universal time (UTC), for the specified directory, at once.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory for which to set the dates and times information.</param>
            <param name="creationTimeUtc">A <see cref="T:System.DateTime"/> containing the value to set for the creation date and time of <paramref name="path"/>. This value is expressed in UTC time.</param>
            <param name="lastAccessTimeUtc">A <see cref="T:System.DateTime"/> containing the value to set for the last access date and time of <paramref name="path"/>. This value is expressed in UTC time.</param>
            <param name="lastWriteTimeUtc">A <see cref="T:System.DateTime"/> containing the value to set for the last write date and time of <paramref name="path"/>. This value is expressed in UTC time.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.SetTimestampsUtcTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.DateTime,System.DateTime,System.DateTime,System.Boolean,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Sets all the date and time stamps, in coordinated universal time (UTC), for the specified directory, at once.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory for which to set the dates and times information.</param>
            <param name="creationTimeUtc">A <see cref="T:System.DateTime"/> containing the value to set for the creation date and time of <paramref name="path"/>. This value is expressed in UTC time.</param>
            <param name="lastAccessTimeUtc">A <see cref="T:System.DateTime"/> containing the value to set for the last access date and time of <paramref name="path"/>. This value is expressed in UTC time.</param>
            <param name="lastWriteTimeUtc">A <see cref="T:System.DateTime"/> containing the value to set for the last write date and time of <paramref name="path"/>. This value is expressed in UTC time.</param>
            <param name="modifyReparsePoint">If <see langword="true"/>, the date and time information will apply to the reparse point (symlink or junction) and not the file or directory linked to. No effect if <paramref name="path"/> does not refer to a reparse point.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.TransferTimestamps(System.String,System.String)">
            <summary>[AlphaFS] Transfers the date and time stamps for the specified directories.</summary>
            <remarks>This method uses BackupSemantics flag to get Timestamp changed for directories.</remarks>
            <param name="sourcePath">The source directory to get the date and time stamps from.</param>
            <param name="destinationPath">The destination directory to set the date and time stamps.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.TransferTimestamps(System.String,System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Transfers the date and time stamps for the specified directories.</summary>
            <remarks>This method uses BackupSemantics flag to get Timestamp changed for directories.</remarks>
            <param name="sourcePath">The source directory to get the date and time stamps from.</param>
            <param name="destinationPath">The destination directory to set the date and time stamps.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.TransferTimestampsTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String)">
            <summary>[AlphaFS] Transfers the date and time stamps for the specified directories.</summary>
            <remarks>This method uses BackupSemantics flag to get Timestamp changed for directories.</remarks>
            <param name="transaction">The transaction.</param>
            <param name="sourcePath">The source directory to get the date and time stamps from.</param>
            <param name="destinationPath">The destination directory to set the date and time stamps.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.TransferTimestampsTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Transfers the date and time stamps for the specified directories.</summary>
            <remarks>This method uses BackupSemantics flag to get Timestamp changed for directories.</remarks>
            <param name="transaction">The transaction.</param>
            <param name="sourcePath">The source directory to get the date and time stamps from.</param>
            <param name="destinationPath">The destination directory to set the date and time stamps.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.SetLastWriteTime(System.String,System.DateTime)">
            <summary>Sets the date and time that the specified directory was last written to.</summary>
            <param name="path">The directory for which to set the date and time information.</param>
            <param name="lastWriteTime">A <see cref="T:System.DateTime"/> containing the value to set for the last write date and time of <paramref name="path"/>. This value is expressed in local time.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.SetLastWriteTimeUtc(System.String,System.DateTime)">
            <summary>Sets the date and time, in coordinated universal time (UTC), that the specified directory was last written to.</summary>
            <param name="path">The directory for which to set the date and time information.</param>
            <param name="lastWriteTimeUtc">A <see cref="T:System.DateTime"/> containing the value to set for the last write date and time of <paramref name="path"/>. This value is expressed in UTC time.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.SetLastWriteTime(System.String,System.DateTime,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Sets the date and time that the specified directory was last written to.</summary>
            <param name="path">The directory for which to set the date and time information.</param>
            <param name="lastWriteTime">A <see cref="T:System.DateTime"/> containing the value to set for the last write date and time of <paramref name="path"/>. This value is expressed in local time.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.SetLastWriteTime(System.String,System.DateTime,System.Boolean,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Sets the date and time that the specified directory was last written to.</summary>
            <param name="path">The directory for which to set the date and time information.</param>
            <param name="lastWriteTime">A <see cref="T:System.DateTime"/> containing the value to set for the last write date and time of <paramref name="path"/>. This value is expressed in local time.</param>
            <param name="modifyReparsePoint">If <see langword="true"/>, the date and time information will apply to the reparse point (symlink or junction) and not the file or directory linked to. No effect if <paramref name="path"/> does not refer to a reparse point.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.SetLastWriteTimeUtc(System.String,System.DateTime,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Sets the date and time, in coordinated universal time (UTC), that the specified directory was last written to.</summary>
            <param name="path">The directory for which to set the date and time information.</param>
            <param name="lastWriteTimeUtc">A <see cref="T:System.DateTime"/> containing the value to set for the last write date and time of <paramref name="path"/>. This value is expressed in UTC time.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.SetLastWriteTimeUtc(System.String,System.DateTime,System.Boolean,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Sets the date and time, in coordinated universal time (UTC), that the specified directory was last written to.</summary>
            <param name="path">The directory for which to set the date and time information.</param>
            <param name="lastWriteTimeUtc">A <see cref="T:System.DateTime"/> containing the value to set for the last write date and time of <paramref name="path"/>. This value is expressed in UTC time.</param>
            <param name="modifyReparsePoint">If <see langword="true"/>, the date and time information will apply to the reparse point (symlink or junction) and not the file or directory linked to. No effect if <paramref name="path"/> does not refer to a reparse point.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.SetLastWriteTimeTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.DateTime)">
            <summary>[AlphaFS] Sets the date and time that the specified directory was last written to.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory for which to set the date and time information.</param>
            <param name="lastWriteTime">A <see cref="T:System.DateTime"/> containing the value to set for the last write date and time of <paramref name="path"/>. This value is expressed in local time.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.SetLastWriteTimeTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.DateTime,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Sets the date and time that the specified directory was last written to.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory for which to set the date and time information.</param>
            <param name="lastWriteTime">A <see cref="T:System.DateTime"/> containing the value to set for the last write date and time of <paramref name="path"/>. This value is expressed in local time.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.SetLastWriteTimeTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.DateTime,System.Boolean,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Sets the date and time that the specified directory was last written to.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory for which to set the date and time information.</param>
            <param name="lastWriteTime">A <see cref="T:System.DateTime"/> containing the value to set for the last write date and time of <paramref name="path"/>. This value is expressed in local time.</param>
            <param name="modifyReparsePoint">If <see langword="true"/>, the date and time information will apply to the reparse point (symlink or junction) and not the file or directory linked to. No effect if <paramref name="path"/> does not refer to a reparse point.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.SetLastWriteTimeUtcTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.DateTime)">
            <summary>[AlphaFS] Sets the date and time, in coordinated universal time (UTC), that the specified directory was last written to.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory for which to set the date and time information.</param>
            <param name="lastWriteTimeUtc">A <see cref="T:System.DateTime"/> containing the value to set for the last write date and time of <paramref name="path"/>. This value is expressed in UTC time.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.SetLastWriteTimeUtcTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.DateTime,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Sets the date and time, in coordinated universal time (UTC), that the specified directory was last written to.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory for which to set the date and time information.</param>
            <param name="lastWriteTimeUtc">A <see cref="T:System.DateTime"/> containing the value to set for the last write date and time of <paramref name="path"/>. This value is expressed in UTC time.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.SetLastWriteTimeUtcTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.DateTime,System.Boolean,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Sets the date and time, in coordinated universal time (UTC), that the specified directory was last written to.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The directory for which to set the date and time information.</param>
            <param name="lastWriteTimeUtc">A <see cref="T:System.DateTime"/> containing the value to set for the last write date and time of <paramref name="path"/>. This value is expressed in UTC time.</param>
            <param name="modifyReparsePoint">If <see langword="true"/>, the date and time information will apply to the reparse point (symlink or junction) and not the file or directory linked to. No effect if <paramref name="path"/> does not refer to a reparse point.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Compress(System.String)">
            <summary>[AlphaFS] Compresses a directory using NTFS compression.</summary>
            <remarks>This will only compress the root items (non recursive).</remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="path">A path that describes a directory to compress.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Compress(System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Compresses a directory using NTFS compression.</summary>
            <remarks>This will only compress the root items (non recursive).</remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="path">A path that describes a directory to compress.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Compress(System.String,Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions)">
            <summary>[AlphaFS] Compresses a directory using NTFS compression.</summary>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="path">A path that describes a directory to compress.</param>
            <param name="options"><see cref="T:Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions"/> flags that specify how the directory is to be enumerated.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Compress(System.String,Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Compresses a directory using NTFS compression.</summary>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="path">A path that describes a directory to compress.</param>
            <param name="options"><see cref="T:Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions"/> flags that specify how the directory is to be enumerated.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.CompressTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>[AlphaFS] Compresses a directory using NTFS compression.</summary>
            <remarks>This will only compress the root items (non recursive).</remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="transaction">The transaction.</param>
            <param name="path">A path that describes a directory to compress.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.CompressTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Compresses a directory using NTFS compression.</summary>
            <remarks>This will only compress the root items (non recursive).</remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="transaction">The transaction.</param>
            <param name="path">A path that describes a directory to compress.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.CompressTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions)">
            <summary>[AlphaFS] Compresses a directory using NTFS compression.</summary>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="transaction">The transaction.</param>
            <param name="path">A path that describes a directory to compress.</param>
            <param name="options"><see cref="T:Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions"/> flags that specify how the directory is to be enumerated.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.CompressTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Compresses a directory using NTFS compression.</summary>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="transaction">The transaction.</param>
            <param name="path">A path that describes a directory to compress.</param>
            <param name="options"><see cref="T:Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions"/> flags that specify how the directory is to be enumerated.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Decompress(System.String)">
            <summary>[AlphaFS] Decompresses an NTFS compressed directory.</summary>
            <remarks>This will only decompress the root items (non recursive).</remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="path">A path that describes a directory to decompress.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Decompress(System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Decompresses an NTFS compressed directory.</summary>
            <remarks>This will only decompress the root items (non recursive).</remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="path">A path that describes a directory to decompress.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Decompress(System.String,Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions)">
            <summary>[AlphaFS] Decompresses an NTFS compressed directory.</summary>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="path">A path that describes a directory to decompress.</param>
            <param name="options"><see cref="T:Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions"/> flags that specify how the directory is to be enumerated.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Decompress(System.String,Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Decompresses an NTFS compressed directory.</summary>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="path">A path that describes a directory to decompress.</param>
            <param name="options"><see cref="T:Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions"/> flags that specify how the directory is to be enumerated.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.DecompressTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>[AlphaFS] Decompresses an NTFS compressed directory.</summary>
            <remarks>This will only decompress the root items (non recursive).</remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="transaction">The transaction.</param>
            <param name="path">A path that describes a directory to decompress.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.DecompressTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Decompresses an NTFS compressed directory.</summary>
            <remarks>This will only decompress the root items (non recursive).</remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="transaction">The transaction.</param>
            <param name="path">A path that describes a directory to decompress.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.DecompressTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions)">
            <summary>[AlphaFS] Decompresses an NTFS compressed directory.</summary>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="transaction">The transaction.</param>
            <param name="path">A path that describes a directory to decompress.</param>
            <param name="options"><see cref="T:Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions"/> flags that specify how the directory is to be enumerated.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.DecompressTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Decompresses an NTFS compressed directory.</summary>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="transaction">The transaction.</param>
            <param name="path">A path that describes a directory to decompress.</param>
            <param name="options"><see cref="T:Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions"/> flags that specify how the directory is to be enumerated.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.DisableCompression(System.String)">
            <summary>[AlphaFS] Disables NTFS compression of the specified directory and the files in it.</summary>
            <remarks>This method disables the directory-compression attribute. It will not decompress the current contents of the directory. However, newly created files and directories will be uncompressed.</remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="path">A path to a directory to decompress.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.DisableCompression(System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Disables NTFS compression of the specified directory and the files in it.</summary>
            <remarks>This method disables the directory-compression attribute. It will not decompress the current contents of the directory. However, newly created files and directories will be uncompressed.</remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="path">A path to a directory to decompress.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.DisableCompressionTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>[AlphaFS] Disables NTFS compression of the specified directory and the files in it.</summary>
            <remarks>This method disables the directory-compression attribute. It will not decompress the current contents of the directory. However, newly created files and directories will be uncompressed.</remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="transaction">The transaction.</param>
            <param name="path">A path to a directory to decompress.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.DisableCompressionTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Disables NTFS compression of the specified directory and the files in it.</summary>
            <remarks>This method disables the directory-compression attribute. It will not decompress the current contents of the directory. However, newly created files and directories will be uncompressed.</remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="transaction">The transaction.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
            <param name="path">A path to a directory to decompress.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnableCompression(System.String)">
            <summary>[AlphaFS] Enables NTFS compression of the specified directory and the files in it.</summary>
            <remarks>This method enables the directory-compression attribute. It will not compress the current contents of the directory. However, newly created files and directories will be compressed.</remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="path">A path to a directory to compress.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnableCompression(System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Enables NTFS compression of the specified directory and the files in it.</summary>
            <remarks>This method enables the directory-compression attribute. It will not compress the current contents of the directory. However, newly created files and directories will be compressed.</remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="path">A path to a directory to compress.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnableCompressionTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>[AlphaFS] Enables NTFS compression of the specified directory and the files in it.</summary>
            <remarks>This method enables the directory-compression attribute. It will not compress the current contents of the directory. However, newly created files and directories will be compressed.</remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="transaction">The transaction.</param>
            <param name="path">A path to a directory to compress.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnableCompressionTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Enables NTFS compression of the specified directory and the files in it.</summary>
            <remarks>This method enables the directory-compression attribute. It will not compress the current contents of the directory. However, newly created files and directories will be compressed.</remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="transaction">The transaction.</param>
            <param name="path">A path to a directory to compress.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.CompressDecompressCore(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions,System.Boolean,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>Compress/decompress Non-/Transacted files/directories.</summary>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="transaction">The transaction.</param>
            <param name="path">A path that describes a directory to compress.</param>
            <param name="searchPattern">
              The search string to match against the names of directories in <paramref name="path"/>.
              This parameter can contain a combination of valid literal path and wildcard
              (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/> and <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>) characters, but does not support regular expressions.
            </param>
            <param name="options"><see cref="T:Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions"/> flags that specify how the directory is to be enumerated.</param>
            <param name="compress"><see langword="true"/> compress, when <see langword="false"/> decompress.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Decrypt(System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Decrypts a directory that was encrypted by the current account using the Encrypt method.</summary>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="path">A path that describes a directory to decrypt.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Decrypt(System.String,System.Boolean,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Decrypts a directory that was encrypted by the current account using the Encrypt method.</summary>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="path">A path that describes a directory to decrypt.</param>
            <param name="recursive"><see langword="true"/> to decrypt the directory recursively. <see langword="false"/> only decrypt the directory.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Decrypt(System.String)">
            <summary>[AlphaFS] Decrypts a directory that was encrypted by the current account using the Encrypt method.</summary>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="path">A path that describes a directory to decrypt.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Decrypt(System.String,System.Boolean)">
            <summary>[AlphaFS] Decrypts a directory that was encrypted by the current account using the Encrypt method.</summary>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="path">A path that describes a directory to decrypt.</param>
            <param name="recursive"><see langword="true"/> to decrypt the directory recursively. <see langword="false"/> only decrypt the directory.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Encrypt(System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Encrypts a directory so that only the account used to encrypt the directory can decrypt it.</summary>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="path">A path that describes a directory to encrypt.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Encrypt(System.String,System.Boolean,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Encrypts a directory so that only the account used to encrypt the directory can decrypt it.</summary>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="path">A path that describes a directory to encrypt.</param>
            <param name="recursive"><see langword="true"/> to encrypt the directory recursively. <see langword="false"/> only encrypt the directory.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Encrypt(System.String)">
            <summary>[AlphaFS] Encrypts a directory so that only the account used to encrypt the directory can decrypt it.</summary>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="path">A path that describes a directory to encrypt.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.Encrypt(System.String,System.Boolean)">
            <summary>[AlphaFS] Encrypts a directory so that only the account used to encrypt the directory can decrypt it.</summary>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="path">A path that describes a directory to encrypt.</param>
            <param name="recursive"><see langword="true"/> to encrypt the directory recursively. <see langword="false"/> only encrypt the directory.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.DisableEncryption(System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Disables encryption of the specified directory and the files in it.
              <para>This method only creates/modifies the file "Desktop.ini" in the root of <paramref name="path"/> and disables encryption by writing: "Disable=1"</para>
              <para>This method does not affect encryption of files and subdirectories below the indicated directory.</para>
            </summary>
            <param name="path">The name of the directory for which to disable encryption.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.DisableEncryption(System.String)">
            <summary>[AlphaFS] Disables encryption of the specified directory and the files in it.
              <para>This method only creates/modifies the file "Desktop.ini" in the root of <paramref name="path"/> and disables encryption by writing: "Disable=1"</para>
              <para>This method does not affect encryption of files and subdirectories below the indicated directory.</para>
            </summary>
            <param name="path">The name of the directory for which to disable encryption.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnableEncryption(System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Enables encryption of the specified directory and the files in it.
              <para>This method only creates/modifies the file "Desktop.ini" in the root of <paramref name="path"/> and enables encryption by writing: "Disable=0"</para>
              <para>This method does not affect encryption of files and subdirectories below the indicated directory.</para>
            </summary>
            <param name="path">The name of the directory for which to enable encryption.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnableEncryption(System.String)">
            <summary>[AlphaFS] Enables encryption of the specified directory and the files in it.
              <para>This method only creates/modifies the file "Desktop.ini" in the root of <paramref name="path"/> and enables encryption by writing: "Disable=0"</para>
              <para>This method does not affect encryption of files and subdirectories below the indicated directory.</para>
            </summary>
            <param name="path">The name of the directory for which to enable encryption.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnableDisableEncryptionCore(System.String,System.Boolean,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>Enables/disables encryption of the specified directory and the files in it.
              <para>This method only creates/modifies the file "Desktop.ini" in the root of <paramref name="path"/> and  enables/disables encryption by writing: "Disable=0" or "Disable=1".</para>
              <para>This method does not affect encryption of files and subdirectories below the indicated directory.</para>
            </summary>
            <param name="path">The name of the directory for which to enable encryption.</param>
            <param name="enable"><see langword="true"/> enabled encryption, <see langword="false"/> disables encryption.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EncryptDecryptDirectoryCore(System.String,System.Boolean,System.Boolean,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>Decrypts/encrypts a directory recursively so that only the account used to encrypt the directory can decrypt it.</summary>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="path">A path that describes a directory to encrypt.</param>
            <param name="encrypt"><see langword="true"/> encrypt, <see langword="false"/> decrypt.</param>
            <param name="recursive"><see langword="true"/> to decrypt the directory recursively. <see langword="false"/> only decrypt files and directories in the root of <paramref name="path"/>.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateFileIdBothDirectoryInfo(System.String)">
            <summary>[AlphaFS] Retrieves information about files in the directory specified by <paramref name="path"/> in <see cref="F:System.IO.FileShare.ReadWrite"/> mode.</summary>
            <returns>An enumeration of <see cref="T:Alphaleonis.Win32.Filesystem.FileIdBothDirectoryInfo"/> records for each file system entry in the specified diretory.</returns>
            <param name="path">A path to a directory from which to retrieve information.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateFileIdBothDirectoryInfo(System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Retrieves information about files in the directory specified by <paramref name="path"/> in <see cref="F:System.IO.FileShare.ReadWrite"/> mode.</summary>
            <returns>An enumeration of <see cref="T:Alphaleonis.Win32.Filesystem.FileIdBothDirectoryInfo"/> records for each file system entry in the specified diretory.</returns>
            <param name="path">A path to a directory from which to retrieve information.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateFileIdBothDirectoryInfo(System.String,System.IO.FileShare)">
            <summary>[AlphaFS] Retrieves information about files in the directory specified by <paramref name="path"/> in specified <see cref="T:System.IO.FileShare"/> mode.</summary>
            <returns>An enumeration of <see cref="T:Alphaleonis.Win32.Filesystem.FileIdBothDirectoryInfo"/> records for each file system entry in the specified diretory.</returns>
            <param name="path">A path to a directory from which to retrieve information.</param>
            <param name="shareMode">The <see cref="T:System.IO.FileShare"/> mode with which to open a handle to the directory.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateFileIdBothDirectoryInfo(System.String,System.IO.FileShare,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Retrieves information about files in the directory specified by <paramref name="path"/> in specified <see cref="T:System.IO.FileShare"/> mode.</summary>
            <returns>An enumeration of <see cref="T:Alphaleonis.Win32.Filesystem.FileIdBothDirectoryInfo"/> records for each file system entry in the specified diretory.</returns>
            <param name="path">A path to a directory from which to retrieve information.</param>
            <param name="shareMode">The <see cref="T:System.IO.FileShare"/> mode with which to open a handle to the directory.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateFileIdBothDirectoryInfo(Microsoft.Win32.SafeHandles.SafeFileHandle)">
            <summary>[AlphaFS] Retrieves information about files in the directory handle specified.</summary>
            <returns>An IEnumerable of <see cref="T:Alphaleonis.Win32.Filesystem.FileIdBothDirectoryInfo"/> records for each file system entry in the specified diretory.</returns>
            <param name="handle">An open handle to the directory from which to retrieve information.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateFileIdBothDirectoryInfoTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>[AlphaFS] Retrieves information about files in the directory specified by <paramref name="path"/> in <see cref="F:System.IO.FileShare.ReadWrite"/> mode.</summary>
            <returns>An enumeration of <see cref="T:Alphaleonis.Win32.Filesystem.FileIdBothDirectoryInfo"/> records for each file system entry in the specified diretory.</returns>
            <param name="transaction">The transaction.</param>
            <param name="path">A path to a directory from which to retrieve information.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateFileIdBothDirectoryInfoTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Retrieves information about files in the directory specified by <paramref name="path"/> in <see cref="F:System.IO.FileShare.ReadWrite"/> mode.</summary>
            <returns>An enumeration of <see cref="T:Alphaleonis.Win32.Filesystem.FileIdBothDirectoryInfo"/> records for each file system entry in the specified diretory.</returns>
            <param name="transaction">The transaction.</param>
            <param name="path">A path to a directory from which to retrieve information.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateFileIdBothDirectoryInfoTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.IO.FileShare)">
            <summary>[AlphaFS] Retrieves information about files in the directory specified by <paramref name="path"/> in specified <see cref="T:System.IO.FileShare"/> mode.</summary>
            <returns>An enumeration of <see cref="T:Alphaleonis.Win32.Filesystem.FileIdBothDirectoryInfo"/> records for each file system entry in the specified diretory.</returns>
            <param name="transaction">The transaction.</param>
            <param name="path">A path to a directory from which to retrieve information.</param>
            <param name="shareMode">The <see cref="T:System.IO.FileShare"/> mode with which to open a handle to the directory.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateFileIdBothDirectoryInfoTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.IO.FileShare,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Retrieves information about files in the directory specified by <paramref name="path"/> in specified <see cref="T:System.IO.FileShare"/> mode.</summary>
            <returns>An enumeration of <see cref="T:Alphaleonis.Win32.Filesystem.FileIdBothDirectoryInfo"/> records for each file system entry in the specified diretory.</returns>
            <param name="transaction">The transaction.</param>
            <param name="path">A path to a directory from which to retrieve information.</param>
            <param name="shareMode">The <see cref="T:System.IO.FileShare"/> mode with which to open a handle to the directory.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateFileIdBothDirectoryInfoCore(Alphaleonis.Win32.Filesystem.KernelTransaction,Microsoft.Win32.SafeHandles.SafeFileHandle,System.String,System.IO.FileShare,System.Boolean,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>Returns an enumerable collection of information about files in the directory handle specified.</summary>
            <returns>An IEnumerable of <see cref="T:Alphaleonis.Win32.Filesystem.FileIdBothDirectoryInfo"/> records for each file system entry in the specified diretory.</returns>    
            <remarks>
              <para>Either use <paramref name="path"/> or <paramref name="safeHandle"/>, not both.</para>
              <para>
              The number of files that are returned for each call to GetFileInformationByHandleEx depends on the size of the buffer that is passed to the function.
              Any subsequent calls to GetFileInformationByHandleEx on the same handle will resume the enumeration operation after the last file is returned.
            </para>
            </remarks>
            <param name="transaction">The transaction.</param>
            <param name="safeHandle">An open handle to the directory from which to retrieve information.</param>
            <param name="path">A path to the directory.</param>
            <param name="shareMode">The <see cref="T:System.IO.FileShare"/> mode with which to open a handle to the directory.</param>
            <param name="continueOnException"><see langword="true"/> suppress any Exception that might be thrown as a result from a failure, such as ACLs protected directories or non-accessible reparse points.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetProperties(System.String)">
            <summary>[AlphaFS] Gets the properties of the particular directory without following any symbolic links or mount points.
              <para>Properties include aggregated info from <see cref="T:System.IO.FileAttributes"/> of each encountered file system object, plus additional ones: Total, File, Size and Error.</para>
              <para><b>Total:</b> is the total number of enumerated objects.</para>
              <para><b>File:</b> is the total number of files. File is considered when object is neither <see cref="F:System.IO.FileAttributes.Directory"/> nor <see cref="F:System.IO.FileAttributes.ReparsePoint"/>.</para>
              <para><b>Size:</b> is the total size of enumerated objects.</para>
              <para><b>Error:</b> is the total number of errors encountered during enumeration.</para>
            </summary>
            <returns>A dictionary mapping the keys mentioned above to their respective aggregated values.</returns>
            <remarks><b>Directory:</b> is an object which has <see cref="F:System.IO.FileAttributes.Directory"/> attribute without <see cref="F:System.IO.FileAttributes.ReparsePoint"/> one.</remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="path">The target directory.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetProperties(System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Gets the properties of the particular directory without following any symbolic links or mount points.
              <para>Properties include aggregated info from <see cref="T:System.IO.FileAttributes"/> of each encountered file system object, plus additional ones: Total, File, Size and Error.</para>
              <para><b>Total:</b> is the total number of enumerated objects.</para>
              <para><b>File:</b> is the total number of files. File is considered when object is neither <see cref="F:System.IO.FileAttributes.Directory"/> nor <see cref="F:System.IO.FileAttributes.ReparsePoint"/>.</para>
              <para><b>Size:</b> is the total size of enumerated objects.</para>
              <para><b>Error:</b> is the total number of errors encountered during enumeration.</para>
            </summary>
            <returns>A dictionary mapping the keys mentioned above to their respective aggregated values.</returns>
            <remarks><b>Directory:</b> is an object which has <see cref="F:System.IO.FileAttributes.Directory"/> attribute without <see cref="F:System.IO.FileAttributes.ReparsePoint"/> one.</remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="path">The target directory.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetProperties(System.String,Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions)">
            <summary>[AlphaFS] Gets the properties of the particular directory without following any symbolic links or mount points.
              <para>Properties include aggregated info from <see cref="T:System.IO.FileAttributes"/> of each encountered file system object, plus additional ones: Total, File, Size and Error.</para>
              <para><b>Total:</b> is the total number of enumerated objects.</para>
              <para><b>File:</b> is the total number of files. File is considered when object is neither <see cref="F:System.IO.FileAttributes.Directory"/> nor <see cref="F:System.IO.FileAttributes.ReparsePoint"/>.</para>
              <para><b>Size:</b> is the total size of enumerated objects.</para>
              <para><b>Error:</b> is the total number of errors encountered during enumeration.</para>
            </summary>
            <returns>A dictionary mapping the keys mentioned above to their respective aggregated values.</returns>
            <remarks><b>Directory:</b> is an object which has <see cref="F:System.IO.FileAttributes.Directory"/> attribute without <see cref="F:System.IO.FileAttributes.ReparsePoint"/> one.</remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="path">The target directory.</param>
            <param name="options"><see cref="T:Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions"/> flags that specify how the directory is to be enumerated.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetProperties(System.String,Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Gets the properties of the particular directory without following any symbolic links or mount points.
              <para>Properties include aggregated info from <see cref="T:System.IO.FileAttributes"/> of each encountered file system object, plus additional ones: Total, File, Size and Error.</para>
              <para><b>Total:</b> is the total number of enumerated objects.</para>
              <para><b>File:</b> is the total number of files. File is considered when object is neither <see cref="F:System.IO.FileAttributes.Directory"/> nor <see cref="F:System.IO.FileAttributes.ReparsePoint"/>.</para>
              <para><b>Size:</b> is the total size of enumerated objects.</para>
              <para><b>Error:</b> is the total number of errors encountered during enumeration.</para>
            </summary>
            <returns>A dictionary mapping the keys mentioned above to their respective aggregated values.</returns>
            <remarks><b>Directory:</b> is an object which has <see cref="F:System.IO.FileAttributes.Directory"/> attribute without <see cref="F:System.IO.FileAttributes.ReparsePoint"/> one.</remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="path">The target directory.</param>
            <param name="options"><see cref="T:Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions"/> flags that specify how the directory is to be enumerated.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetPropertiesTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>[AlphaFS] Gets the properties of the particular directory without following any symbolic links or mount points.
              <para>Properties include aggregated info from <see cref="T:System.IO.FileAttributes"/> of each encountered file system object, plus additional ones: Total, File, Size and Error.</para>
              <para><b>Total:</b> is the total number of enumerated objects.</para>
              <para><b>File:</b> is the total number of files. File is considered when object is neither <see cref="F:System.IO.FileAttributes.Directory"/> nor <see cref="F:System.IO.FileAttributes.ReparsePoint"/>.</para>
              <para><b>Size:</b> is the total size of enumerated objects.</para>
              <para><b>Error:</b> is the total number of errors encountered during enumeration.</para>
            </summary>
            <returns>A dictionary mapping the keys mentioned above to their respective aggregated values.</returns>
            <remarks><b>Directory:</b> is an object which has <see cref="F:System.IO.FileAttributes.Directory"/> attribute without <see cref="F:System.IO.FileAttributes.ReparsePoint"/> one.</remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="transaction">The transaction.</param>
            <param name="path">The target directory.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetPropertiesTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Gets the properties of the particular directory without following any symbolic links or mount points.
              <para>Properties include aggregated info from <see cref="T:System.IO.FileAttributes"/> of each encountered file system object, plus additional ones: Total, File, Size and Error.</para>
              <para><b>Total:</b> is the total number of enumerated objects.</para>
              <para><b>File:</b> is the total number of files. File is considered when object is neither <see cref="F:System.IO.FileAttributes.Directory"/> nor <see cref="F:System.IO.FileAttributes.ReparsePoint"/>.</para>
              <para><b>Size:</b> is the total size of enumerated objects.</para>
              <para><b>Error:</b> is the total number of errors encountered during enumeration.</para>
            </summary>
            <returns>A dictionary mapping the keys mentioned above to their respective aggregated values.</returns>
            <remarks><b>Directory:</b> is an object which has <see cref="F:System.IO.FileAttributes.Directory"/> attribute without <see cref="F:System.IO.FileAttributes.ReparsePoint"/> one.</remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="transaction">The transaction.</param>
            <param name="path">The target directory.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetPropertiesTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions)">
            <summary>[AlphaFS] Gets the properties of the particular directory without following any symbolic links or mount points.
              <para>Properties include aggregated info from <see cref="T:System.IO.FileAttributes"/> of each encountered file system object, plus additional ones: Total, File, Size and Error.</para>
              <para><b>Total:</b> is the total number of enumerated objects.</para>
              <para><b>File:</b> is the total number of files. File is considered when object is neither <see cref="F:System.IO.FileAttributes.Directory"/> nor <see cref="F:System.IO.FileAttributes.ReparsePoint"/>.</para>
              <para><b>Size:</b> is the total size of enumerated objects.</para>
              <para><b>Error:</b> is the total number of errors encountered during enumeration.</para>
            </summary>
            <returns>A dictionary mapping the keys mentioned above to their respective aggregated values.</returns>
            <remarks><b>Directory:</b> is an object which has <see cref="F:System.IO.FileAttributes.Directory"/> attribute without <see cref="F:System.IO.FileAttributes.ReparsePoint"/> one.</remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="transaction">The transaction.</param>
            <param name="path">The target directory.</param>
            <param name="options"><see cref="T:Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions"/> flags that specify how the directory is to be enumerated.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetPropertiesTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Gets the properties of the particular directory without following any symbolic links or mount points.
              <para>Properties include aggregated info from <see cref="T:System.IO.FileAttributes"/> of each encountered file system object, plus additional ones: Total, File, Size and Error.</para>
              <para><b>Total:</b> is the total number of enumerated objects.</para>
              <para><b>File:</b> is the total number of files. File is considered when object is neither <see cref="F:System.IO.FileAttributes.Directory"/> nor <see cref="F:System.IO.FileAttributes.ReparsePoint"/>.</para>
              <para><b>Size:</b> is the total size of enumerated objects.</para>
              <para><b>Error:</b> is the total number of errors encountered during enumeration.</para>
            </summary>
            <returns>A dictionary mapping the keys mentioned above to their respective aggregated values.</returns>
            <remarks><b>Directory:</b> is an object which has <see cref="F:System.IO.FileAttributes.Directory"/> attribute without <see cref="F:System.IO.FileAttributes.ReparsePoint"/> one.</remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="transaction">The transaction.</param>
            <param name="path">The target directory.</param>
            <param name="options"><see cref="T:Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions"/> flags that specify how the directory is to be enumerated.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.GetPropertiesCore(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Gets the properties of the particular directory without following any symbolic links or mount points.
              <para>Properties include aggregated info from <see cref="T:System.IO.FileAttributes"/> of each encountered file system object, plus additional ones: Total, File, Size and Error.</para>
              <para><b>Total:</b> is the total number of enumerated objects.</para>
              <para><b>File:</b> is the total number of files. File is considered when object is neither <see cref="F:System.IO.FileAttributes.Directory"/> nor <see cref="F:System.IO.FileAttributes.ReparsePoint"/>.</para>
              <para><b>Size:</b> is the total size of enumerated objects.</para>
              <para><b>Error:</b> is the total number of errors encountered during enumeration.</para>
            </summary>
            <returns>A dictionary mapping the keys mentioned above to their respective aggregated values.</returns>
            <remarks><b>Directory:</b> is an object which has <see cref="F:System.IO.FileAttributes.Directory"/> attribute without <see cref="F:System.IO.FileAttributes.ReparsePoint"/> one.</remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="transaction">The transaction.</param>
            <param name="path">The target directory.</param>
            <param name="options"><see cref="T:Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions"/> flags that specify how the directory is to be enumerated.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateAlternateDataStreams(System.String)">
            <summary>[AlphaFS] Enumerates the streams of type :$DATA from the specified directory.</summary>
            <param name="path">The path to the directory to enumerate streams of.</param>
            <returns>The streams of type :$DATA in the specified directory.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateAlternateDataStreams(System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Enumerates the streams of type :$DATA from the specified directory.</summary>
            <param name="path">The path to the directory to enumerate streams of.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
            <returns>The streams of type :$DATA in the specified directory.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateAlternateDataStreamsTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>[AlphaFS] Enumerates the streams of type :$DATA from the specified directory.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The path to the directory to enumerate streams of.</param>
            <returns>The streams of type :$DATA in the specified directory.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.EnumerateAlternateDataStreamsTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Enumerates the streams of type :$DATA from the specified directory.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The path to the directory to enumerate streams of.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
            <returns>The streams of type :$DATA in the specified directory.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.ExportEncryptedDirectoryRaw(System.String,System.IO.Stream)">
            <summary>[AlphaFS] Backs up (export) encrypted directories. This is one of a group of Encrypted File System (EFS) functions that is
              intended to implement backup and restore functionality, while maintaining files in their encrypted state.
            </summary>
            <remarks>
              <para>The directory being backed up is not decrypted; it is backed up in its encrypted state.</para>
              <para>If the caller does not have access to the key for the file, the caller needs <see cref="F:Alphaleonis.Win32.Security.Privilege.Backup"/> to export encrypted files. See <see cref="T:Alphaleonis.Win32.Security.PrivilegeEnabler"/>.</para>
              <para>To backup an encrypted directory call one of the <see cref="O:Alphaleonis.Win32.Filesystem.Directory.ExportEncryptedDirectoryRaw"/> overloads and specify the directory to backup along with the destination stream of the backup data.</para>
              <para>This function is intended for the backup of only encrypted directories; see <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> for backup of unencrypted directories.</para>
              <para>Note that this method does not back up the files inside the directory, only the directory entry itself.</para>
            </remarks>
            <seealso cref="O:Alphaleonis.Win32.Filesystem.File.ExportEncryptedFileRaw"/>      
            <seealso cref="O:Alphaleonis.Win32.Filesystem.File.ImportEncryptedFileRaw"/>
            <seealso cref="O:Alphaleonis.Win32.Filesystem.Directory.ImportEncryptedDirectoryRaw"/>
            <param name="fileName">The name of the file to be backed up.</param>
            <param name="outputStream">The destination stream to which the backup data will be written.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.ExportEncryptedDirectoryRaw(System.String,System.IO.Stream,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Backs up (export) encrypted directories. This is one of a group of Encrypted File System (EFS) functions that is
              intended to implement backup and restore functionality, while maintaining files in their encrypted state.
            </summary>
            <remarks>
              <para>The directory being backed up is not decrypted; it is backed up in its encrypted state.</para>
              <para>If the caller does not have access to the key for the file, the caller needs <see cref="F:Alphaleonis.Win32.Security.Privilege.Backup"/> to export encrypted files. See <see cref="T:Alphaleonis.Win32.Security.PrivilegeEnabler"/>.</para>
              <para>To backup an encrypted directory call one of the <see cref="O:Alphaleonis.Win32.Filesystem.Directory.ExportEncryptedDirectoryRaw"/> overloads and specify the directory to backup along with the destination stream of the backup data.</para>
              <para>This function is intended for the backup of only encrypted directories; see <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> for backup of unencrypted directories.</para>
              <para>Note that this method does not back up the files inside the directory, only the directory entry itself.</para>
            </remarks>
            <seealso cref="O:Alphaleonis.Win32.Filesystem.File.ExportEncryptedFileRaw"/>      
            <seealso cref="O:Alphaleonis.Win32.Filesystem.File.ImportEncryptedFileRaw"/>
            <seealso cref="O:Alphaleonis.Win32.Filesystem.Directory.ImportEncryptedDirectoryRaw"/>
            <param name="fileName">The name of the file to be backed up.</param>
            <param name="outputStream">The destination stream to which the backup data will be written.</param>
            <param name="pathFormat">The path format of the <paramref name="fileName"/> parameter.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.ImportEncryptedDirectoryRaw(System.IO.Stream,System.String)">
            <summary>[AlphaFS] Restores (import) encrypted directories. This is one of a group of Encrypted File System (EFS) functions that is
              intended to implement backup and restore functionality, while maintaining files in their encrypted state.
            </summary>
            <remarks>
              <para>If the caller does not have access to the key for the directory, the caller needs <see cref="F:Alphaleonis.Win32.Security.Privilege.Backup"/> to restore encrypted directories. See <see cref="T:Alphaleonis.Win32.Security.PrivilegeEnabler"/>.</para>
              <para>To restore an encrypted directory call one of the <see cref="O:Alphaleonis.Win32.Filesystem.Directory.ImportEncryptedDirectoryRaw"/> overloads and specify the file to restore along with the destination stream of the restored data.</para>
              <para>This function is intended for the restoration of only encrypted directories; see <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> for backup of unencrypted files.</para>
            </remarks>
            <seealso cref="O:Alphaleonis.Win32.Filesystem.File.ExportEncryptedFileRaw"/>      
            <seealso cref="O:Alphaleonis.Win32.Filesystem.File.ImportEncryptedFileRaw"/>
            <seealso cref="O:Alphaleonis.Win32.Filesystem.Directory.ExportEncryptedDirectoryRaw"/>
            <param name="inputStream">The stream to read previously backed up data from.</param>
            <param name="destinationPath">The path of the destination directory to restore to.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.ImportEncryptedDirectoryRaw(System.IO.Stream,System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Restores (import) encrypted directories. This is one of a group of Encrypted File System (EFS) functions that is
              intended to implement backup and restore functionality, while maintaining files in their encrypted state.
            </summary>
            <remarks>
              <para>If the caller does not have access to the key for the directory, the caller needs <see cref="F:Alphaleonis.Win32.Security.Privilege.Backup"/> to restore encrypted directories. See <see cref="T:Alphaleonis.Win32.Security.PrivilegeEnabler"/>.</para>
              <para>To restore an encrypted directory call one of the <see cref="O:Alphaleonis.Win32.Filesystem.Directory.ImportEncryptedDirectoryRaw"/> overloads and specify the file to restore along with the destination stream of the restored data.</para>
              <para>This function is intended for the restoration of only encrypted directories; see <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> for backup of unencrypted files.</para>
            </remarks>
            <seealso cref="O:Alphaleonis.Win32.Filesystem.File.ExportEncryptedFileRaw"/>
            <seealso cref="O:Alphaleonis.Win32.Filesystem.File.ImportEncryptedFileRaw"/>
            <seealso cref="O:Alphaleonis.Win32.Filesystem.Directory.ExportEncryptedDirectoryRaw"/>
            <param name="inputStream">The stream to read previously backed up data from.</param>
            <param name="destinationPath">The path of the destination directory to restore to.</param>
            <param name="pathFormat">The path format of the <paramref name="destinationPath"/> parameter.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.ImportEncryptedDirectoryRaw(System.IO.Stream,System.String,System.Boolean)">
            <summary>[AlphaFS] Restores (import) encrypted directories. This is one of a group of Encrypted File System (EFS) functions that is
              intended to implement backup and restore functionality, while maintaining files in their encrypted state.
            </summary>
            <remarks>
              <para>If the caller does not have access to the key for the directory, the caller needs <see cref="F:Alphaleonis.Win32.Security.Privilege.Backup"/> to restore encrypted directories. See <see cref="T:Alphaleonis.Win32.Security.PrivilegeEnabler"/>.</para>
              <para>To restore an encrypted directory call one of the <see cref="O:Alphaleonis.Win32.Filesystem.Directory.ImportEncryptedDirectoryRaw"/> overloads and specify the file to restore along with the destination stream of the restored data.</para>
              <para>This function is intended for the restoration of only encrypted directories; see <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> for backup of unencrypted files.</para>
            </remarks>
            <seealso cref="O:Alphaleonis.Win32.Filesystem.File.ExportEncryptedFileRaw"/>
            <seealso cref="O:Alphaleonis.Win32.Filesystem.File.ImportEncryptedFileRaw"/>
            <seealso cref="O:Alphaleonis.Win32.Filesystem.Directory.ExportEncryptedDirectoryRaw"/>
            <param name="inputStream">The stream to read previously backed up data from.</param>
            <param name="destinationPath">The path of the destination directory to restore to.</param>
            <param name="overwriteHidden">If set to <see langword="true"/> a hidden directory will be overwritten on import.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Directory.ImportEncryptedDirectoryRaw(System.IO.Stream,System.String,System.Boolean,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Restores (import) encrypted directories. This is one of a group of Encrypted File System (EFS) functions that is
              intended to implement backup and restore functionality, while maintaining files in their encrypted state.
            </summary>
            <remarks>
              <para>If the caller does not have access to the key for the directory, the caller needs <see cref="F:Alphaleonis.Win32.Security.Privilege.Backup"/> to restore encrypted directories. See <see cref="T:Alphaleonis.Win32.Security.PrivilegeEnabler"/>.</para>
              <para>To restore an encrypted directory call one of the <see cref="O:Alphaleonis.Win32.Filesystem.Directory.ImportEncryptedDirectoryRaw"/> overloads and specify the file to restore along with the destination stream of the restored data.</para>
              <para>This function is intended for the restoration of only encrypted directories; see <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> for backup of unencrypted files.</para>
            </remarks>
            <seealso cref="O:Alphaleonis.Win32.Filesystem.File.ExportEncryptedFileRaw"/>
            <seealso cref="O:Alphaleonis.Win32.Filesystem.File.ImportEncryptedFileRaw"/>
            <seealso cref="O:Alphaleonis.Win32.Filesystem.Directory.ExportEncryptedDirectoryRaw"/>
            <param name="inputStream">The stream to read previously backed up data from.</param>
            <param name="destinationPath">The path of the destination directory to restore to.</param>
            <param name="overwriteHidden">If set to <see langword="true"/> a hidden directory will be overwritten on import.</param>
            <param name="pathFormat">The path format of the <paramref name="destinationPath"/> parameter.</param>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.DirectoryInfo">
            <summary>Exposes instance methods for creating, moving, and enumerating through directories and subdirectories. This class cannot be inherited.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.RefreshEntryInfo">
            <summary>Refreshes the state of the <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo"/> EntryInfo instance.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.Decrypt">
            <summary>[AlphaFS] Decrypts a directory that was encrypted by the current account using the Encrypt method.</summary>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.Decrypt(System.Boolean)">
            <summary>[AlphaFS] Decrypts a directory that was encrypted by the current account using the Encrypt method.</summary>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="recursive"><see langword="true"/> to decrypt the directory recursively. <see langword="false"/> only decrypt files and directories in the root of the directory.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.DisableEncryption">
            <summary>[AlphaFS] Disables encryption of the specified directory and the files in it. It does not affect encryption of subdirectories below the indicated directory.</summary>
            <returns><see langword="true"/> on success, <see langword="false"/> otherwise.</returns>
            <remarks>This method will create/change the file "Desktop.ini" and wil set Encryption value: "Disable=0"</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.EnableEncryption">
            <summary>[AlphaFS] Enables encryption of the specified directory and the files in it. It does not affect encryption of subdirectories below the indicated directory.</summary>
            <returns><see langword="true"/> on success, <see langword="false"/> otherwise.</returns>
            <remarks>This method will create/change the file "Desktop.ini" and wil set Encryption value: "Disable=1"</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.Encrypt">
            <summary>[AlphaFS] Encrypts a directory so that only the account used to encrypt the directory can decrypt it.</summary>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.Encrypt(System.Boolean)">
            <summary>[AlphaFS] Decrypts a directory that was encrypted by the current account using the Encrypt method.</summary>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="recursive"><see langword="true"/> to encrypt the directory recursively. <see langword="false"/> only encrypt files and directories in the root of the directory.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.DeleteEmptySubdirectories">
            <summary>[AlphaFS] Deletes empty subdirectories from the <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> instance.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.DeleteEmptySubdirectories(System.Boolean)">
            <summary>[AlphaFS] Deletes empty subdirectories from the <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> instance.</summary>
            <param name="recursive"><see langword="true"/> deletes empty subdirectories from this directory and its subdirectories.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.DeleteEmptySubdirectories(System.Boolean,System.Boolean)">
            <summary>[AlphaFS] Deletes empty subdirectories from the <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> instance.</summary>
            <param name="recursive"><see langword="true"/> deletes empty subdirectories from this directory and its subdirectories.</param>
            <param name="ignoreReadOnly"><see langword="true"/> overrides read only <see cref="T:System.IO.FileAttributes"/> of empty directories.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.Compress">
            <summary>[AlphaFS] Compresses a directory using NTFS compression.</summary>
            <remarks>This will only compress the root items (non recursive).</remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.Compress(Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions)">
            <summary>[AlphaFS] Compresses a directory using NTFS compression.</summary>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="options"><see cref="T:Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions"/> flags that specify how the directory is to be enumerated.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.Decompress">
            <summary>[AlphaFS] Decompresses an NTFS compressed directory.</summary>
            <remarks>This will only decompress the root items (non recursive).</remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.Decompress(Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions)">
            <summary>[AlphaFS] Decompresses an NTFS compressed directory.</summary>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="options"><see cref="T:Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions"/> flags that specify how the directory is to be enumerated.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.DisableCompression">
            <summary>[AlphaFS] Disables compression of the specified directory and the files in it.</summary>
            <remarks>
            This method disables the directory-compression attribute. It will not decompress the current contents of the directory.
            However, newly created files and directories will be uncompressed.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.EnableCompression">
            <summary>[AlphaFS] Enables compression of the specified directory and the files in it.</summary>
            <remarks>
            This method enables the directory-compression attribute. It will not compress the current contents of the directory.
            However, newly created files and directories will be compressed.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.CountFileSystemObjects(Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions)">
            <summary>[AlphaFS] Counts file system objects: files, folders or both) in a given directory.</summary>
            <returns>The counted number of file system objects.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="options"><see cref="T:Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions"/> flags that specify how the directory is to be enumerated.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.CountFileSystemObjects(System.String,Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions)">
            <summary>[AlphaFS] Counts file system objects: files, folders or both) in a given directory.</summary>
            <returns>The counted number of file system objects.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="searchPattern">
              The search string to match against the names of directories in path.
              This parameter can contain a combination of valid literal path and wildcard
              (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/> and <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>) characters, but does not support regular expressions.
            </param>
            <param name="options"><see cref="T:Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions"/> flags that specify how the directory is to be enumerated.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.CopyTo(System.String)">
            <summary>[AlphaFS] Copies a <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> instance and its contents to a new path.</summary>
            <returns>A new <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> instance if the directory was completely copied.</returns>
            <remarks>
              <para>Use this method to prevent overwriting of an existing directory by default.</para>
              <para>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method.</para>
              <para>If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior.</para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="destinationPath">The destination directory path.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.CopyTo(System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Copies a <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> instance and its contents to a new path.</summary>
            <returns>A new <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> instance if the directory was completely copied.</returns>
            <remarks>
              <para>Use this method to prevent overwriting of an existing directory by default.</para>
              <para>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method.</para>
              <para>If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior.</para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="destinationPath">The destination directory path.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.CopyTo(System.String,Alphaleonis.Win32.Filesystem.CopyOptions)">
            <summary>[AlphaFS] Copies an existing directory to a new directory, allowing the overwriting of an existing directory, <see cref="T:Alphaleonis.Win32.Filesystem.CopyOptions"/> can be specified.</summary>
            <returns>
              <para>Returns a new directory, or an overwrite of an existing directory if <paramref name="copyOptions"/> is not <see cref="F:Alphaleonis.Win32.Filesystem.CopyOptions.FailIfExists"/>.</para>
              <para>If the directory exists and <paramref name="copyOptions"/> contains <see cref="F:Alphaleonis.Win32.Filesystem.CopyOptions.FailIfExists"/>, an <see cref="T:System.IO.IOException"/> is thrown.</para>
            </returns>
            <remarks>
              <para>Option <see cref="F:Alphaleonis.Win32.Filesystem.CopyOptions.NoBuffering"/> is recommended for very large file transfers.</para>
              <para>Use this method to allow or prevent overwriting of an existing directory.</para>
              <para>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method.</para>
              <para>If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior.</para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="destinationPath">The destination directory path.</param>
            <param name="copyOptions"><see cref="T:Alphaleonis.Win32.Filesystem.CopyOptions"/> that specify how the directory is to be copied. This parameter can be <see langword="null"/>.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.CopyTo(System.String,Alphaleonis.Win32.Filesystem.CopyOptions,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Copies an existing directory to a new directory, allowing the overwriting of an existing directory, <see cref="T:Alphaleonis.Win32.Filesystem.CopyOptions"/> can be specified.</summary>
            <returns>
              <para>Returns a new directory, or an overwrite of an existing directory if <paramref name="copyOptions"/> is not <see cref="F:Alphaleonis.Win32.Filesystem.CopyOptions.FailIfExists"/>.</para>
              <para>If the directory exists and <paramref name="copyOptions"/> contains <see cref="F:Alphaleonis.Win32.Filesystem.CopyOptions.FailIfExists"/>, an <see cref="T:System.IO.IOException"/> is thrown.</para>
            </returns>
            <remarks>
              <para>Option <see cref="F:Alphaleonis.Win32.Filesystem.CopyOptions.NoBuffering"/> is recommended for very large file transfers.</para>
              <para>Use this method to allow or prevent overwriting of an existing directory.</para>
              <para>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method.</para>
              <para>If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior.</para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="destinationPath">The destination directory path.</param>
            <param name="copyOptions"><see cref="T:Alphaleonis.Win32.Filesystem.CopyOptions"/> that specify how the directory is to be copied. This parameter can be <see langword="null"/>.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.CopyTo(System.String,Alphaleonis.Win32.Filesystem.CopyOptions,Alphaleonis.Win32.Filesystem.CopyMoveProgressRoutine,System.Object)">
            <summary>[AlphaFS] Copies an existing directory to a new directory, allowing the overwriting of an existing directory, <see cref="T:Alphaleonis.Win32.Filesystem.CopyOptions"/> can be specified.
              <para>and the possibility of notifying the application of its progress through a callback function.</para>
            </summary>
            <returns>
              <para>Returns a <see cref="T:Alphaleonis.Win32.Filesystem.CopyMoveResult"/> class with the status of the Copy action.</para>
              <para>Returns a new directory, or an overwrite of an existing directory if <paramref name="copyOptions"/> is not <see cref="F:Alphaleonis.Win32.Filesystem.CopyOptions.FailIfExists"/>.</para>
              <para>If the directory exists and <paramref name="copyOptions"/> contains <see cref="F:Alphaleonis.Win32.Filesystem.CopyOptions.FailIfExists"/>, an <see cref="T:System.IO.IOException"/> is thrown.</para>
            </returns>
            <remarks>
              <para>Option <see cref="F:Alphaleonis.Win32.Filesystem.CopyOptions.NoBuffering"/> is recommended for very large file transfers.</para>
              <para>Use this method to allow or prevent overwriting of an existing directory.</para>
              <para>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method.</para>
              <para>If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior.</para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="destinationPath">The destination directory path.</param>
            <param name="copyOptions"><see cref="T:Alphaleonis.Win32.Filesystem.CopyOptions"/> that specify how the directory is to be copied. This parameter can be <see langword="null"/>.</param>
            <param name="progressHandler">A callback function that is called each time another portion of the directory has been copied. This parameter can be <see langword="null"/>.</param>
            <param name="userProgressData">The argument to be passed to the callback function. This parameter can be <see langword="null"/>.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.CopyTo(System.String,Alphaleonis.Win32.Filesystem.CopyOptions,Alphaleonis.Win32.Filesystem.CopyMoveProgressRoutine,System.Object,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Copies an existing directory to a new directory, allowing the overwriting of an existing directory, <see cref="T:Alphaleonis.Win32.Filesystem.CopyOptions"/> can be specified.
              <para>and the possibility of notifying the application of its progress through a callback function.</para>
            </summary>
            <returns>
              <para>Returns a <see cref="T:Alphaleonis.Win32.Filesystem.CopyMoveResult"/> class with the status of the Copy action.</para>
              <para>Returns a new directory, or an overwrite of an existing directory if <paramref name="copyOptions"/> is not <see cref="F:Alphaleonis.Win32.Filesystem.CopyOptions.FailIfExists"/>.</para>
              <para>If the directory exists and <paramref name="copyOptions"/> contains <see cref="F:Alphaleonis.Win32.Filesystem.CopyOptions.FailIfExists"/>, an <see cref="T:System.IO.IOException"/> is thrown.</para>
            </returns>
            <remarks>
              <para>Option <see cref="F:Alphaleonis.Win32.Filesystem.CopyOptions.NoBuffering"/> is recommended for very large file transfers.</para>
              <para>Use this method to allow or prevent overwriting of an existing directory.</para>
              <para>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method.</para>
              <para>If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior.</para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="destinationPath">The destination directory path.</param>
            <param name="copyOptions"><see cref="T:Alphaleonis.Win32.Filesystem.CopyOptions"/> that specify how the directory is to be copied. This parameter can be <see langword="null"/>.</param>
            <param name="progressHandler">A callback function that is called each time another portion of the directory has been copied. This parameter can be <see langword="null"/>.</param>
            <param name="userProgressData">The argument to be passed to the callback function. This parameter can be <see langword="null"/>.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.MoveTo(System.String)">
            <summary>Moves a <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> instance and its contents to a new path.</summary>
            <remarks>
              <para>Use this method to prevent overwriting of an existing directory by default.</para>
              <para>This method does not work across disk volumes.</para>
              <para>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method.</para>
              <para>If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior.</para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="destinationPath">
              <para>The name and path to which to move this directory.</para>
              <para>The destination cannot be another disk volume or a directory with the identical name.</para>
              <para>It can be an existing directory to which you want to add this directory as a subdirectory.</para>
            </param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.MoveTo(System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Moves a <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> instance and its contents to a new path.</summary>
            <returns>A new <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> instance if the directory was completely moved.</returns>
            <remarks>
              <para>Use this method to prevent overwriting of an existing directory by default.</para>
              <para>This method does not work across disk volumes.</para>
              <para>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method.</para>
              <para>If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior.</para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="destinationPath">
              <para>The name and path to which to move this directory.</para>
              <para>The destination cannot be another disk volume or a directory with the identical name.</para>
              <para>It can be an existing directory to which you want to add this directory as a subdirectory.</para>
            </param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.MoveTo(System.String,Alphaleonis.Win32.Filesystem.MoveOptions)">
            <summary>[AlphaFS] Moves a <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> instance and its contents to a new path, <see cref="T:Alphaleonis.Win32.Filesystem.MoveOptions"/> can be specified.</summary>
            <returns>A new <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> instance if the directory was completely moved.</returns>
            <remarks>
              <para>Use this method to allow or prevent overwriting of an existing directory.</para>
              <para>This method does not work across disk volumes unless <paramref name="moveOptions"/> contains <see cref="F:Alphaleonis.Win32.Filesystem.MoveOptions.CopyAllowed"/>.</para>
              <para>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method.</para>
              <para>If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior.</para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="destinationPath">
              <para>The name and path to which to move this directory.</para>
              <para>The destination cannot be another disk volume unless <paramref name="moveOptions"/> contains <see cref="F:Alphaleonis.Win32.Filesystem.MoveOptions.CopyAllowed"/>, or a directory with the identical name.</para>
              <para>It can be an existing directory to which you want to add this directory as a subdirectory.</para>
            </param>
            <param name="moveOptions"><see cref="T:Alphaleonis.Win32.Filesystem.MoveOptions"/> that specify how the directory is to be moved. This parameter can be <see langword="null"/>.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.MoveTo(System.String,Alphaleonis.Win32.Filesystem.MoveOptions,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Moves a <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> instance and its contents to a new path, <see cref="T:Alphaleonis.Win32.Filesystem.MoveOptions"/> can be specified.</summary>
            <returns>A new <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> instance if the directory was completely moved.</returns>
            <remarks>
              <para>Use this method to allow or prevent overwriting of an existing directory.</para>
              <para>This method does not work across disk volumes unless <paramref name="moveOptions"/> contains <see cref="F:Alphaleonis.Win32.Filesystem.MoveOptions.CopyAllowed"/>.</para>
              <para>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method.</para>
              <para>If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior.</para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="destinationPath">
              <para>The name and path to which to move this directory.</para>
              <para>The destination cannot be another disk volume unless <paramref name="moveOptions"/> contains <see cref="F:Alphaleonis.Win32.Filesystem.MoveOptions.CopyAllowed"/>, or a directory with the identical name.</para>
              <para>It can be an existing directory to which you want to add this directory as a subdirectory.</para>
            </param>
            <param name="moveOptions"><see cref="T:Alphaleonis.Win32.Filesystem.MoveOptions"/> that specify how the directory is to be moved. This parameter can be <see langword="null"/>.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.MoveTo(System.String,Alphaleonis.Win32.Filesystem.MoveOptions,Alphaleonis.Win32.Filesystem.CopyMoveProgressRoutine,System.Object)">
            <summary>[AlphaFS] Moves a <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> instance and its contents to a new path, <see cref="T:Alphaleonis.Win32.Filesystem.MoveOptions"/> can be specified,
              <para>and the possibility of notifying the application of its progress through a callback function.</para>
            </summary>
            <returns>A <see cref="T:Alphaleonis.Win32.Filesystem.CopyMoveResult"/> class with the status of the Move action.</returns>
            <remarks>
              <para>Use this method to allow or prevent overwriting of an existing directory.</para>
              <para>This method does not work across disk volumes unless <paramref name="moveOptions"/> contains <see cref="F:Alphaleonis.Win32.Filesystem.MoveOptions.CopyAllowed"/>.</para>
              <para>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method.</para>
              <para>If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior.</para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="destinationPath">
              <para>The name and path to which to move this directory.</para>
              <para>The destination cannot be another disk volume unless <paramref name="moveOptions"/> contains <see cref="F:Alphaleonis.Win32.Filesystem.MoveOptions.CopyAllowed"/>, or a directory with the identical name.</para>
              <para>It can be an existing directory to which you want to add this directory as a subdirectory.</para>
            </param>
            <param name="moveOptions"><see cref="T:Alphaleonis.Win32.Filesystem.MoveOptions"/> that specify how the directory is to be moved. This parameter can be <see langword="null"/>.</param>
            <param name="progressHandler">A callback function that is called each time another portion of the directory has been moved. This parameter can be <see langword="null"/>.</param>
            <param name="userProgressData">The argument to be passed to the callback function. This parameter can be <see langword="null"/>.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.MoveTo(System.String,Alphaleonis.Win32.Filesystem.MoveOptions,Alphaleonis.Win32.Filesystem.CopyMoveProgressRoutine,System.Object,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Moves a <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> instance and its contents to a new path, <see cref="T:Alphaleonis.Win32.Filesystem.MoveOptions"/> can be specified,
              <para>and the possibility of notifying the application of its progress through a callback function.</para>
            </summary>
            <returns>A <see cref="T:Alphaleonis.Win32.Filesystem.CopyMoveResult"/> class with the status of the Move action.</returns>
            <remarks>
              <para>Use this method to allow or prevent overwriting of an existing directory.</para>
              <para>This method does not work across disk volumes unless <paramref name="moveOptions"/> contains <see cref="F:Alphaleonis.Win32.Filesystem.MoveOptions.CopyAllowed"/>.</para>
              <para>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method.</para>
              <para>If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior.</para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="destinationPath">
              <para>The name and path to which to move this directory.</para>
              <para>The destination cannot be another disk volume unless <paramref name="moveOptions"/> contains <see cref="F:Alphaleonis.Win32.Filesystem.MoveOptions.CopyAllowed"/>, or a directory with the identical name.</para>
              <para>It can be an existing directory to which you want to add this directory as a subdirectory.</para>
            </param>
            <param name="moveOptions"><see cref="T:Alphaleonis.Win32.Filesystem.MoveOptions"/> that specify how the directory is to be moved. This parameter can be <see langword="null"/>.</param>
            <param name="progressHandler">A callback function that is called each time another portion of the directory has been moved. This parameter can be <see langword="null"/>.</param>
            <param name="userProgressData">The argument to be passed to the callback function. This parameter can be <see langword="null"/>.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.CopyToMoveToCore(System.String,System.Nullable{Alphaleonis.Win32.Filesystem.CopyOptions},System.Nullable{Alphaleonis.Win32.Filesystem.MoveOptions},Alphaleonis.Win32.Filesystem.CopyMoveProgressRoutine,System.Object,System.String@,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>Copy/move a Non-/Transacted file or directory including its children to a new location,
            <see cref="T:Alphaleonis.Win32.Filesystem.CopyOptions"/> or <see cref="T:Alphaleonis.Win32.Filesystem.MoveOptions"/> can be specified, and the possibility of notifying the application of its progress through a callback function.
            </summary>
            <returns>A <see cref="T:Alphaleonis.Win32.Filesystem.CopyMoveResult"/> class with the status of the Copy or Move action.</returns>
            <remarks>
              <para>Option <see cref="F:Alphaleonis.Win32.Filesystem.CopyOptions.NoBuffering"/> is recommended for very large file transfers.</para>
              <para>You cannot use the Move method to overwrite an existing file, unless <paramref name="moveOptions"/> contains <see cref="F:Alphaleonis.Win32.Filesystem.MoveOptions.ReplaceExisting"/>.</para>
              <para>This Move method works across disk volumes.</para>
              <para>Note that if you attempt to replace a file by moving a file of the same name into that directory, you get an IOException.</para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="destinationPath">The destination directory path.</param>
            <param name="copyOptions"><see cref="T:Alphaleonis.Win32.Filesystem.CopyOptions"/> that specify how the file is to be copied. This parameter can be <see langword="null"/>.</param>
            <param name="moveOptions"><see cref="T:Alphaleonis.Win32.Filesystem.MoveOptions"/> that specify how the file is to be moved. This parameter can be <see langword="null"/>.</param>
            <param name="progressHandler">A callback function that is called each time another portion of the file has been copied. This parameter can be <see langword="null"/>.</param>
            <param name="userProgressData">The argument to be passed to the callback function. This parameter can be <see langword="null"/>.</param>
            <param name="longFullPath">Returns the retrieved long full path.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.ToString">
            <summary>Returns the original path that was passed by the user.</summary>
            <returns>A string that represents this object.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.SetAccessControl(System.Security.AccessControl.DirectorySecurity)">
            <summary>Applies access control list (ACL) entries described by a <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object to the directory described by the current DirectoryInfo object.</summary>
            <param name="directorySecurity">A <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object that describes an ACL entry to apply to the directory described by the path parameter.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.SetAccessControl(System.Security.AccessControl.DirectorySecurity,System.Security.AccessControl.AccessControlSections)">
            <summary>Applies access control list (ACL) entries described by a <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object to the directory described by the current DirectoryInfo object.</summary>
            <param name="directorySecurity">A <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object that describes an ACL entry to apply to the directory described by the path parameter.</param>
            <param name="includeSections">One or more of the <see cref="T:System.Security.AccessControl.AccessControlSections"/> values that specifies the type of access control list (ACL) information to set.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.Refresh">
            <summary>Refreshes the state of the object.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.GetFileSystemInfos">
            <summary>Returns an array of strongly typed <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemInfo"/> entries representing all the files and subdirectories in a directory.</summary>
            <returns>An array of strongly typed <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemInfo"/> entries.</returns>
            <remarks>
            For subdirectories, the <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemInfo"/> objects returned by this method can be cast to the derived class <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/>.
            Use the <see cref="T:System.IO.FileAttributes"/> value returned by the <see cref="P:Alphaleonis.Win32.Filesystem.FileSystemInfo.Attributes"/> property to determine whether the <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemInfo"/> represents a file or a directory.
            </remarks>
            <remarks>
            If there are no files or directories in the DirectoryInfo, this method returns an empty array. This method is not recursive.
            For subdirectories, the FileSystemInfo objects returned by this method can be cast to the derived class DirectoryInfo.
            Use the FileAttributes value returned by the Attributes property to determine whether the FileSystemInfo represents a file or a directory.
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.GetFileSystemInfos(System.String)">
            <summary>Retrieves an array of strongly typed <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemInfo"/> objects representing the files and subdirectories that match the specified search criteria.</summary>
            <param name="searchPattern">
              The search string to match against the names of directories in path.
              This parameter can contain a combination of valid literal path and wildcard
              (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/> and <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>) characters, but does not support regular expressions.
            </param>
            <returns>An array of strongly typed <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemInfo"/> entries.</returns>
            <remarks>
            For subdirectories, the <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemInfo"/> objects returned by this method can be cast to the derived class <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/>.
            Use the <see cref="T:System.IO.FileAttributes"/> value returned by the <see cref="P:Alphaleonis.Win32.Filesystem.FileSystemInfo.Attributes"/> property to determine whether the <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemInfo"/> represents a file or a directory.
            </remarks>
            <remarks>
            If there are no files or directories in the DirectoryInfo, this method returns an empty array. This method is not recursive.
            For subdirectories, the FileSystemInfo objects returned by this method can be cast to the derived class DirectoryInfo.
            Use the FileAttributes value returned by the Attributes property to determine whether the FileSystemInfo represents a file or a directory.
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.GetFileSystemInfos(System.String,System.IO.SearchOption)">
            <summary>Retrieves an array of strongly typed <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemInfo"/> objects representing the files and subdirectories that match the specified search criteria.</summary>
            <param name="searchPattern">
              The search string to match against the names of directories in path.
              This parameter can contain a combination of valid literal path and wildcard
              (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/> and <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>) characters, but does not support regular expressions.
            </param>
            <param name="searchOption">
              One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the <paramref name="searchOption"/>
              should include only the current directory or should include all subdirectories.
            </param>
            <returns>An array of strongly typed <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemInfo"/> entries.</returns>
            <remarks>
            For subdirectories, the <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemInfo"/> objects returned by this method can be cast to the derived class <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/>.
            Use the <see cref="T:System.IO.FileAttributes"/> value returned by the <see cref="P:Alphaleonis.Win32.Filesystem.FileSystemInfo.Attributes"/> property to determine whether the <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemInfo"/> represents a file or a directory.
            </remarks>
            <remarks>
            If there are no files or directories in the DirectoryInfo, this method returns an empty array. This method is not recursive.
            For subdirectories, the FileSystemInfo objects returned by this method can be cast to the derived class DirectoryInfo.
            Use the FileAttributes value returned by the Attributes property to determine whether the FileSystemInfo represents a file or a directory.
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.GetFiles">
            <summary>Returns a file list from the current directory.</summary>
            <returns>An array of type <see cref="T:Alphaleonis.Win32.Filesystem.FileInfo"/>.</returns>
            <remarks>The order of the returned file names is not guaranteed; use the Sort() method if a specific sort order is required.</remarks>
            <remarks>If there are no files in the <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/>, this method returns an empty array.</remarks>
            <remarks>
            The EnumerateFiles and GetFiles methods differ as follows: When you use EnumerateFiles, you can start enumerating the collection of names
            before the whole collection is returned; when you use GetFiles, you must wait for the whole array of names to be returned before you can access the array.
            Therefore, when you are working with many files and directories, EnumerateFiles can be more efficient.
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.GetFiles(System.String)">
            <summary>Returns a file list from the current directory matching the given search pattern.</summary>
            <param name="searchPattern">
              The search string to match against the names of directories in path.
              This parameter can contain a combination of valid literal path and wildcard
              (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/> and <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>) characters, but does not support regular expressions.
            </param>
            <returns>An array of type <see cref="T:Alphaleonis.Win32.Filesystem.FileInfo"/>.</returns>
            <remarks>The order of the returned file names is not guaranteed; use the Sort() method if a specific sort order is required.</remarks>
            <remarks>If there are no files in the <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/>, this method returns an empty array.</remarks>
            <remarks>
            The EnumerateFiles and GetFiles methods differ as follows: When you use EnumerateFiles, you can start enumerating the collection of names
            before the whole collection is returned; when you use GetFiles, you must wait for the whole array of names to be returned before you can access the array.
            Therefore, when you are working with many files and directories, EnumerateFiles can be more efficient.
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.GetFiles(System.String,System.IO.SearchOption)">
            <summary>Returns a file list from the current directory matching the given search pattern and using a value to determine whether to search subdirectories.</summary>
            <param name="searchPattern">
              The search string to match against the names of directories in path.
              This parameter can contain a combination of valid literal path and wildcard
              (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/> and <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>) characters, but does not support regular expressions.
            </param>
            <param name="searchOption">
              One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the <paramref name="searchOption"/>
              should include only the current directory or should include all subdirectories.
            </param>
            <returns>An array of type <see cref="T:Alphaleonis.Win32.Filesystem.FileInfo"/>.</returns>
            <remarks>The order of the returned file names is not guaranteed; use the Sort() method if a specific sort order is required.</remarks>
            <remarks>If there are no files in the <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/>, this method returns an empty array.</remarks>
            <remarks>
            The EnumerateFiles and GetFiles methods differ as follows: When you use EnumerateFiles, you can start enumerating the collection of names
            before the whole collection is returned; when you use GetFiles, you must wait for the whole array of names to be returned before you can access the array.
            Therefore, when you are working with many files and directories, EnumerateFiles can be more efficient.
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.GetDirectories">
            <summary>Returns the subdirectories of the current directory.</summary>
            <returns>An array of <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> objects.</returns>
            <remarks>If there are no subdirectories, this method returns an empty array. This method is not recursive.</remarks>
            <remarks>
            The EnumerateDirectories and GetDirectories methods differ as follows: When you use EnumerateDirectories, you can start enumerating the collection of names
            before the whole collection is returned; when you use GetDirectories, you must wait for the whole array of names to be returned before you can access the array.
            Therefore, when you are working with many files and directories, EnumerateDirectories can be more efficient.
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.GetDirectories(System.String)">
            <summary>Returns an array of directories in the current <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> matching the given search criteria.</summary>
            <returns>An array of type <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> matching <paramref name="searchPattern"/>.</returns>
            <remarks>
            The EnumerateDirectories and GetDirectories methods differ as follows: When you use EnumerateDirectories, you can start enumerating the collection of names
            before the whole collection is returned; when you use GetDirectories, you must wait for the whole array of names to be returned before you can access the array.
            Therefore, when you are working with many files and directories, EnumerateDirectories can be more efficient.
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="searchPattern">
              The search string to match against the names of directories in path.
              This parameter can contain a combination of valid literal path and wildcard
              (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/> and <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>) characters, but does not support regular expressions.
            </param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.GetDirectories(System.String,System.IO.SearchOption)">
            <summary>Returns an array of directories in the current <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> matching the given search criteria and using a value to determine whether to search subdirectories.</summary>
            <returns>An array of type <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> matching <paramref name="searchPattern"/>.</returns>
            <remarks>If there are no subdirectories, or no subdirectories match the searchPattern parameter, this method returns an empty array.</remarks>
            <remarks>
            The EnumerateDirectories and GetDirectories methods differ as follows: When you use EnumerateDirectories, you can start enumerating the collection of names
            before the whole collection is returned; when you use GetDirectories, you must wait for the whole array of names to be returned before you can access the array.
            Therefore, when you are working with many files and directories, EnumerateDirectories can be more efficient.
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="searchPattern">
              The search string to match against the names of directories in path.
              This parameter can contain a combination of valid literal path and wildcard
              (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/> and <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>) characters, but does not support regular expressions.
            </param>
            <param name="searchOption">
              One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the <paramref name="searchOption"/>
              should include only the current directory or should include all subdirectories.
            </param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.GetAccessControl">
            <summary>Gets a <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object that encapsulates the access control list (ACL) entries for the directory described by the current DirectoryInfo object.</summary>
            <returns>A <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object that encapsulates the access control rules for the directory.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.GetAccessControl(System.Security.AccessControl.AccessControlSections)">
            <summary>Gets a <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object that encapsulates the specified type of access control list (ACL) entries for the directory described by the current <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> object.</summary>
            <param name="includeSections">One of the <see cref="T:System.Security.AccessControl.AccessControlSections"/> values that specifies the type of access control list (ACL) information to receive.</param>
            <returns>A <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object that encapsulates the access control rules for the file described by the path parameter.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.EnumerateFileSystemInfos">
            <summary>Returns an enumerable collection of file system information in the current directory.</summary>
            <returns>An enumerable collection of file system information in the current directory. </returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.EnumerateFileSystemInfos(System.String)">
            <summary>Returns an enumerable collection of file system information that matches a specified search pattern.</summary>
            <returns>An enumerable collection of file system information objects that matches <paramref name="searchPattern"/>.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="searchPattern">
              The search string to match against the names of directories in path.
              This parameter can contain a combination of valid literal path and wildcard
              (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/> and <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>) characters, but does not support regular expressions.
            </param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.EnumerateFileSystemInfos(System.String,System.IO.SearchOption)">
            <summary>Returns an enumerable collection of file system information that matches a specified search pattern and search subdirectory option.</summary>
            <returns>An enumerable collection of file system information objects that matches <paramref name="searchPattern"/> and <paramref name="searchOption"/>.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="searchPattern">
              The search string to match against the names of directories in path.
              This parameter can contain a combination of valid literal path and wildcard
              (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/> and <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>) characters, but does not support regular expressions.
            </param>
            <param name="searchOption">
              One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the <paramref name="searchOption"/>
              should include only the current directory or should include all subdirectories.
            </param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.EnumerateFileSystemInfos(Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions)">
            <summary>[AlphaFS] Returns an enumerable collection of file system information in the current directory.</summary>
            <returns>An enumerable collection of file system information in the current directory. </returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="options"><see cref="T:Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions"/> flags that specify how the directory is to be enumerated.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.EnumerateFileSystemInfos(System.String,Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions)">
            <summary>[AlphaFS] Returns an enumerable collection of file system information that matches a specified search pattern.</summary>
            <returns>An enumerable collection of file system information objects that matches <paramref name="searchPattern"/>.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="searchPattern">
              The search string to match against the names of directories in path.
              This parameter can contain a combination of valid literal path and wildcard
              (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/> and <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>) characters, but does not support regular expressions.
            </param>
            <param name="options"><see cref="T:Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions"/> flags that specify how the directory is to be enumerated.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.EnumerateFiles">
            <summary>Returns an enumerable collection of file information in the current directory.</summary>
            <returns>An enumerable collection of the files in the current directory.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.EnumerateFiles(System.String)">
            <summary>Returns an enumerable collection of file information that matches a search pattern.</summary>
            <returns>An enumerable collection of files that matches <paramref name="searchPattern"/>.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="searchPattern">
              The search string to match against the names of directories in path.
              This parameter can contain a combination of valid literal path and wildcard
              (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/> and <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>) characters, but does not support regular expressions.
            </param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.EnumerateFiles(System.String,System.IO.SearchOption)">
            <summary>Returns an enumerable collection of file information that matches a specified search pattern and search subdirectory option.</summary>
            <returns>An enumerable collection of files that matches <paramref name="searchPattern"/> and <paramref name="searchOption"/>.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="searchPattern">
              The search string to match against the names of directories in path.
              This parameter can contain a combination of valid literal path and wildcard
              (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/> and <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>) characters, but does not support regular expressions.
            </param>
            <param name="searchOption">
              One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the <paramref name="searchOption"/>
              should include only the current directory or should include all subdirectories.
            </param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.EnumerateFiles(Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions)">
            <summary>Returns an enumerable collection of file information in the current directory.</summary>
            <returns>An enumerable collection of the files in the current directory.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="options"><see cref="T:Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions"/> flags that specify how the directory is to be enumerated.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.EnumerateFiles(System.String,Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions)">
            <summary>Returns an enumerable collection of file information that matches a search pattern.</summary>
            <returns>An enumerable collection of files that matches <paramref name="searchPattern"/>.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="searchPattern">
              The search string to match against the names of directories in path.
              This parameter can contain a combination of valid literal path and wildcard
              (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/> and <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>) characters, but does not support regular expressions.
            </param>
            <param name="options"><see cref="T:Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions"/> flags that specify how the directory is to be enumerated.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.EnumerateDirectories">
            <summary>Returns an enumerable collection of directory information in the current directory.</summary>
            <returns>An enumerable collection of directories in the current directory.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.EnumerateDirectories(System.String)">
            <summary>Returns an enumerable collection of directory information that matches a specified search pattern.</summary>
            <returns>An enumerable collection of directories that matches <paramref name="searchPattern"/>.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="searchPattern">
              The search string to match against the names of directories in path.
              This parameter can contain a combination of valid literal path and wildcard
              (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/> and <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>) characters, but does not support regular expressions.
            </param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.EnumerateDirectories(System.String,System.IO.SearchOption)">
            <summary>Returns an enumerable collection of directory information that matches a specified search pattern and search subdirectory option.</summary>
            <returns>An enumerable collection of directories that matches <paramref name="searchPattern"/> and <paramref name="searchOption"/>.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="searchPattern">
              The search string to match against the names of directories in path.
              This parameter can contain a combination of valid literal path and wildcard
              (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/> and <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>) characters, but does not support regular expressions.
            </param>
            <param name="searchOption">
              One of the <see cref="T:System.IO.SearchOption"/> enumeration values that specifies whether the <paramref name="searchOption"/>
              should include only the current directory or should include all subdirectories.
            </param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.EnumerateDirectories(Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions)">
            <summary>[AlphaFS] Returns an enumerable collection of directory information in the current directory.</summary>
            <returns>An enumerable collection of directories in the current directory.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="options"><see cref="T:Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions"/> flags that specify how the directory is to be enumerated.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.EnumerateDirectories(System.String,Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions)">
            <summary>Returns an enumerable collection of directory information that matches a specified search pattern.</summary>
            <returns>An enumerable collection of directories that matches <paramref name="searchPattern"/>.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="searchPattern">
              The search string to match against the names of directories in path.
              This parameter can contain a combination of valid literal path and wildcard
              (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/> and <see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>) characters, but does not support regular expressions.
            </param>
            <param name="options"><see cref="T:Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions"/> flags that specify how the directory is to be enumerated.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.Delete">
            <summary>Deletes this <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> if it is empty.</summary>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.Delete(System.Boolean)">
            <summary>Deletes this instance of a <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/>, specifying whether to delete subdirectories and files.</summary>
            <remarks>
              <para>If the <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> has no files or subdirectories, this method deletes the <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> even if recursive is <see langword="false"/>.</para>
              <para>Attempting to delete a <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> that is not empty when recursive is false throws an <see cref="T:System.IO.IOException"/>.</para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="recursive"><see langword="true"/> to delete this directory, its subdirectories, and all files; otherwise, <see langword="false"/>.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.Delete(System.Boolean,System.Boolean)">
            <summary>[AlphaFS] Deletes this instance of a <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/>, specifying whether to delete files and subdirectories.</summary>
            <remarks>
              <para>If the <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> has no files or subdirectories, this method deletes the <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> even if recursive is <see langword="false"/>.</para>
              <para>Attempting to delete a <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> that is not empty when recursive is false throws an <see cref="T:System.IO.IOException"/>.</para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="recursive"><see langword="true"/> to delete this directory, its subdirectories, and all files; otherwise, <see langword="false"/>.</param>
            <param name="ignoreReadOnly"><see langword="true"/> ignores read only attribute of files and directories.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.CreateSubdirectory(System.String)">
            <summary>Creates a subdirectory or subdirectories on the specified path. The specified path can be relative to this instance of the <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> class.</summary>
            <param name="path">The specified path. This cannot be a different disk volume.</param>
            <returns>The last directory specified in <paramref name="path"/>.</returns>
            <remarks>
            Any and all directories specified in path are created, unless some part of path is invalid.
            The path parameter specifies a directory path, not a file path.
            If the subdirectory already exists, this method does nothing.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.CreateSubdirectory(System.String,System.Security.AccessControl.DirectorySecurity)">
            <summary>Creates a subdirectory or subdirectories on the specified path. The specified path can be relative to this instance of the <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> class.</summary>
            <param name="path">The specified path. This cannot be a different disk volume.</param>
            <param name="directorySecurity">The <see cref="T:System.Security.AccessControl.DirectorySecurity"/> security to apply.</param>
            <returns>The last directory specified in <paramref name="path"/>.</returns>
            <remarks>
            Any and all directories specified in path are created, unless some part of path is invalid.
            The path parameter specifies a directory path, not a file path.
            If the subdirectory already exists, this method does nothing.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.CreateSubdirectory(System.String,System.Boolean)">
            <summary>[AlphaFS] Creates a subdirectory or subdirectories on the specified path. The specified path can be relative to this instance of the <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> class.</summary>
            <returns>The last directory specified in <paramref name="path"/>.</returns>
            <remarks>
            Any and all directories specified in path are created, unless some part of path is invalid.
            The path parameter specifies a directory path, not a file path.
            If the subdirectory already exists, this method does nothing.
            </remarks>
            <param name="path">The specified path. This cannot be a different disk volume.</param>
            <param name="compress">When <see langword="true"/> compresses the directory.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.CreateSubdirectory(System.String,System.String,System.Boolean)">
            <summary>[AlphaFS] Creates a subdirectory or subdirectories on the specified path. The specified path can be relative to this instance of the <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> class.</summary>
            <param name="path">The specified path. This cannot be a different disk volume.</param>
            <param name="templatePath">The path of the directory to use as a template when creating the new directory.</param>
            <param name="compress">When <see langword="true"/> compresses the directory.</param>
            <returns>The last directory specified in <paramref name="path"/>.</returns>
            <remarks>
            Any and all directories specified in path are created, unless some part of path is invalid.
            The path parameter specifies a directory path, not a file path.
            If the subdirectory already exists, this method does nothing.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.CreateSubdirectory(System.String,System.Security.AccessControl.DirectorySecurity,System.Boolean)">
            <summary>[AlphaFS] Creates a subdirectory or subdirectories on the specified path. The specified path can be relative to this instance of the <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> class.</summary>
            <param name="path">The specified path. This cannot be a different disk volume.</param>
            <param name="directorySecurity">The <see cref="T:System.Security.AccessControl.DirectorySecurity"/> security to apply.</param>
            <param name="compress">When <see langword="true"/> compresses the directory.</param>
            <returns>The last directory specified in <paramref name="path"/>.</returns>
            <remarks>
            Any and all directories specified in path are created, unless some part of path is invalid.
            The path parameter specifies a directory path, not a file path.
            If the subdirectory already exists, this method does nothing.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.CreateSubdirectory(System.String,System.String,System.Security.AccessControl.DirectorySecurity,System.Boolean)">
            <summary>[AlphaFS] Creates a subdirectory or subdirectories on the specified path. The specified path can be relative to this instance of the <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> class.</summary>
            <param name="templatePath">The path of the directory to use as a template when creating the new directory.</param>
            <param name="path">The specified path. This cannot be a different disk volume.</param>
            <param name="compress">When <see langword="true"/> compresses the directory.</param>
            <param name="directorySecurity">The <see cref="T:System.Security.AccessControl.DirectorySecurity"/> security to apply.</param>
            <returns>The last directory specified in <paramref name="path"/>.</returns>
            <remarks>
            Any and all directories specified in path are created, unless some part of path is invalid.
            The path parameter specifies a directory path, not a file path.
            If the subdirectory already exists, this method does nothing.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.CreateSubdirectoryCore(System.String,System.String,System.Security.AccessControl.DirectorySecurity,System.Boolean)">
            <summary>Creates a subdirectory or subdirectories on the specified path. The specified path can be relative to this instance of the DirectoryInfo class.</summary>
            <returns>The last directory specified in path as an <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> object.</returns>
            <remarks>
            Any and all directories specified in path are created, unless some part of path is invalid.
            The path parameter specifies a directory path, not a file path.
            If the subdirectory already exists, this method does nothing.
            </remarks>
            <param name="path">The specified path. This cannot be a different disk volume or Universal Naming Convention (UNC) name.</param>
            <param name="templatePath">The path of the directory to use as a template when creating the new directory.</param>
            <param name="directorySecurity">The <see cref="T:System.Security.AccessControl.DirectorySecurity"/> security to apply.</param>
            <param name="compress">When <see langword="true"/> compresses the directory.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.Create">
            <summary>Creates a directory.</summary>
            <remarks>If the directory already exists, this method does nothing.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.Create(System.Security.AccessControl.DirectorySecurity)">
            <summary>Creates a directory using a <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object.</summary>
            <param name="directorySecurity">The access control to apply to the directory.</param>
            <remarks>If the directory already exists, this method does nothing.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.Create(System.Boolean)">
            <summary>[AlphaFS] Creates a directory using a <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object.</summary>
            <param name="compress">When <see langword="true"/> compresses the directory.</param>
            <remarks>If the directory already exists, this method does nothing.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.Create(System.Security.AccessControl.DirectorySecurity,System.Boolean)">
            <summary>[AlphaFS] Creates a directory using a <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object.</summary>
            <param name="directorySecurity">The access control to apply to the directory.</param>
            <param name="compress">When <see langword="true"/> compresses the directory.</param>
            <remarks>If the directory already exists, this method does nothing.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.EnumerateAlternateDataStreams">
            <summary>[AlphaFS] Returns an enumerable collection of <see cref="T:Alphaleonis.Win32.Filesystem.AlternateDataStreamInfo"/> instances for the directory.</summary>
            <returns>An enumerable collection of <see cref="T:Alphaleonis.Win32.Filesystem.AlternateDataStreamInfo"/> instances for the directory.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> class on the specified path.</summary>
            <param name="path">The path on which to create the <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/>.</param>
            <remarks>
            This constructor does not check if a directory exists. This constructor is a placeholder for a string that is used to access the disk in subsequent operations.
            The path parameter can be a file name, including a file on a Universal Naming Convention (UNC) share.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.#ctor(System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> class on the specified path.</summary>
            <param name="path">The path on which to create the <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/>.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
            <remarks>This constructor does not check if a directory exists. This constructor is a placeholder for a string that is used to access the disk in subsequent operations.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.#ctor(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Boolean,System.Boolean)">
            <summary>[AlphaFS] Special internal implementation.</summary>
            <param name="transaction">The transaction.</param>
            <param name="fullPath">The full path on which to create the <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/>.</param>
            <param name="junk1">Not used.</param>
            <param name="junk2">Not used.</param>
            <remarks>This constructor does not check if a directory exists. This constructor is a placeholder for a string that is used to access the disk in subsequent operations.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.#ctor(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>[AlphaFS] Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> class on the specified path.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The path on which to create the <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/>.</param>
            <remarks>This constructor does not check if a directory exists. This constructor is a placeholder for a string that is used to access the disk in subsequent operations.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryInfo.#ctor(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> class on the specified path.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The path on which to create the <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/>.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
            <remarks>This constructor does not check if a directory exists. This constructor is a placeholder for a string that is used to access the disk in subsequent operations.</remarks>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DirectoryInfo.Exists">
            <summary>Gets a value indicating whether the directory exists.</summary>
            <remarks>
              <para>The <see cref="P:Alphaleonis.Win32.Filesystem.DirectoryInfo.Exists"/> property returns <see langword="false"/> if any error occurs while trying to determine if the
              specified directory exists.</para>
              <para>This can occur in situations that raise exceptions such as passing a directory name with invalid characters or too many
              characters,</para>
              <para>a failing or missing disk, or if the caller does not have permission to read the directory.</para>
            </remarks>
            <value><see langword="true"/> if the directory exists; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DirectoryInfo.Name">
            <summary>Gets the name of this <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> instance.</summary>
            <value>The directory name.</value>
            <remarks>
              <para>This Name property returns only the name of the directory, such as "Bin".</para>
              <para>To get the full path, such as "c:\public\Bin", use the FullName property.</para>
            </remarks>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DirectoryInfo.Parent">
            <summary>Gets the parent directory of a specified subdirectory.</summary>
            <value>The parent directory, or null if the path is null or if the file path denotes a root (such as "\", "C:", or * "\\server\share").</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DirectoryInfo.Root">
            <summary>Gets the root portion of the directory.</summary>
            <value>An object that represents the root of the directory.</value>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.NativeMethods.EncryptedFileRawMode">
            <summary>Indicates the operation to be performed when opening a file using the OpenEncryptedFileRaw.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.EncryptedFileRawMode.CreateForExport">
            <summary>(0) Open the file for export (backup).</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.EncryptedFileRawMode.CreateForImport">
            <summary>(1) The file is being opened for import (restore).</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.EncryptedFileRawMode.CreateForDir">
            <summary>(2) Import (restore) a directory containing encrypted files. This must be combined with one of the previous two flags to indicate the operation.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.EncryptedFileRawMode.OverwriteHidden">
            <summary>(4) Overwrite a hidden file on import.</summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.NativeMethods.STREAM_INFO_LEVELS">
            <summary>Defines values that are used with the FindFirstStreamW function to specify the information level of the returned data.</summary>
            <remarks>
              <para>Minimum supported client: Windows Vista [desktop apps only]</para>
              <para>Minimum supported server: Windows Server 2003 [desktop apps only]</para>
            </remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.STREAM_INFO_LEVELS.FindStreamInfoStandard">
            <summary>The FindFirstStreamW function retrieves standard stream information. The data is returned in a <see cref="T:Alphaleonis.Win32.Filesystem.NativeMethods.WIN32_FIND_STREAM_DATA"/> structure.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.STREAM_INFO_LEVELS.FindStreamInfoMaxInfoLevel">
            <summary>Used to determine valid enumeration values. All supported enumeration values are less than FindStreamInfoMaxInfoLevel.</summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.NativeMethods.SetupDiGetClassDevsExFlags">
            <summary>Specifies control options that filter the device information elements that are added to the device information set.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.SetupDiGetClassDevsExFlags.Default">
            <summary>DIGCF_DEFAULT
            <para>Return only the device that is associated with the system default device interface, if one is set, for the specified device interface classes.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.SetupDiGetClassDevsExFlags.Present">
            <summary>DIGCF_PRESENT
            <para>Return only devices that are currently present.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.SetupDiGetClassDevsExFlags.AllClasses">
            <summary>DIGCF_ALLCLASSES
            <para>Return a list of installed devices for the specified device setup classes or device interface classes.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.SetupDiGetClassDevsExFlags.Profile">
            <summary>DIGCF_PROFILE
            <para>Return only devices that are a part of the current hardware profile.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.SetupDiGetClassDevsExFlags.DeviceInterface">
            <summary>DIGCF_DEVICEINTERFACE
            <para>
            Return devices that support device interfaces for the specified device interface classes.
            This flag must be set in the Flags parameter if the Enumerator parameter specifies a Device Instance ID. 
            </para>
            </summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.NativeMethods.FileInfoByHandleClass">
            <summary>FILE_INFO_BY_HANDLE_CLASS
            <para>Identifies the type of file information that GetFileInformationByHandleEx should retrieve or SetFileInformationByHandle should set.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.FileInfoByHandleClass.FileBasicInfo">
            <summary>FILE_BASIC_INFO
            <para>Minimal information for the file should be retrieved or set. Used for file handles.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.FileInfoByHandleClass.FileIdBothDirectoryInfo">
            <summary>FILE_ID_BOTH_DIR_INFO
            <para>Files in the specified directory should be retrieved. Used for directory handles.</para>
            <para>Use only when calling GetFileInformationByHandleEx.</para>
            <remarks>
            <para>The number of files returned for each call to GetFileInformationByHandleEx</para>
            <para>depends on the size of the buffer that is passed to the function.</para>
            <para>Any subsequent calls to GetFileInformationByHandleEx on the same handle</para>
            <para>will resume the enumeration operation after the last file is returned.</para>
            </remarks>
            </summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.NativeMethods.FindExAdditionalFlags">
            <summary>Additional flags that control the search.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.FindExAdditionalFlags.None">
            <summary>No additional flags used.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.FindExAdditionalFlags.CaseSensitive">
            <summary>Searches are case-sensitive.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.FindExAdditionalFlags.LargeFetch">
            <summary>Uses a larger buffer for directory queries, which can increase performance of the find operation.</summary>
            <remarks>This value is not supported until Windows Server 2008 R2 and Windows 7.</remarks>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.NativeMethods.FINDEX_INFO_LEVELS">
            <summary>FINDEX_INFO_LEVELS Enumeration - Defines values that are used with the FindFirstFileEx function to specify the information level of the returned data.</summary>
            <remarks>
              <para>Minimum supported client: Windows XP [desktop apps | Windows Store apps]</para>
              <para>Minimum supported server: Windows Server 2003 [desktop apps | Windows Store apps]</para>
            </remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.FINDEX_INFO_LEVELS.Standard">
            <summary>A standard set of attribute is returned in a <see cref="T:Alphaleonis.Win32.Filesystem.NativeMethods.WIN32_FIND_DATA"/> structure.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.FINDEX_INFO_LEVELS.Basic">
            <summary>The FindFirstFileEx function does not query the short file name, improving overall enumeration speed.</summary>
            <remarks>This value is not supported until Windows Server 2008 R2 and Windows 7.</remarks>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.NativeMethods.FINDEX_SEARCH_OPS">
            <summary>FINDEX_SEARCH_OPS Enumeration - Defines values that are used with the FindFirstFileEx function to specify the type of filtering to perform.</summary>
            <remarks>
              <para>Minimum supported client: Windows XP [desktop apps | Windows Store apps]</para>
              <para>Minimum supported server: Windows Server 2003 [desktop apps | Windows Store apps]</para>
            </remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.FINDEX_SEARCH_OPS.SearchNameMatch">
            <summary>The search for a file that matches a specified file name.
            <para>The lpSearchFilter parameter of FindFirstFileEx must be NULL when this search operation is used.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.FINDEX_SEARCH_OPS.SearchLimitToDirectories">
            <summary>This is an advisory flag. If the file system supports directory filtering,
            <para>the function searches for a file that matches the specified name and is also a directory.</para> 
            <para>If the file system does not support directory filtering, this flag is silently ignored.</para>
            <para>&#160;</para>
            <remarks>
            <para>The lpSearchFilter parameter of the FindFirstFileEx function must be NULL when this search value is used.</para>
            <para>If directory filtering is desired, this flag can be used on all file systems,</para>
            <para>but because it is an advisory flag and only affects file systems that support it,</para>
            <para>the application must examine the file attribute data stored in the lpFindFileData parameter</para>
            <para>of the FindFirstFileEx function to determine whether the function has returned a handle to a directory.</para>
            </remarks>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.FINDEX_SEARCH_OPS.SearchLimitToDevices">
            <summary>This filtering type is not available.</summary>
            <remarks>For more information, see Device Interface Classes.</remarks>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.NativeMethods.ErrorMode">
            <summary>Enum for struct ChangeErrorMode.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.ErrorMode.SystemDefault">
            <summary>Use the system default, which is to display all error dialog boxes.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.ErrorMode.FailCriticalErrors">
            <summary>The system does not display the critical-error-handler message box. Instead, the system sends the error to the calling process/thread.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.ErrorMode.NoGpfaultErrorbox">
            <summary>The system does not display the Windows Error Reporting dialog.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.ErrorMode.NoAlignmentFaultExcept">
            <summary>The system automatically fixes memory alignment faults and makes them invisible to the application. It does this for the calling process and any descendant processes. This feature is only supported by certain processor architectures.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.ErrorMode.NoOpenFileErrorbox">
            <summary>The system does not display a message box when it fails to find a file. Instead, the error is returned to the calling process/thread.</summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.NativeMethods.SetupDiGetDeviceRegistryPropertyEnum">
            <summary>Flags for SetupDiGetDeviceRegistryProperty().</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.SetupDiGetDeviceRegistryPropertyEnum.DeviceDescription">
            <summary>SPDRP_DEVICEDESC
            <para>Represents a description of a device instance.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.SetupDiGetDeviceRegistryPropertyEnum.HardwareId">
            <summary>SPDRP_HARDWAREID
            <para>Represents the list of hardware identifiers for a device instance.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.SetupDiGetDeviceRegistryPropertyEnum.CompatibleIds">
            <summary>SPDRP_COMPATIBLEIDS
            <para>Represents the list of compatible identifiers for a device instance.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.SetupDiGetDeviceRegistryPropertyEnum.Service">
            <summary>SPDRP_CLASS
            <para>Represents the name of the service that is installed for a device instance.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.SetupDiGetDeviceRegistryPropertyEnum.Class">
            <summary>SPDRP_CLASS
            <para>Represents the name of the device setup class that a device instance belongs to.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.SetupDiGetDeviceRegistryPropertyEnum.ClassGuid">
            <summary>SPDRP_CLASSGUID
            <para>Represents the <see cref="T:System.Guid"/> of the device setup class that a device instance belongs to.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.SetupDiGetDeviceRegistryPropertyEnum.Driver">
            <summary>SPDRP_DRIVER
            <para>Represents the registry entry name of the driver key for a device instance.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.SetupDiGetDeviceRegistryPropertyEnum.Manufacturer">
            <summary>SPDRP_MFG
            <para>Represents the name of the manufacturer of a device instance.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.SetupDiGetDeviceRegistryPropertyEnum.FriendlyName">
            <summary>SPDRP_FRIENDLYNAME
            <para>Represents the friendly name of a device instance.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.SetupDiGetDeviceRegistryPropertyEnum.LocationInformation">
            <summary>SPDRP_LOCATION_INFORMATION
            <para>Represents the bus-specific physical location of a device instance.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.SetupDiGetDeviceRegistryPropertyEnum.PhysicalDeviceObjectName">
            <summary>SPDRP_PHYSICAL_DEVICE_LOCATION
            <para>Encapsulates the physical device location information provided by a device's firmware to Windows.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.SetupDiGetDeviceRegistryPropertyEnum.EnumeratorName">
            <summary>SPDRP_ENUMERATOR_NAME
            <para>Represents the name of the enumerator for a device instance.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.SetupDiGetDeviceRegistryPropertyEnum.LocationPaths">
            <summary>SPDRP_LOCATION_PATHS
            <para>Represents the location of a device instance in the device tree.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.SetupDiGetDeviceRegistryPropertyEnum.BaseContainerId">
            <summary>SPDRP_BASE_CONTAINERID
            <para>Represents the <see cref="T:System.Guid"/> value of the base container identifier (ID) .The Windows Plug and Play (PnP) manager assigns this value to the device node (devnode).</para>
            </summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.NativeMethods.VolumeInfoAttributes">
            <summary>Volume Attributes used by the GetVolumeInfo() function.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.VolumeInfoAttributes.None">
            <summary>No VolumeInfo attributes.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.VolumeInfoAttributes.CaseSensitiveSearch">
            <summary>FILE_CASE_SENSITIVE_SEARCH
            <para>The specified volume supports case-sensitive file names.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.VolumeInfoAttributes.CasePreservedNames">
            <summary>FILE_CASE_PRESERVED_NAMES
            <para>The specified volume supports preserved case of file names when it places a name on disk.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.VolumeInfoAttributes.UnicodeOnDisk">
            <summary>FILE_UNICODE_ON_DISK
            <para>The specified volume supports Unicode in file names as they appear on disk.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.VolumeInfoAttributes.PersistentAcls">
            <summary>FILE_PERSISTENT_ACLS
            <para>
            The specified volume preserves and enforces access control lists (ACL).
            For example, the NTFS file system preserves and enforces ACLs, and the FAT file system does not.
            </para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.VolumeInfoAttributes.Compression">
            <summary>FILE_FILE_COMPRESSION
            <para>The specified volume supports file-based compression.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.VolumeInfoAttributes.VolumeQuotas">
            <summary>FILE_VOLUME_QUOTAS
            <para>The specified volume supports disk quotas.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.VolumeInfoAttributes.SupportsSparseFiles">
            <summary>FILE_SUPPORTS_SPARSE_FILES
            <para>The specified volume supports sparse files.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.VolumeInfoAttributes.SupportsReparsePoints">
            <summary>FILE_SUPPORTS_REPARSE_POINTS
            <para>The specified volume supports re-parse points.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.VolumeInfoAttributes.SupportsRemoteStorage">
            <summary>(does not appear on MSDN)</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.VolumeInfoAttributes.VolumeIsCompressed">
            <summary>FILE_VOLUME_IS_COMPRESSED
            <para>The specified volume is a compressed volume, for example, a DoubleSpace volume.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.VolumeInfoAttributes.SupportsObjectIds">
            <summary>FILE_SUPPORTS_OBJECT_IDS
            <para>The specified volume supports object identifiers.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.VolumeInfoAttributes.SupportsEncryption">
            <summary>FILE_SUPPORTS_ENCRYPTION
            <para>The specified volume supports the Encrypted File System (EFS). For more information, see File Encryption.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.VolumeInfoAttributes.NamedStreams">
            <summary>FILE_NAMED_STREAMS
            <para>The specified volume supports named streams.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.VolumeInfoAttributes.ReadOnlyVolume">
            <summary>FILE_READ_ONLY_VOLUME
            <para>The specified volume is read-only.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.VolumeInfoAttributes.SequentialWriteOnce">
            <summary>FILE_SEQUENTIAL_WRITE_ONCE
            <para>The specified volume is read-only.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.VolumeInfoAttributes.SupportsTransactions">
            <summary>FILE_SUPPORTS_TRANSACTIONS
            <para>The specified volume supports transactions.For more information, see About KTM.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.VolumeInfoAttributes.SupportsHardLinks">
            <summary>FILE_SUPPORTS_HARD_LINKS
            <para>The specified volume supports hard links. For more information, see Hard Links and Junctions.</para>
            </summary>
            <remarks>Windows Server 2008, Windows Vista, Windows Server 2003, and Windows XP: This value is not supported until Windows Server 2008 R2 and Windows 7.</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.VolumeInfoAttributes.SupportsExtendedAttributes">
            <summary>FILE_SUPPORTS_EXTENDED_ATTRIBUTES
            <para>
            The specified volume supports extended attributes. An extended attribute is a piece of application-specific metadata
            that an application can associate with a file and is not part of the file's data.
            </para>
            </summary>
            <remarks>Windows Server 2008, Windows Vista, Windows Server 2003, and Windows XP: This value is not supported until Windows Server 2008 R2 and Windows 7.</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.VolumeInfoAttributes.SupportsOpenByFileId">
            <summary>FILE_SUPPORTS_OPEN_BY_FILE_ID
            <para>The file system supports open by FileID. For more information, see FILE_ID_BOTH_DIR_INFO.</para>
            </summary>
            <remarks>Windows Server 2008, Windows Vista, Windows Server 2003, and Windows XP: This value is not supported until Windows Server 2008 R2 and Windows 7.</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.VolumeInfoAttributes.SupportsUsnJournal">
            <summary>FILE_SUPPORTS_USN_JOURNAL
            <para>The specified volume supports update sequence number (USN) journals. For more information, see Change Journal Records.</para>
            </summary>
            <remarks>Windows Server 2008, Windows Vista, Windows Server 2003, and Windows XP: This value is not supported until Windows Server 2008 R2 and Windows 7.</remarks>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.NativeMethods.GetFileExInfoLevels">
            <summary>Defines values that are used with the GetFileAttributesEx and GetFileAttributesTransacted functions to specify the information level of the returned data.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.GetFileExInfoLevels.GetFileExInfoStandard">
            <summary>The GetFileAttributesEx or GetFileAttributesTransacted function retrieves a standard set of attribute information. The data is returned in a WIN32_FILE_ATTRIBUTE_DATA structure.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.OpenEncryptedFileRaw(System.String,Alphaleonis.Win32.Filesystem.NativeMethods.EncryptedFileRawMode,Alphaleonis.Win32.Filesystem.SafeEncryptedFileRawHandle@)">
            <summary>Opens an encrypted file in order to backup (export) or restore (import) the file.</summary>
            <returns>If the function succeeds, it returns ERROR_SUCCESS.</returns>
            <returns>If the function fails, it returns a nonzero error code defined in WinError.h. You can use FormatMessage with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic text description of the error.</returns>
            <remarks>Minimum supported client: Windows XP Professional [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2003 [desktop apps only]</remarks>
            <param name="lpFileName">The name of the file to be opened.</param>
            <param name="ulFlags">The operation to be performed.</param>
            <param name="pvContext">[out] The address of a context block that must be presented in subsequent calls to
            ReadEncryptedFileRaw, WriteEncryptedFileRaw, or CloseEncryptedFileRaw.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.CloseEncryptedFileRaw(System.IntPtr)">
            <summary>Closes an encrypted file after a backup or restore operation, and frees associated system resources.</summary>
            <remarks>Minimum supported client: Windows XP Professional [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2003 [desktop apps only]</remarks>
            <param name="pvContext">A pointer to a system-defined context block. The OpenEncryptedFileRaw function returns the context block.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.ReadEncryptedFileRaw(Alphaleonis.Win32.Filesystem.NativeMethods.EncryptedFileRawExportCallback,System.IntPtr,Alphaleonis.Win32.Filesystem.SafeEncryptedFileRawHandle)">
            <summary>Backs up (export) encrypted files. This is one of a group of Encrypted File System (EFS) functions that is intended to implement backup and restore functionality, while maintaining files in their encrypted state.</summary>
            <returns>If the function succeeds, it returns ERROR_SUCCESS.</returns>
            <returns>If the function fails, it returns a nonzero error code defined in WinError.h. You can use FormatMessage with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic text description of the error.</returns>
            <remarks>Minimum supported client: Windows XP Professional [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2003 [desktop apps only]</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.WriteEncryptedFileRaw(Alphaleonis.Win32.Filesystem.NativeMethods.EncryptedFileRawImportCallback,System.IntPtr,Alphaleonis.Win32.Filesystem.SafeEncryptedFileRawHandle)">
            <summary>Restores (import) encrypted files. This is one of a group of Encrypted File System (EFS) functions that is intended to implement backup and restore functionality, while maintaining files in their encrypted state.</summary>
            <returns>If the function succeeds, it returns ERROR_SUCCESS.</returns>
            <returns>If the function fails, it returns a nonzero error code defined in WinError.h. You can use FormatMessage with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic text description of the error.</returns>
            <remarks>Minimum supported client: Windows XP Professional [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2003 [desktop apps only]</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.AssocCreate(System.Guid,System.Guid@,Alphaleonis.Win32.Filesystem.NativeMethods.IQueryAssociations@)">
            <summary>Returns a pointer to an IQueryAssociations object.</summary>
            <returns>If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <remarks>Minimum supported client: Windows 2000 Professional, Windows XP [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows 2000 Server [desktop apps only]</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.AssocQueryString(Alphaleonis.Win32.Filesystem.Shell32.AssociationAttributes,Alphaleonis.Win32.Filesystem.Shell32.AssociationString,System.String,System.String,System.Text.StringBuilder,System.UInt32@)">
            <summary>Searches for and retrieves a file or protocol association-related string from the registry.</summary>
            <returns>Return value Type: HRESULT. Returns a standard COM error value, including the following: S_OK, E_POINTER and S_FALSE.</returns>
            <remarks>Minimum supported client: Windows 2000 Professional</remarks>
            <remarks>Minimum supported server: Windows 2000 Server</remarks>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.NativeMethods.IQueryAssociations">
            <summary>Exposes methods that simplify the process of retrieving information stored in the registry in association with defining a file type or protocol and associating it with an application.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.IQueryAssociations.Init(Alphaleonis.Win32.Filesystem.Shell32.AssociationAttributes,System.String,System.IntPtr,System.IntPtr)">
            <summary>Initializes the IQueryAssociations interface and sets the root key to the appropriate ProgID.</summary>
            <returns>If this method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <remarks>Minimum supported client: Windows 2000 Professional, Windows XP [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows 2000 Server [desktop apps only]</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.IQueryAssociations.GetString(Alphaleonis.Win32.Filesystem.Shell32.AssociationAttributes,Alphaleonis.Win32.Filesystem.Shell32.AssociationString,System.String,System.Text.StringBuilder,System.Int32@)">
            <summary>Searches for and retrieves a file or protocol association-related string from the registry.</summary>
            <returns>A standard COM error value, including the following: S_OK, E_POINTER, S_FALSE</returns>
            <remarks>Minimum supported client: Windows 2000 Professional, Windows XP [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows 2000 Server [desktop apps only]</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.PathFileExists(System.String)">
            <summary>Determines whether a path to a file system object such as a file or folder is valid.</summary>
            <returns><see langword="true"/> if the file exists; otherwise, <see langword="false"/>. Call GetLastError for extended error information.</returns>
            <remarks>
            This function tests the validity of the path.
            A path specified by Universal Naming Convention (UNC) is limited to a file only; that is, \\server\share\file is permitted.
            A network share path to a server or server share is not permitted; that is, \\server or \\server\share.
            This function returns FALSE if a mounted remote drive is out of service.
            </remarks>
            <remarks>Minimum supported client: Windows 2000 Professional</remarks>
            <remarks>Minimum supported server: Windows 2000 Server</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.PathCreateFromUrl(System.String,System.Text.StringBuilder,System.UInt32@,System.UInt32)">
            <summary>Converts a file URL to a Microsoft MS-DOS path.</summary>
            <returns>Type: HRESULT
            If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.
            </returns>
            <remarks>Minimum supported client: Windows 2000 Professional, Windows XP [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows 2000 Server [desktop apps only]</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.PathCreateFromUrlAlloc(System.String,System.Text.StringBuilder@,System.UInt32)">
            <summary>Creates a path from a file URL.</summary>
            <returns>Type: HRESULT
            If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.
            </returns>
            <remarks>Minimum supported client: Windows Vista [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2008 [desktop apps only]</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.UrlCreateFromPath(System.String,System.Text.StringBuilder,System.UInt32@,System.UInt32)">
            <summary>Converts a Microsoft MS-DOS path to a canonicalized URL.</summary>
            <returns>Type: HRESULT
            Returns S_FALSE if pszPath is already in URL format. In this case, pszPath will simply be copied to pszUrl.
            Otherwise, it returns S_OK if successful or a standard COM error value if not.
            </returns>
            <remarks>
            UrlCreateFromPath does not support extended paths. These are paths that include the extended-length path prefix "\\?\".
            </remarks>
            <remarks>Minimum supported client: Windows 2000 Professional, Windows XP [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows 2000 Server [desktop apps only]</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.UrlIs(System.String,Alphaleonis.Win32.Filesystem.Shell32.UrlType)">
            <summary>Tests whether a URL is a specified type.</summary>
            <returns>
            Type: BOOL
            For all but one of the URL types, UrlIs returns <see langword="true"/> if the URL is the specified type, <see langword="true"/> otherwise.
            If UrlIs is set to <see cref="F:Alphaleonis.Win32.Filesystem.Shell32.UrlType.IsAppliable"/>, UrlIs will attempt to determine the URL scheme.
            If the function is able to determine a scheme, it returns <see langword="true"/>, or <see langword="false"/>.
            </returns>
            <remarks>Minimum supported client: Windows 2000 Professional, Windows XP [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows 2000 Server [desktop apps only]</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.DestroyIcon(System.IntPtr)">
            <summary>Destroys an icon and frees any memory the icon occupied.</summary>
            <remarks>Minimum supported client: Windows XP [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows 2000 Server [desktop apps only]</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.ShGetFileInfo(System.String,System.IO.FileAttributes,Alphaleonis.Win32.Filesystem.Shell32.FileInfo@,System.UInt32,Alphaleonis.Win32.Filesystem.Shell32.FileAttributes)">
            <summary>Retrieves information about an object in the file system, such as a file, folder, directory, or drive root.</summary>
            <remarks>You should call this function from a background thread. Failure to do so could cause the UI to stop responding.</remarks>
            <remarks>Minimum supported client: Windows 2000 Professional [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows 2000 Server [desktop apps only]</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.CreateTransaction(Alphaleonis.Win32.Security.NativeMethods.SecurityAttributes,System.IntPtr,System.UInt32,System.UInt32,System.UInt32,System.Int32,System.String)">
            <summary>
              Creates a new transaction object.
            </summary>
            <remarks>
              <para>Use the <see cref="M:Alphaleonis.Win32.Filesystem.NativeMethods.CloseHandle(System.IntPtr)"/> function to close the transaction handle. If the last transaction handle is closed
              beforea client calls the CommitTransaction function with the transaction handle, then KTM rolls back the transaction.</para>
              <para>Minimum supported client: Windows Vista</para>
              <para>Minimum supported server:Windows Server 2008</para>
            </remarks>
            <returns>
              <para>If the function succeeds, the return value is a handle to the transaction.</para>
              <para>If the function fails, the return value is INVALID_HANDLE_VALUE. To get extended error information, call the GetLastError
              function.</para>
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.CommitTransaction(System.Runtime.InteropServices.SafeHandle)">
            <summary>Requests that the specified transaction be committed.</summary>
            <remarks>
              <para>You can commit any transaction handle that has been opened or created using the TRANSACTION_COMMIT permission; any
              application can commit a transaction, not just the creator.</para>
              <para>This function can only be called if the transaction is still active, not prepared, pre-prepared, or rolled back.</para>
              <para>Minimum supported client: Windows Vista</para>
              <para>Minimum supported server:Windows Server 2008</para>
            </remarks>
            <returns>
              <para>If the function succeeds, the return value is nonzero.</para>
              <para>If the function fails, the return value is 0 (zero). To get extended error information, call the GetLastError function.</para>
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.RollbackTransaction(System.Runtime.InteropServices.SafeHandle)">
            <summary>
              Requests that the specified transaction be rolled back. This function is synchronous.      
            </summary>
            <returns>
              <para>If the function succeeds, the return value is nonzero.</para>
              <para>If the function fails, the return value is zero. To get extended error information, call the GetLastError function. </para>
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.CloseHandle(System.IntPtr)">
            <summary>Closes an open object handle.</summary>
            <remarks>
              <para>The CloseHandle function closes handles to the following objects:</para>
              <para>Access token, Communications device, Console input, Console screen buffer, Event, File, File mapping, I/O completion port,
              Job, Mailslot, Memory resource notification, Mutex, Named pipe, Pipe, Process, Semaphore, Thread, Transaction, Waitable
              timer.</para>
              <para>SetLastError is set to <see langword="false"/>.</para>
              <para>Minimum supported client: Windows 2000 Professional [desktop apps | Windows Store apps]</para>
              <para>Minimum supported server: Windows 2000 Server [desktop apps | Windows Store apps]</para>
            </remarks>
            <returns>
              <para>If the function succeeds, the return value is nonzero.</para>
              <para>If the function fails, the return value is zero. To get extended error information, call GetLastError.</para>
              <para>If the application is running under a debugger, the function will throw an exception if it receives either a handle value
              that is not valid or a pseudo-handle value.This can happen if you close a handle twice, or if you call CloseHandle on a handle
              returned by the FindFirstFile function instead of calling the FindClose function.</para>
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.CopyFileEx(System.String,System.String,Alphaleonis.Win32.Filesystem.NativeMethods.NativeCopyMoveProgressRoutine,System.IntPtr,System.Boolean@,Alphaleonis.Win32.Filesystem.CopyOptions)">
            <summary>
              Copies an existing file to a new file, notifying the application of its progress through a callback function.
            </summary>
            <remarks>
              <para>This function fails with ERROR_ACCESS_DENIED if the destination file already exists and has the FILE_ATTRIBUTE_HIDDEN or
              FILE_ATTRIBUTE_READONLY attribute set.</para>
              <para>This function preserves extended attributes, OLE structured storage, NTFS file system alternate data streams, security
              resource attributes, and file attributes.</para>
              <para>Windows 7, Windows Server 2008 R2, Windows Server 2008, Windows Vista, Windows Server 2003, and Windows XP:
              Security resource attributes (ATTRIBUTE_SECURITY_INFORMATION) for the existing file are not copied to the new file until
              Windows 8 and Windows Server 2012.</para>
              <para>Minimum supported client: Windows XP [desktop apps only]</para>
              <para>Minimum supported server: Windows Server 2003 [desktop apps only]</para>
            </remarks>
            <param name="lpExistingFileName">Filename of the existing file.</param>
            <param name="lpNewFileName">Filename of the new file.</param>
            <param name="lpProgressRoutine">The progress routine.</param>
            <param name="lpData">The data.</param>
            <param name="pbCancel">[out] The pb cancel.</param>
            <param name="dwCopyFlags">The copy flags.</param>
            <returns>
              <para>If the function succeeds, the return value is nonzero.</para>
              <para>If the function fails, the return value is zero. To get extended error information, call GetLastError.</para>
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.CopyFileTransacted(System.String,System.String,Alphaleonis.Win32.Filesystem.NativeMethods.NativeCopyMoveProgressRoutine,System.IntPtr,System.Boolean@,Alphaleonis.Win32.Filesystem.CopyOptions,System.Runtime.InteropServices.SafeHandle)">
            <summary>
              Copies an existing file to a new file as a transacted operation, notifying the application of its progress through a callback
              function.
            </summary>
            <remarks>
              <para>This function fails with ERROR_ACCESS_DENIED if the destination file already exists and has the FILE_ATTRIBUTE_HIDDEN or
              FILE_ATTRIBUTE_READONLY attribute set.</para>
              <para>This function preserves extended attributes, OLE structured storage, NTFS file system alternate data streams, security
              resource attributes, and file attributes.</para>
              <para>Windows 7, Windows Server 2008 R2, Windows Server 2008, Windows Vista, Windows Server 2003, and Windows XP:
              Security resource attributes (ATTRIBUTE_SECURITY_INFORMATION) for the existing file are not copied to the new file until
              Windows 8 and Windows Server 2012.</para>
              <para>Minimum supported client: Windows Vista [desktop apps only]</para>
              <para>Minimum supported server: Windows Server 2008 [desktop apps only]</para>
            </remarks>
            <returns>
              <para>If the function succeeds, the return value is nonzero.</para>
              <para>If the function fails, the return value is zero. To get extended error information, call GetLastError.</para>
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.CreateFile(System.String,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,Alphaleonis.Win32.Security.NativeMethods.SecurityAttributes,System.IO.FileMode,Alphaleonis.Win32.Filesystem.ExtendedFileAttributes,System.IntPtr)">
            <summary>
              Creates or opens a file or I/O device. The most commonly used I/O devices are as follows: file, file stream, directory, physical
              disk, volume, console buffer, tape drive, communications resource, mailslot, and pipe.
            </summary>
            <remarks>Minimum supported client: Windows XP.</remarks>
            <remarks>Minimum supported server: Windows Server 2003.</remarks>
            <returns>
              If the function succeeds, the return value is an open handle to the specified file, device, named pipe, or mail slot. If the
              function fails, the return value is Win32Errors.ERROR_INVALID_HANDLE. To get extended error information, call GetLastError.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.CreateFileTransacted(System.String,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,Alphaleonis.Win32.Security.NativeMethods.SecurityAttributes,System.IO.FileMode,Alphaleonis.Win32.Filesystem.ExtendedFileAttributes,System.IntPtr,System.Runtime.InteropServices.SafeHandle,System.IntPtr,System.IntPtr)">
            <summary>
              Creates or opens a file or I/O device. The most commonly used I/O devices are as follows: file, file stream, directory, physical
              disk, volume, console buffer, tape drive, communications resource, mailslot, and pipe.
            </summary>
            <remarks>Minimum supported client: Windows Vista [desktop apps only].</remarks>
            <remarks>Minimum supported server: Windows Server 2008 [desktop apps only].</remarks>
            <returns>
              If the function succeeds, the return value is an open handle to the specified file, device, named pipe, or mail slot. If the
              function fails, the return value is Win32Errors.ERROR_INVALID_HANDLE". To get extended error information, call GetLastError.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.CreateFileMapping(Microsoft.Win32.SafeHandles.SafeFileHandle,System.Runtime.InteropServices.SafeHandle,System.UInt32,System.UInt32,System.UInt32,System.String)">
            <summary>Creates or opens a named or unnamed file mapping object for a specified file.</summary>
            <remarks>Minimum supported client: Windows XP.</remarks>
            <remarks>Minimum supported server: Windows Server 2003.</remarks>
            <returns>
              If the function succeeds, the return value is a handle to the newly created file mapping object. If the function fails, the return
              value is <see langword="null"/>.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.CreateHardLink(System.String,System.String,System.IntPtr)">
            <summary>
              Establishes a hard link between an existing file and a new file. This function is only supported on the NTFS file system, and only
              for files, not directories.
            </summary>
            <remarks>Minimum supported client: Windows XP [desktop apps only].</remarks>
            <remarks>Minimum supported server: Windows Server 2003 [desktop apps only].</remarks>
            <returns>
              If the function succeeds, the return value is nonzero. If the function fails, the return value is zero (0). To get extended error
              information, call GetLastError.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.CreateHardLinkTransacted(System.String,System.String,System.IntPtr,System.Runtime.InteropServices.SafeHandle)">
            <summary>
              Establishes a hard link between an existing file and a new file as a transacted operation. This function is only supported on the
              NTFS file system, and only for files, not directories.
            </summary>
            <remarks>Minimum supported client: Windows Vista [desktop apps only].</remarks>
            <remarks>Minimum supported server: Windows Server 2008 [desktop apps only].</remarks>
            <returns>
              If the function succeeds, the return value is nonzero. If the function fails, the return value is zero (0). To get extended error
              information, call GetLastError.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.CreateSymbolicLink(System.String,System.String,Alphaleonis.Win32.Filesystem.SymbolicLinkTarget)">
            <summary>Creates a symbolic link.</summary>
            <remarks>Minimum supported client: Windows Vista [desktop apps only].</remarks>
            <remarks>Minimum supported server: Windows Server 2008 [desktop apps only].</remarks>
            <remarks>
            The unmanaged prototype contains a return directive because the CreateSymbolicLink API function returns BOOLEAN, a one-byte data type.
            The default marshaling for bool is four bytes (to allow seamless integration with BOOL return values).
            If you were to use the default marshaling for BOOLEAN values, it's likely that you will get erroneous results.
            The return directive forces PInvoke to marshal just one byte of the return value.
            Source: http://www.informit.com/guides/content.aspx?g=dotnet&amp;seqNum=762&amp;ns=16196
            </remarks>
            <returns>
              If the function succeeds, the return value is nonzero. If the function fails, the return value is zero (0). To get extended error
              information, call GetLastError.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.CreateSymbolicLinkTransacted(System.String,System.String,Alphaleonis.Win32.Filesystem.SymbolicLinkTarget,System.Runtime.InteropServices.SafeHandle)">
            <summary>Creates a symbolic link as a transacted operation.</summary>
            <remarks>Minimum supported client: Windows Vista [desktop apps only].</remarks>
            <remarks>Minimum supported server: Windows Server 2008 [desktop apps only].</remarks>
            <remarks>
            The unmanaged prototype contains a return directive because the CreateSymbolicLink API function returns BOOLEAN, a one-byte data type.
            The default marshaling for bool is four bytes (to allow seamless integration with BOOL return values).
            If you were to use the default marshaling for BOOLEAN values, it's likely that you will get erroneous results.
            The return directive forces PInvoke to marshal just one byte of the return value.
            Source: http://www.informit.com/guides/content.aspx?g=dotnet&amp;seqNum=762&amp;ns=16196
            </remarks>
            <returns>
              If the function succeeds, the return value is nonzero. If the function fails, the return value is zero (0). To get extended error
              information, call GetLastError.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.DecryptFile(System.String,System.UInt32)">
            <summary>Decrypts an encrypted file or directory.</summary>
            <remarks>
              The DecryptFile function requires exclusive access to the file being decrypted, and will fail if another process is using the file.
              If the file is not encrypted, DecryptFile simply returns a nonzero value, which indicates success. If lpFileName specifies a read-
              only file, the function fails and GetLastError returns ERROR_FILE_READ_ONLY. If lpFileName specifies a directory that contains a
              read-only file, the functions succeeds but the directory is not decrypted.
            </remarks>
            <remarks>Minimum supported client: Windows XP.</remarks>
            <remarks>Minimum supported server: Windows Server 2003.</remarks>
            <returns>
              If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error
              information, call GetLastError.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.DeleteFile(System.String)">
            <summary>Deletes an existing file.</summary>
            <remarks>
              If an application attempts to delete a file that does not exist, the DeleteFile function fails with ERROR_FILE_NOT_FOUND.
            </remarks>
            <remarks>If the file is a read-only file, the function fails with ERROR_ACCESS_DENIED.</remarks>
            <remarks>
              If the path points to a symbolic link, the symbolic link is deleted, not the target. To delete a target, you must call CreateFile
              and specify FILE_FLAG_DELETE_ON_CLOSE.
            </remarks>
            <remarks>Minimum supported client: Windows XP [desktop apps | Windows Store apps].</remarks>
            <remarks>Minimum supported server: Windows Server 2003 [desktop apps | Windows Store apps].</remarks>
            <returns>
              If the function succeeds, the return value is nonzero. If the function fails, the return value is zero (0). To get extended error
              information, call GetLastError.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.DeleteFileTransacted(System.String,System.Runtime.InteropServices.SafeHandle)">
            <summary>Deletes an existing file as a transacted operation.</summary>
            <remarks>Minimum supported client: Windows Vista [desktop apps only].</remarks>
            <remarks>Minimum supported server: Windows Server 2008 [desktop apps only].</remarks>
            <returns>
              If the function succeeds, the return value is nonzero. If the function fails, the return value is zero (0). To get extended error
              information, call GetLastError.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.EncryptFile(System.String)">
            <summary>
              Encrypts a file or directory. All data streams in a file are encrypted. All new files created in an encrypted directory are
              encrypted.
            </summary>
            <remarks>
              The EncryptFile function requires exclusive access to the file being encrypted, and will fail if another process is using the file.
              If the file is already encrypted, EncryptFile simply returns a nonzero value, which indicates success. If the file is compressed,
              EncryptFile will decompress the file before encrypting it. If lpFileName specifies a read-only file, the function fails and
              GetLastError returns ERROR_FILE_READ_ONLY. If lpFileName specifies a directory that contains a read-only file, the functions
              succeeds but the directory is not encrypted.
            </remarks>
            <remarks>Minimum supported client: Windows XP.</remarks>
            <remarks>Minimum supported server: Windows Server 2003.</remarks>
            <returns>
              If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error
              information, call GetLastError.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.EncryptionDisable(System.String,System.Boolean)">
            <summary>
              Disables or enables encryption of the specified directory and the files in it. It does not affect encryption of subdirectories
              below the indicated directory.
            </summary>
            <remarks>
              EncryptionDisable() disables encryption of directories and files. It does not affect the visibility of files with the
              FILE_ATTRIBUTE_SYSTEM attribute set. This method will create/change the file "Desktop.ini" and wil set Encryption value:
              "Disable=0|1".
            </remarks>
            <remarks>Minimum supported client: Windows XP Professional [desktop apps only].</remarks>
            <remarks>Minimum supported server: Windows Server 2003 [desktop apps only].</remarks>
            <returns>
              If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error
              information, call GetLastError.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.FileEncryptionStatus(System.String,Alphaleonis.Win32.Filesystem.FileEncryptionStatus@)">
            <summary>Retrieves the encryption status of the specified file.</summary>
            <remarks>Minimum supported client: Windows XP Professional [desktop apps only].</remarks>
            <remarks>Minimum supported server: Windows Server 2003 [desktop apps only].</remarks>
            <returns>
              If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error
              information, call GetLastError.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.FindClose(System.IntPtr)">
            <summary>
              Closes a file search handle opened by the FindFirstFile, FindFirstFileEx, FindFirstFileNameW, FindFirstFileNameTransactedW,
              FindFirstFileTransacted, FindFirstStreamTransactedW, or FindFirstStreamW functions.
            </summary>
            <remarks>Minimum supported client: Windows XP [desktop apps | Windows Store apps].</remarks>
            <remarks>Minimum supported server: Windows Server 2003 [desktop apps | Windows Store apps].</remarks>
            <returns>
              If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error
              information, call GetLastError.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.FindFirstFileEx(System.String,Alphaleonis.Win32.Filesystem.NativeMethods.FINDEX_INFO_LEVELS,Alphaleonis.Win32.Filesystem.NativeMethods.WIN32_FIND_DATA@,Alphaleonis.Win32.Filesystem.NativeMethods.FINDEX_SEARCH_OPS,System.IntPtr,Alphaleonis.Win32.Filesystem.NativeMethods.FindExAdditionalFlags)">
            <summary>Searches a directory for a file or subdirectory with a name and attributes that match those specified.</summary>
            <remarks>A trailing backslash is not allowed and will be removed.</remarks>
            <remarks>Minimum supported client: Windows XP [desktop apps | Windows Store apps].</remarks>
            <remarks>Minimum supported server: Windows Server 2003 [desktop apps | Windows Store apps].</remarks>
            <returns>
              If the function succeeds, the return value is a search handle used in a subsequent call to FindNextFile or FindClose, and the
              lpFindFileData parameter contains information about the first file or directory found. If the function fails or fails to locate
              files from the search string in the lpFileName parameter, the return value is INVALID_HANDLE_VALUE and the contents of
              lpFindFileData are indeterminate. To get extended error information, call the GetLastError function.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.FindFirstFileTransacted(System.String,Alphaleonis.Win32.Filesystem.NativeMethods.FINDEX_INFO_LEVELS,Alphaleonis.Win32.Filesystem.NativeMethods.WIN32_FIND_DATA@,Alphaleonis.Win32.Filesystem.NativeMethods.FINDEX_SEARCH_OPS,System.IntPtr,Alphaleonis.Win32.Filesystem.NativeMethods.FindExAdditionalFlags,System.Runtime.InteropServices.SafeHandle)">
            <summary>
              Searches a directory for a file or subdirectory with a name that matches a specific name as a transacted operation.
            </summary>
            <remarks>A trailing backslash is not allowed and will be removed.</remarks>
            <remarks>Minimum supported client: Windows Vista [desktop apps only].</remarks>
            <remarks>Minimum supported server: Windows Server 2008 [desktop apps only].</remarks>
            <returns>
              If the function succeeds, the return value is a search handle used in a subsequent call to FindNextFile or FindClose, and the
              lpFindFileData parameter contains information about the first file or directory found. If the function fails or fails to locate
              files from the search string in the lpFileName parameter, the return value is INVALID_HANDLE_VALUE and the contents of
              lpFindFileData are indeterminate. To get extended error information, call the GetLastError function.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.FindFirstFileName(System.String,System.UInt32,System.UInt32@,System.Text.StringBuilder)">
            <summary>
              Creates an enumeration of all the hard links to the specified file. The FindFirstFileNameW function returns a handle to the
              enumeration that can be used on subsequent calls to the FindNextFileNameW function.
            </summary>
            <remarks>Minimum supported client: Windows Vista [desktop apps only].</remarks>
            <remarks>Minimum supported server: Windows Server 2008 [desktop apps only].</remarks>
            <returns>
              If the function succeeds, the return value is a search handle that can be used with the FindNextFileNameW function or closed with
              the FindClose function. If the function fails, the return value is INVALID_HANDLE_VALUE (0xffffffff). To get extended error
              information, call the GetLastError function.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.FindFirstFileNameTransacted(System.String,System.UInt32,System.UInt32@,System.Text.StringBuilder,System.Runtime.InteropServices.SafeHandle)">
            <summary>
              Creates an enumeration of all the hard links to the specified file as a transacted operation. The function returns a handle to the
              enumeration that can be used on subsequent calls to the FindNextFileNameW function.
            </summary>
            <remarks>Minimum supported client: Windows Vista [desktop apps only].</remarks>
            <remarks>Minimum supported server: Windows Server 2008 [desktop apps only].</remarks>
            <returns>
              If the function succeeds, the return value is a search handle that can be used with the FindNextFileNameW function or closed with
              the FindClose function. If the function fails, the return value is INVALID_HANDLE_VALUE (0xffffffff). To get extended error
              information, call the GetLastError function.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.FindNextFile(Alphaleonis.Win32.Filesystem.SafeFindFileHandle,Alphaleonis.Win32.Filesystem.NativeMethods.WIN32_FIND_DATA@)">
            <summary>
              Continues a file search from a previous call to the FindFirstFile, FindFirstFileEx, or FindFirstFileTransacted functions.
            </summary>
            <remarks>Minimum supported client: Windows XP [desktop apps | Windows Store apps].</remarks>
            <remarks>Minimum supported server: Windows Server 2003 [desktop apps | Windows Store apps].</remarks>
            <returns>
              If the function succeeds, the return value is nonzero and the lpFindFileData parameter contains information about the next file or
              directory found. If the function fails, the return value is zero and the contents of lpFindFileData are indeterminate. To get
              extended error information, call the GetLastError function. If the function fails because no more matching files can be found, the
              GetLastError function returns ERROR_NO_MORE_FILES.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.FindNextFileName(Alphaleonis.Win32.Filesystem.SafeFindFileHandle,System.UInt32@,System.Text.StringBuilder)">
            <summary>
              Continues enumerating the hard links to a file using the handle returned by a successful call to the FindFirstFileName function.
            </summary>
            <remarks>Minimum supported client: Windows Vista [desktop apps only].</remarks>
            <remarks>Minimum supported server: Windows Server 2008 [desktop apps only].</remarks>
            <returns>
              If the function succeeds, the return value is nonzero. If the function fails, the return value is zero (0). To get extended error
              information, call GetLastError. If no matching files can be found, the GetLastError function returns ERROR_HANDLE_EOF.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.FlushFileBuffers(Microsoft.Win32.SafeHandles.SafeFileHandle)">
            <summary>Flushes the buffers of a specified file and causes all buffered data to be written to a file.</summary>
            <remarks>Minimum supported client: Windows XP [desktop apps | Windows Store apps].</remarks>
            <remarks>Minimum supported server: Windows Server 2003 [desktop apps | Windows Store apps].</remarks>
            <returns>
              If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error
              information, call GetLastError.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.GetCompressedFileSize(System.String,System.UInt32@)">
            <summary>Retrieves the actual number of bytes of disk storage used to store a specified file.</summary>
            <remarks>Minimum supported client: Windows XP [desktop apps only].</remarks>
            <remarks>Minimum supported server: Windows Server 2003 [desktop apps only].</remarks>
            <returns>
              If the function succeeds, the return value is the low-order DWORD of the actual number of bytes of disk storage used to store the
              specified file, and if lpFileSizeHigh is non-NULL, the function puts the high-order DWORD of that actual value into the DWORD
              pointed to by that parameter. This is the compressed file size for compressed files, the actual file size for noncompressed files.
              If the function fails, and lpFileSizeHigh is NULL, the return value is INVALID_FILE_SIZE. To get extended error information, call
              GetLastError. If the return value is INVALID_FILE_SIZE and lpFileSizeHigh is non-NULL, an application must call GetLastError to
              determine whether the function has succeeded (value is NO_ERROR) or failed (value is other than NO_ERROR).
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.GetCompressedFileSizeTransacted(System.String,System.UInt32@,System.Runtime.InteropServices.SafeHandle)">
            <summary>Retrieves the actual number of bytes of disk storage used to store a specified file as a transacted operation.</summary>
            <remarks>Minimum supported client: Windows Vista [desktop apps only].</remarks>
            <remarks>Minimum supported server: Windows Server 2008 [desktop apps only].</remarks>
            <returns>
              If the function succeeds, the return value is the low-order DWORD of the actual number of bytes of disk storage used to store the
              specified file, and if lpFileSizeHigh is non-NULL, the function puts the high-order DWORD of that actual value into the DWORD
              pointed to by that parameter. This is the compressed file size for compressed files, the actual file size for noncompressed files.
              If the function fails, and lpFileSizeHigh is NULL, the return value is INVALID_FILE_SIZE. To get extended error information, call
              GetLastError. If the return value is INVALID_FILE_SIZE and lpFileSizeHigh is non-NULL, an application must call GetLastError to
              determine whether the function has succeeded (value is NO_ERROR) or failed (value is other than NO_ERROR).
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.GetFileAttributesEx(System.String,Alphaleonis.Win32.Filesystem.NativeMethods.GetFileExInfoLevels,Alphaleonis.Win32.Filesystem.NativeMethods.WIN32_FILE_ATTRIBUTE_DATA@)">
            <summary>
              Retrieves attributes for a specified file or directory.
            </summary>
            <remarks>
              <para>The GetFileAttributes function retrieves file system attribute information.</para>
              <para>GetFileAttributesEx can obtain other sets of file or directory attribute information.</para>
              <para>Currently, GetFileAttributesEx retrieves a set of standard attributes that is a superset of the file system attribute
              information.
              When the GetFileAttributesEx function is called on a directory that is a mounted folder, it returns the attributes of the directory,
              not those of the root directory in the volume that the mounted folder associates with the directory. To obtain the attributes of
              the associated volume, call GetVolumeNameForVolumeMountPoint to obtain the name of the associated volume. Then use the resulting
              name in a call to GetFileAttributesEx. The results are the attributes of the root directory on the associated volume.</para>
              <para>Symbolic link behavior: If the path points to a symbolic link, the function returns attributes for the symbolic link.</para>
              <para>Minimum supported client: Windows XP [desktop apps only]</para>
              <para>Minimum supported server: Windows Server 2003 [desktop apps only]</para>
            </remarks>
            <returns>
              <para>If the function succeeds, the return value is nonzero.</para>
              <para>If the function fails, the return value is zero. To get extended error information, call GetLastError.</para>
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.GetFileAttributesTransacted(System.String,Alphaleonis.Win32.Filesystem.NativeMethods.GetFileExInfoLevels,Alphaleonis.Win32.Filesystem.NativeMethods.WIN32_FILE_ATTRIBUTE_DATA@,System.Runtime.InteropServices.SafeHandle)">
            <summary>Retrieves attributes for a specified file or directory.</summary>
            <remarks>
              <para>The GetFileAttributes function retrieves file system attribute information.</para>
              <para>GetFileAttributesEx can obtain other sets of file or directory attribute information.</para>
              <para>
              Currently, GetFileAttributesEx retrieves a set of standard attributes that is a superset of the file system attribute information.
              When the GetFileAttributesEx function is called on a directory that is a mounted folder, it returns the attributes of the directory,
              not those of the root directory in the volume that the mounted folder associates with the directory. To obtain the attributes of
              the associated volume, call GetVolumeNameForVolumeMountPoint to obtain the name of the associated volume. Then use the resulting
              name in a call to GetFileAttributesEx. The results are the attributes of the root directory on the associated volume.</para>
              <para>Symbolic link behavior: If the path points to a symbolic link, the function returns attributes for the symbolic link.</para>
              <para>Transacted Operations</para>
              <para>If a file is open for modification in a transaction, no other thread can open the file for modification until the transaction
              is committed. Conversely, if a file is open for modification outside of a transaction, no transacted thread can open the file for
              modification until the non-transacted handle is closed. If a non-transacted thread has a handle opened to modify a file, a call to
              GetFileAttributesTransacted for that file will fail with an ERROR_TRANSACTIONAL_CONFLICT error.</para>
              <para>Minimum supported client: Windows Vista [desktop apps only]</para>
              <para>Minimum supported server: Windows Server 2008 [desktop apps only]</para>
            </remarks>
            <returns>
              <para>If the function succeeds, the return value is nonzero.</para>
              <para>If the function fails, the return value is zero. To get extended error information, call GetLastError.</para>
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.GetFileInformationByHandle(Microsoft.Win32.SafeHandles.SafeFileHandle,Alphaleonis.Win32.Filesystem.NativeMethods.BY_HANDLE_FILE_INFORMATION@)">
            <summary>Retrieves file information for the specified file.</summary>
            <returns>
            If the function succeeds, the return value is nonzero and file information data is contained in the buffer pointed to by the lpByHandleFileInformation parameter.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>
            Depending on the underlying network features of the operating system and the type of server connected to,
            the GetFileInformationByHandle function may fail, return partial information, or full information for the given file.
            </remarks>
            <remarks>Minimum supported client: Windows XP [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2003 [desktop apps only]</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.GetFileInformationByHandleEx(Microsoft.Win32.SafeHandles.SafeFileHandle,Alphaleonis.Win32.Filesystem.NativeMethods.FileInfoByHandleClass,Alphaleonis.Win32.SafeGlobalMemoryBufferHandle,System.UInt32)">
            <summary>
              Retrieves file information for the specified file.
            </summary>
            <remarks>
              <para>Minimum supported client: Windows Vista [desktop apps | Windows Store apps]</para>
              <para>Minimum supported server: Windows Server 2008 [desktop apps | Windows Store apps]</para>
              <para>Redistributable: Windows SDK on Windows Server 2003 and Windows XP.</para>
            </remarks>
            <param name="hFile">The file.</param>
            <param name="fileInfoByHandleClass">The file information by handle class.</param>
            <param name="lpFileInformation">Information describing the file.</param>
            <param name="dwBufferSize">Size of the buffer.</param>
            <returns>
              <para>If the function succeeds, the return value is nonzero and file information data is contained in the buffer pointed to by the
              lpByHandleFileInformation parameter.</para>
              <para>If the function fails, the return value is zero. To get extended error information, call GetLastError.</para>
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.GetFileInformationByHandleEx_FileBasicInfo(Microsoft.Win32.SafeHandles.SafeFileHandle,Alphaleonis.Win32.Filesystem.NativeMethods.FileInfoByHandleClass,Alphaleonis.Win32.Filesystem.NativeMethods.FILE_BASIC_INFO@,System.UInt32)">
            <summary>Retrieves file information for the specified file.</summary>
            <remarks>
              <para>Minimum supported client: Windows Vista [desktop apps | Windows Store apps]</para>
              <para>Minimum supported server: Windows Server 2008 [desktop apps | Windows Store apps]</para>
              <para>Redistributable: Windows SDK on Windows Server 2003 and Windows XP.</para>
            </remarks>
            <returns>
              <para>If the function succeeds, the return value is nonzero and file information data is contained in the buffer pointed to by the
              lpByHandleFileInformation parameter.</para>
              <para>If the function fails, the return value is zero. To get extended error information, call GetLastError.</para>
            </returns>
            <param name="hFile">The file.</param>
            <param name="fileInfoByHandleClass">The file information by handle class.</param>
            <param name="lpFileInformation">Information describing the file.</param>
            <param name="dwBufferSize">Size of the buffer.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.GetFileSizeEx(Microsoft.Win32.SafeHandles.SafeFileHandle,System.Int64@)">
            <summary>
              Retrieves the size of the specified file.
            </summary>
            <remarks>
              <para>Minimum supported client: Windows XP [desktop apps only]</para>
              <para>Minimum supported server: Windows Server 2003 [desktop apps only]</para>
            </remarks>
            <returns>
              <para>If the function succeeds, the return value is nonzero.</para>
              <para>If the function fails, the return value is zero. To get extended error information, call GetLastError.</para>
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.GetFinalPathNameByHandle(Microsoft.Win32.SafeHandles.SafeFileHandle,System.Text.StringBuilder,System.UInt32,Alphaleonis.Win32.Filesystem.FinalPathFormats)">
            <summary>Retrieves the final path for the specified file.</summary>
            <remarks>Minimum supported client: Windows Vista [desktop apps only].</remarks>
            <remarks>Minimum supported server: Windows Server 2008 [desktop apps only].</remarks>
            <returns>
              If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error
              information, call GetLastError.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.GetMappedFileName(System.IntPtr,Alphaleonis.Win32.Security.SafeLocalMemoryBufferHandle,System.Text.StringBuilder,System.UInt32)">
            <summary>
              Checks whether the specified address is within a memory-mapped file in the address space of the specified process. If so, the
              function returns the name of the memory-mapped file.
            </summary>
            <remarks>Minimum supported client: Windows XP.</remarks>
            <remarks>Minimum supported server: Windows Server 2003.</remarks>
            <returns>
              If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error
              information, call GetLastError.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.LockFile(Microsoft.Win32.SafeHandles.SafeFileHandle,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>Locks the specified file for exclusive access by the calling process.</summary>
            <remarks>Minimum supported client: Windows XP.</remarks>
            <remarks>Minimum supported server: Windows Server 2003.</remarks>
            <returns>
              If the function succeeds, the return value is nonzero (TRUE). If the function fails, the return value is zero (FALSE). To get
              extended error information, call GetLastError.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.MapViewOfFile(Microsoft.Win32.SafeHandles.SafeFileHandle,System.UInt32,System.UInt32,System.UInt32,System.UIntPtr)">
            <summary>Maps a view of a file mapping into the address space of a calling process.</summary>
            <remarks>Minimum supported client: Windows XP.</remarks>
            <remarks>Minimum supported server: Windows Server 2003.</remarks>
            <returns>
              If the function succeeds, the return value is the starting address of the mapped view. If the function fails, the return value is
              <see langword="null"/>.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.MoveFileWithProgress(System.String,System.String,Alphaleonis.Win32.Filesystem.NativeMethods.NativeCopyMoveProgressRoutine,System.IntPtr,Alphaleonis.Win32.Filesystem.MoveOptions)">
            <summary>
              Moves a file or directory, including its children.
              <para>You can provide a callback function that receives progress notifications.</para>
            </summary>
            <remarks>
              <para>The MoveFileWithProgress function coordinates its operation with the link tracking service, so link sources can be tracked as they are moved.</para>
              <para>Minimum supported client: Windows XP [desktop apps only]</para>
              <para>Minimum supported server: Windows Server 2003 [desktop apps only]</para>
            </remarks>
            <param name="lpExistingFileName">Filename of the existing file.</param>
            <param name="lpNewFileName">Filename of the new file.</param>
            <param name="lpProgressRoutine">The progress routine.</param>
            <param name="lpData">The data.</param>
            <param name="dwFlags">The flags.</param>
            <returns>
              <para>If the function succeeds, the return value is nonzero.</para>
              <para>If the function fails, the return value is zero. To get extended error information, call GetLastError.</para>
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.MoveFileTransacted(System.String,System.String,Alphaleonis.Win32.Filesystem.NativeMethods.NativeCopyMoveProgressRoutine,System.IntPtr,Alphaleonis.Win32.Filesystem.MoveOptions,System.Runtime.InteropServices.SafeHandle)">
            <summary>
              Moves an existing file or a directory, including its children, as a transacted operation.
              <para>You can provide a callback function that receives progress notifications.</para>      
            </summary>
            <remarks>
              <para>Minimum supported client: Windows Vista [desktop apps only]</para>
              <para>Minimum supported server: Windows Server 2008 [desktop apps only]</para>
            </remarks>     
            <returns>
              <para>If the function succeeds, the return value is nonzero.</para>
              <para>If the function fails, the return value is zero. To get extended error information, call GetLastError.</para>
            </returns>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.NativeMethods.NativeCopyMoveProgressRoutine">
            <summary>An application-defined callback function used with the CopyFileEx, MoveFileTransacted, and MoveFileWithProgress functions.
            <para>It is called when a portion of a copy or move operation is completed.</para>
            <para>The LPPROGRESS_ROUTINE type defines a pointer to this callback function.</para>
            <para>NativeCopyMoveProgressRoutine (NativeCopyMoveProgressRoutine) is a placeholder for the application-defined function name.</para>
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.ReplaceFile(System.String,System.String,System.String,System.Security.AccessControl.FileSystemRights,System.IntPtr,System.IntPtr)">
            <summary>Replaces one file with another file, with the option of creating a backup copy of the original file. The replacement file assumes the name of the replaced file and its identity.</summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows XP [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2003 [desktop apps only]</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.SetFileAttributes(System.String,System.IO.FileAttributes)">
            <summary>Sets the attributes for a file or directory.</summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.SetFileAttributesTransacted(System.String,System.IO.FileAttributes,System.Runtime.InteropServices.SafeHandle)">
            <summary>Sets the attributes for a file or directory as a transacted operation.</summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows Vista [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2008 [desktop apps only]</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.SetFileTime(Microsoft.Win32.SafeHandles.SafeFileHandle,Alphaleonis.Win32.SafeGlobalMemoryBufferHandle,Alphaleonis.Win32.SafeGlobalMemoryBufferHandle,Alphaleonis.Win32.SafeGlobalMemoryBufferHandle)">
            <summary>Sets the date and time that the specified file or directory was created, last accessed, or last modified.</summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows XP [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2003 [desktop apps only]</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.UnlockFile(Microsoft.Win32.SafeHandles.SafeFileHandle,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>Unlocks a region in an open file. Unlocking a region enables other processes to access the region.</summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.UnmapViewOfFile(Alphaleonis.Win32.Security.SafeLocalMemoryBufferHandle)">
            <summary>Unmaps a mapped view of a file from the calling process's address space.</summary>
            <remarks>Minimum supported client: Windows XP.</remarks>
            <remarks>Minimum supported server: Windows Server 2003.</remarks>
            <param name="lpBaseAddress">The base address.</param>
            <returns>
              If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error
              information, call GetLastError.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.GetDiskFreeSpace(System.String,System.Int32@,System.Int32@,System.Int32@,System.UInt32@)">
            <summary>
              Retrieves information about the specified disk, including the amount of free space on the disk.
            </summary>
            <remarks>
              <para>Symbolic link behavior: If the path points to a symbolic link, the operation is performed on the target.</para>
              <para>If this parameter is a UNC name, it must include a trailing backslash (for example, "\\MyServer\MyShare\").</para>
              <para>Furthermore, a drive specification must have a trailing backslash (for example, "C:\").</para>
              <para>The calling application must have FILE_LIST_DIRECTORY access rights for this directory.</para>
              <para>Minimum supported client: Windows XP [desktop apps only]</para>
              <para>Minimum supported server: Windows Server 2003 [desktop apps only]</para>
            </remarks>
            <param name="lpRootPathName">Full pathname of the root file.</param>
            <param name="lpSectorsPerCluster">[out] The sectors per cluster.</param>
            <param name="lpBytesPerSector">[out] The bytes per sector.</param>
            <param name="lpNumberOfFreeClusters">[out] Number of free clusters.</param>
            <param name="lpTotalNumberOfClusters">[out] The total number of clusters.</param>
            <returns>
              <para>If the function succeeds, the return value is nonzero.</para>
              <para>If the function fails, the return value is zero. To get extended error information, call GetLastError.</para>
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.GetDiskFreeSpaceEx(System.String,System.Int64@,System.Int64@,System.Int64@)">
            <summary>
              Retrieves information about the amount of space that is available on a disk volume, which is the total amount of space,
              <para>the total amount of free space, and the total amount of free space available to the user that is associated with the calling
              thread.</para>
            </summary>
            <remarks>
              <para>Symbolic link behavior: If the path points to a symbolic link, the operation is performed on the target.</para>
              <para>The GetDiskFreeSpaceEx function returns zero (0) for lpTotalNumberOfFreeBytes and lpFreeBytesAvailable
              for all CD requests unless the disk is an unwritten CD in a CD-RW drive.</para>
              <para>If this parameter is a UNC name, it must include a trailing backslash, for example, "\\MyServer\MyShare\".</para>
              <para>This parameter does not have to specify the root directory on a disk.</para>
              <para>The function accepts any directory on a disk.</para>
              <para>The calling application must have FILE_LIST_DIRECTORY access rights for this directory.</para>
              <para>Minimum supported client: Windows XP [desktop apps | Windows Store apps]</para>
              <para>Minimum supported server: Windows Server 2003 [desktop apps | Windows Store apps]</para>
            </remarks>
            <param name="lpDirectoryName">Pathname of the directory.</param>
            <param name="lpFreeBytesAvailable">[out] The free bytes available.</param>
            <param name="lpTotalNumberOfBytes">[out] The total number of in bytes.</param>
            <param name="lpTotalNumberOfFreeBytes">[out] The total number of free in bytes.</param>
            <returns>
              <para>If the function succeeds, the return value is nonzero.</para>
              <para>If the function fails, the return value is zero (0). To get extended error information, call GetLastError.</para>
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.CreateDirectory(System.String,Alphaleonis.Win32.Security.NativeMethods.SecurityAttributes)">
            <summary>
              Creates a new directory.
              <para>If the underlying file system supports security on files and directories,</para>
              <para>the function applies a specified security descriptor to the new directory.</para>
            </summary>
            <remarks>
              <para>Some file systems, such as the NTFS file system, support compression or encryption for individual files and
              directories.</para>
              <para>On volumes formatted for such a file system, a new directory inherits the compression and encryption attributes of its parent
              directory.</para>
              <para>An application can obtain a handle to a directory by calling <see cref="M:Alphaleonis.Win32.Filesystem.NativeMethods.CreateFile(System.String,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,Alphaleonis.Win32.Security.NativeMethods.SecurityAttributes,System.IO.FileMode,Alphaleonis.Win32.Filesystem.ExtendedFileAttributes,System.IntPtr)"/> with the FILE_FLAG_BACKUP_SEMANTICS
              flag set.</para>
              <para>Minimum supported client: Windows XP [desktop apps | Windows Store apps]</para>
              <para>Minimum supported server: Windows Server 2003 [desktop apps | Windows Store apps]</para>
            </remarks>
            <param name="lpPathName">Full pathname of the file.</param>
            <param name="lpSecurityAttributes">The security attributes.</param>
            <returns>
              <para>If the function succeeds, the return value is nonzero.</para>
              <para>If the function fails, the return value is zero. To get extended error information, call GetLastError.</para>
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.CreateDirectoryEx(System.String,System.String,Alphaleonis.Win32.Security.NativeMethods.SecurityAttributes)">
            <summary>
              Creates a new directory with the attributes of a specified template directory.
              <para>If the underlying file system supports security on files and directories,</para>
              <para>the function applies a specified security descriptor to the new directory.</para>
              <para>The new directory retains the other attributes of the specified template directory.</para>
            </summary>
            <remarks>
              <para>The CreateDirectoryEx function allows you to create directories that inherit stream information from other directories.</para>
              <para>This function is useful, for example, when you are using Macintosh directories, which have a resource stream</para>
              <para>that is needed to properly identify directory contents as an attribute.</para>
              <para>Some file systems, such as the NTFS file system, support compression or encryption for individual files and
              directories.</para>
              <para>On volumes formatted for such a file system, a new directory inherits the compression and encryption attributes of its parent
              directory.</para>
              <para>You can obtain a handle to a directory by calling the <see cref="M:Alphaleonis.Win32.Filesystem.NativeMethods.CreateFile(System.String,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,Alphaleonis.Win32.Security.NativeMethods.SecurityAttributes,System.IO.FileMode,Alphaleonis.Win32.Filesystem.ExtendedFileAttributes,System.IntPtr)"/> function with the FILE_FLAG_BACKUP_SEMANTICS
              flag set.</para>
              <para>Minimum supported client: Windows XP [desktop apps only]</para>
              <para>Minimum supported server: Windows Server 2003 [desktop apps only]</para>
            </remarks>
            <param name="lpTemplateDirectory">Pathname of the template directory.</param>
            <param name="lpPathName">Full pathname of the file.</param>
            <param name="lpSecurityAttributes">The security attributes.</param>
            <returns>
              <para>If the function succeeds, the return value is nonzero.</para>
              <para>If the function fails, the return value is zero (0). To get extended error information, call GetLastError.</para>
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.CreateDirectoryTransacted(System.String,System.String,Alphaleonis.Win32.Security.NativeMethods.SecurityAttributes,System.Runtime.InteropServices.SafeHandle)">
            <summary>
              Creates a new directory as a transacted operation, with the attributes of a specified template directory.
              <para>If the underlying file system supports security on files and directories,</para>
              <para>the function applies a specified security descriptor to the new directory.</para>
              <para>The new directory retains the other attributes of the specified template directory.</para>
            </summary>
            <remarks>
              <para>The CreateDirectoryTransacted function allows you to create directories that inherit stream information from other
              directories.</para>
              <para>This function is useful, for example, when you are using Macintosh directories, which have a resource stream</para>
              <para>that is needed to properly identify directory contents as an attribute.</para>
              <para>Some file systems, such as the NTFS file system, support compression or encryption for individual files and
              directories.</para>
              <para>On volumes formatted for such a file system, a new directory inherits the compression and encryption attributes of its parent
              directory.</para>
              <para>You can obtain a handle to a directory by calling the <see cref="M:Alphaleonis.Win32.Filesystem.NativeMethods.CreateFileTransacted(System.String,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,Alphaleonis.Win32.Security.NativeMethods.SecurityAttributes,System.IO.FileMode,Alphaleonis.Win32.Filesystem.ExtendedFileAttributes,System.IntPtr,System.Runtime.InteropServices.SafeHandle,System.IntPtr,System.IntPtr)"/> function with the
              FILE_FLAG_BACKUP_SEMANTICS flag set.</para>
              <para>Minimum supported client: Windows XP [desktop apps only]</para>
              <para>Minimum supported server: Windows Server 2003 [desktop apps only]</para>
            </remarks>
            <param name="lpTemplateDirectory">Pathname of the template directory.</param>
            <param name="lpNewDirectory">Pathname of the new directory.</param>
            <param name="lpSecurityAttributes">The security attributes.</param>
            <param name="hTransaction">The transaction.</param>
            <returns>
              <para>If the function succeeds, the return value is nonzero.</para>
              <para>If the function fails, the return value is zero (0). To get extended error information, call GetLastError.</para>
              <para>This function fails with ERROR_EFS_NOT_ALLOWED_IN_TRANSACTION if you try to create a</para>
              <para>child directory with a parent directory that has encryption disabled.</para>
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.GetCurrentDirectory(System.UInt32,System.Text.StringBuilder)">
            <summary>
              Retrieves the current directory for the current process.
            </summary>
            <remarks>
              <para>The RemoveDirectory function marks a directory for deletion on close.</para>
              <para>Therefore, the directory is not removed until the last handle to the directory is closed.</para>
              <para>RemoveDirectory removes a directory junction, even if the contents of the target are not empty;</para>
              <para>the function removes directory junctions regardless of the state of the target object.</para>
              <para>Minimum supported client: Windows XP [desktop apps | Windows Store apps]</para>
              <para>Minimum supported server: Windows Server 2003 [desktop apps | Windows Store apps]</para>
            </remarks>
            <param name="nBufferLength">The length of the buffer for the current directory string, in TCHARs. The buffer length must include room for a terminating null character.</param>
            <param name="lpBuffer">
              <para>A pointer to the buffer that receives the current directory string. This null-terminated string specifies the absolute path to the current directory.</para>
              <para>To determine the required buffer size, set this parameter to NULL and the nBufferLength parameter to 0.</para>
            </param>
            <returns>
              <para>If the function succeeds, the return value specifies the number of characters that are written to the buffer, not including the terminating null character.</para>
              <para>If the function fails, the return value is zero. To get extended error information, call GetLastError.</para>
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.RemoveDirectory(System.String)">
            <summary>
              Deletes an existing empty directory.
            </summary>
            <remarks>
              <para>The RemoveDirectory function marks a directory for deletion on close.</para>
              <para>Therefore, the directory is not removed until the last handle to the directory is closed.</para>
              <para>RemoveDirectory removes a directory junction, even if the contents of the target are not empty;</para>
              <para>the function removes directory junctions regardless of the state of the target object.</para>
              <para>Minimum supported client: Windows XP [desktop apps | Windows Store apps]</para>
              <para>Minimum supported server: Windows Server 2003 [desktop apps | Windows Store apps]</para>
            </remarks>
            <param name="lpPathName">Full pathname of the file.</param>
            <returns>
              <para>If the function succeeds, the return value is nonzero.</para>
              <para>If the function fails, the return value is zero. To get extended error information, call GetLastError.</para>
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.RemoveDirectoryTransacted(System.String,System.Runtime.InteropServices.SafeHandle)">
            <summary>
              Deletes an existing empty directory as a transacted operation.
            </summary>
            <remarks>
              <para>The RemoveDirectoryTransacted function marks a directory for deletion on close.</para>
              <para>Therefore, the directory is not removed until the last handle to the directory is closed.</para>
              <para>RemoveDirectory removes a directory junction, even if the contents of the target are not empty;</para>
              <para>the function removes directory junctions regardless of the state of the target object.</para>
              <para>Minimum supported client: Windows Vista [desktop apps only]</para>
              <para>Minimum supported server: Windows Server 2008 [desktop apps only]</para>
            </remarks>
            <param name="lpPathName">Full pathname of the file.</param>
            <param name="hTransaction">The transaction.</param>
            <returns>
              <para>If the function succeeds, the return value is nonzero.</para>
              <para>If the function fails, the return value is zero. To get extended error information, call GetLastError.</para>
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.SetCurrentDirectory(System.String)">
            <summary>
              Changes the current directory for the current process.
            </summary>
            <param name="lpPathName">
              <para>The path to the new current directory. This parameter may specify a relative path or a full path. In either case, the full path of the specified directory is calculated and stored as the current directory.</para>
            </param>
            <returns>
              <para>If the function succeeds, the return value is nonzero.</para>
              <para>If the function fails, the return value is zero. To get extended error information, call GetLastError.</para>
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.CM_Connect_Machine(System.String,Alphaleonis.Win32.Filesystem.SafeCmConnectMachineHandle@)">
            <summary>The CM_Connect_Machine function creates a connection to a remote machine.</summary>
            <remarks>
              <para>Beginning in Windows 8 and Windows Server 2012 functionality to access remote machines has been removed.</para>
              <para>You cannot access remote machines when running on these versions of Windows.</para>
              <para>Available in Microsoft Windows 2000 and later versions of Windows.</para>
            </remarks>
            <param name="uncServerName">Name of the unc server.</param>
            <param name="phMachine">[out] The ph machine.</param>
            <returns>
              <para>If the operation succeeds, the function returns CR_SUCCESS.</para>
              <para>Otherwise, it returns one of the CR_-prefixed error codes defined in Cfgmgr32.h.</para>
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.CM_Get_Device_ID_Ex(System.UInt32,Alphaleonis.Win32.SafeGlobalMemoryBufferHandle,System.UInt32,System.UInt32,Alphaleonis.Win32.Filesystem.SafeCmConnectMachineHandle)">
            <summary>
              The CM_Get_Device_ID_Ex function retrieves the device instance ID for a specified device instance on a local or a remote machine.
            </summary>
            <remarks>
              <para>Beginning in Windows 8 and Windows Server 2012 functionality to access remote machines has been removed.</para>
              <para>You cannot access remote machines when running on these versions of Windows.</para>
              <para>&#160;</para>
              <para>Available in Microsoft Windows 2000 and later versions of Windows.</para>
            </remarks>
            <param name="dnDevInst">The dn development instance.</param>
            <param name="buffer">The buffer.</param>
            <param name="bufferLen">Length of the buffer.</param>
            <param name="ulFlags">The ul flags.</param>
            <param name="hMachine">The machine.</param>
            <returns>
              <para>If the operation succeeds, the function returns CR_SUCCESS.</para>
              <para>Otherwise, it returns one of the CR_-prefixed error codes defined in Cfgmgr32.h.</para>
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.CM_Disconnect_Machine(System.IntPtr)">
            <summary>
              The CM_Disconnect_Machine function removes a connection to a remote machine.
            </summary>
            <remarks>
              <para>Beginning in Windows 8 and Windows Server 2012 functionality to access remote machines has been removed.</para>
              <para>You cannot access remote machines when running on these versions of Windows.</para>
              <para>SetLastError is set to <see langword="false"/>.</para>
              <para>Available in Microsoft Windows 2000 and later versions of Windows.</para>
            </remarks>
            <param name="hMachine">The machine.</param>
            <returns>
              <para>If the operation succeeds, the function returns CR_SUCCESS.</para>
              <para>Otherwise, it returns one of the CR_-prefixed error codes defined in Cfgmgr32.h.</para>
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.CM_Get_Parent_Ex(System.UInt32@,System.UInt32,System.UInt32,Alphaleonis.Win32.Filesystem.SafeCmConnectMachineHandle)">
            <summary>
              The CM_Get_Parent_Ex function obtains a device instance handle to the parent node of a specified device node (devnode) in a local
              or a remote machine's device tree.
            </summary>
            <remarks>
              <para>Beginning in Windows 8 and Windows Server 2012 functionality to access remote machines has been removed.</para>
              <para>You cannot access remote machines when running on these versions of Windows.</para>
              <para>Available in Microsoft Windows 2000 and later versions of Windows.</para>
            </remarks>
            <param name="pdnDevInst">[out] The pdn development instance.</param>
            <param name="dnDevInst">The dn development instance.</param>
            <param name="ulFlags">The ul flags.</param>
            <param name="hMachine">The machine.</param>
            <returns>
              <para>If the operation succeeds, the function returns CR_SUCCESS.</para>
              <para>Otherwise, it returns one of the CR_-prefixed error codes defined in Cfgmgr32.h.</para>
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.DeviceIoControl(Microsoft.Win32.SafeHandles.SafeFileHandle,System.UInt32,System.IntPtr,System.UInt32,Alphaleonis.Win32.SafeGlobalMemoryBufferHandle,System.UInt32,System.UInt32@,System.IntPtr)">
            <summary>Sends a control code directly to a specified device driver, causing the corresponding device to perform the corresponding operation.</summary>
            <returns>
              <para>If the operation completes successfully, the return value is nonzero.</para>
              <para>If the operation fails or is pending, the return value is zero. To get extended error information, call GetLastError.</para>
            </returns>
            <remarks>
              <para>To retrieve a handle to the device, you must call the <see cref="M:Alphaleonis.Win32.Filesystem.NativeMethods.CreateFile(System.String,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,Alphaleonis.Win32.Security.NativeMethods.SecurityAttributes,System.IO.FileMode,Alphaleonis.Win32.Filesystem.ExtendedFileAttributes,System.IntPtr)"/> function with either the name of a device or
              the name of the driver associated with a device.</para>
              <para>To specify a device name, use the following format: <c>\\.\DeviceName</c></para>
              <para>Minimum supported client: Windows XP</para>
              <para>Minimum supported server: Windows Server 2003</para>
            </remarks>
            <param name="hDevice">The device.</param>
            <param name="dwIoControlCode">The i/o control code.</param>
            <param name="lpInBuffer">Buffer for in data.</param>
            <param name="nInBufferSize">Size of the in buffer.</param>
            <param name="lpOutBuffer">Buffer for out data.</param>
            <param name="nOutBufferSize">Size of the out buffer.</param>
            <param name="lpBytesReturned">[out] The bytes returned.</param>
            <param name="lpOverlapped">The overlapped.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.DeviceIoControl(Microsoft.Win32.SafeHandles.SafeFileHandle,System.UInt32,System.Object,System.UInt32,System.Object,System.UInt32,System.UInt32@,System.IntPtr)">
            <summary>Sends a control code directly to a specified device driver, causing the corresponding device to perform the corresponding operation.</summary>
            <returns>
              <para>If the operation completes successfully, the return value is nonzero.</para>
              <para>If the operation fails or is pending, the return value is zero. To get extended error information, call GetLastError.</para>
            </returns>
            <remarks>
              <para>To retrieve a handle to the device, you must call the <see cref="M:Alphaleonis.Win32.Filesystem.NativeMethods.CreateFile(System.String,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,Alphaleonis.Win32.Security.NativeMethods.SecurityAttributes,System.IO.FileMode,Alphaleonis.Win32.Filesystem.ExtendedFileAttributes,System.IntPtr)"/> function with either the name of a device or
              the name of the driver associated with a device.</para>
              <para>To specify a device name, use the following format: <c>\\.\DeviceName</c></para>
              <para>Minimum supported client: Windows XP</para>
              <para>Minimum supported server: Windows Server 2003</para>
            </remarks>
            <param name="hDevice">The device.</param>
            <param name="dwIoControlCode">The i/o control code.</param>
            <param name="lpInBuffer">Buffer for in data.</param>
            <param name="nInBufferSize">Size of the in buffer.</param>
            <param name="lpOutBuffer">Buffer for out data.</param>
            <param name="nOutBufferSize">Size of the out buffer.</param>
            <param name="lpBytesReturned">[out] The bytes returned.</param>
            <param name="lpOverlapped">The overlapped.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.SetupDiDestroyDeviceInfoList(System.IntPtr)">
            <summary>
              The SetupDiDestroyDeviceInfoList function deletes a device information set and frees all associated memory.
            </summary>
            <remarks>
              <para>SetLastError is set to <see langword="false"/>.</para>
              <para>Available in Microsoft Windows 2000 and later versions of Windows.</para>
            </remarks>
            <param name="hDevInfo">Information describing the development.</param>
            <returns>
              <para>The function returns TRUE if it is successful.</para>
              <para>Otherwise, it returns FALSE and the logged error can be retrieved with a call to GetLastError.</para>
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.SetupDiEnumDeviceInterfaces(System.Runtime.InteropServices.SafeHandle,System.IntPtr,System.Guid@,System.UInt32,Alphaleonis.Win32.Filesystem.NativeMethods.SP_DEVICE_INTERFACE_DATA@)">
            <summary>
              The SetupDiEnumDeviceInterfaces function enumerates the device interfaces that are contained in a device information set.
            </summary>
            <remarks>
              <para>Repeated calls to this function return an <see cref="T:Alphaleonis.Win32.Filesystem.NativeMethods.SP_DEVICE_INTERFACE_DATA"/> structure for a different device
              interface.</para>
              <para>This function can be called repeatedly to get information about interfaces in a device information set that are
              associated</para>
              <para>with a particular device information element or that are associated with all device information elements.</para>
              <para>Available in Microsoft Windows 2000 and later versions of Windows.</para>
            </remarks>
            <param name="hDevInfo">Information describing the development.</param>
            <param name="devInfo">Information describing the development.</param>
            <param name="interfaceClassGuid">[in,out] Unique identifier for the interface class.</param>
            <param name="memberIndex">Zero-based index of the member.</param>
            <param name="deviceInterfaceData">[in,out] Information describing the device interface.</param>
            <returns>
              <para>SetupDiEnumDeviceInterfaces returns TRUE if the function completed without error.</para>
              <para>If the function completed with an error, FALSE is returned and the error code for the failure can be retrieved by calling
              GetLastError.</para>
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.SetupDiGetClassDevsEx(System.Guid@,System.IntPtr,System.IntPtr,Alphaleonis.Win32.Filesystem.NativeMethods.SetupDiGetClassDevsExFlags,System.IntPtr,System.String,System.IntPtr)">
            <summary>
              The SetupDiGetClassDevsEx function returns a handle to a device information set that contains requested device information elements
              for a local or a remote computer.
            </summary>
            <remarks>
              <para>The caller of SetupDiGetClassDevsEx must delete the returned device information set when it is no longer needed by calling
              <see cref="M:Alphaleonis.Win32.Filesystem.NativeMethods.SetupDiDestroyDeviceInfoList(System.IntPtr)"/>.</para>
              <para>Available in Microsoft Windows 2000 and later versions of Windows.</para>
            </remarks>
            <param name="classGuid">[in,out] Unique identifier for the class.</param>
            <param name="enumerator">The enumerator.</param>
            <param name="hwndParent">The parent.</param>
            <param name="devsExFlags">The devs ex flags.</param>
            <param name="deviceInfoSet">Set the device information belongs to.</param>
            <param name="machineName">Name of the machine.</param>
            <param name="reserved">The reserved.</param>
            <returns>
              <para>If the operation succeeds, SetupDiGetClassDevsEx returns a handle to a device information set that contains all installed
              devices that matched the supplied parameters.</para>
              <para>If the operation fails, the function returns INVALID_HANDLE_VALUE. To get extended error information, call
              GetLastError.</para>
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.SetupDiGetDeviceInterfaceDetail(System.Runtime.InteropServices.SafeHandle,Alphaleonis.Win32.Filesystem.NativeMethods.SP_DEVICE_INTERFACE_DATA@,Alphaleonis.Win32.Filesystem.NativeMethods.SP_DEVICE_INTERFACE_DETAIL_DATA@,System.UInt32,System.IntPtr,Alphaleonis.Win32.Filesystem.NativeMethods.SP_DEVINFO_DATA@)">
            <summary>
              The SetupDiGetDeviceInterfaceDetail function returns details about a device interface.
            </summary>
            <remarks>
              <para>The interface detail returned by this function consists of a device path that can be passed to Win32 functions such as
              CreateFile.</para>
              <para>Do not attempt to parse the device path symbolic name. The device path can be reused across system starts.</para>
              <para>Available in Microsoft Windows 2000 and later versions of Windows.</para>
            </remarks>
            <param name="hDevInfo">Information describing the development.</param>
            <param name="deviceInterfaceData">[in,out] Information describing the device interface.</param>
            <param name="deviceInterfaceDetailData">[in,out] Information describing the device interface detail.</param>
            <param name="deviceInterfaceDetailDataSize">Size of the device interface detail data.</param>
            <param name="requiredSize">Size of the required.</param>
            <param name="deviceInfoData">[in,out] Information describing the device information.</param>
            <returns>
              <para>SetupDiGetDeviceInterfaceDetail returns TRUE if the function completed without error.</para>
              <para>If the function completed with an error, FALSE is returned and the error code for the failure can be retrieved by calling
              GetLastError.</para>
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.SetupDiGetDeviceRegistryProperty(System.Runtime.InteropServices.SafeHandle,Alphaleonis.Win32.Filesystem.NativeMethods.SP_DEVINFO_DATA@,Alphaleonis.Win32.Filesystem.NativeMethods.SetupDiGetDeviceRegistryPropertyEnum,System.UInt32@,Alphaleonis.Win32.SafeGlobalMemoryBufferHandle,System.UInt32,System.IntPtr)">
            <summary>
              The SetupDiGetDeviceRegistryProperty function retrieves a specified Plug and Play device property.
            </summary>
            <remarks><para>Available in Microsoft Windows 2000 and later versions of Windows.</para></remarks>
            <param name="deviceInfoSet">Set the device information belongs to.</param>
            <param name="deviceInfoData">[in,out] Information describing the device information.</param>
            <param name="property">The property.</param>
            <param name="propertyRegDataType">[out] Type of the property register data.</param>
            <param name="propertyBuffer">Buffer for property data.</param>
            <param name="propertyBufferSize">Size of the property buffer.</param>
            <param name="requiredSize">Size of the required.</param>
            <returns>
              <para>SetupDiGetDeviceRegistryProperty returns TRUE if the call was successful.</para>
              <para>Otherwise, it returns FALSE and the logged error can be retrieved by making a call to GetLastError.</para>
              <para>SetupDiGetDeviceRegistryProperty returns the ERROR_INVALID_DATA error code if the requested property does not exist for a
              device or if the property data is not valid.</para>
            </returns>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.FindexInfoLevels">
            <summary>The FindFirstFileEx function does not query the short file name, improving overall enumeration speed.
            <para>&#160;</para>
            <remarks>
            <para>The data is returned in a <see cref="T:Alphaleonis.Win32.Filesystem.NativeMethods.WIN32_FIND_DATA"/> structure,</para>
            <para>and cAlternateFileName member is always a NULL string.</para>
            <para>This value is not supported until Windows Server 2008 R2 and Windows 7.</para>
            </remarks>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.LargeCache">
            <summary>Uses a larger buffer for directory queries, which can increase performance of the find operation.</summary>
            <remarks>This value is not supported until Windows Server 2008 R2 and Windows 7.</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.DefaultFileBufferSize">
            <summary>DefaultFileBufferSize = 4096; Default type buffer size used for reading and writing files.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.DefaultFileEncoding">
            <summary>DefaultFileEncoding = Encoding.UTF8; Default type of Encoding used for reading and writing files.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.MaxDirectoryLength">
            <summary>MaxDirectoryLength = 255</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.MaxPath">
            <summary>MaxPath = 260
            The specified path, file name, or both exceed the system-defined maximum length.
            For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. 
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.MaxPathUnicode">
            <summary>MaxPathUnicode = 32000</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.OverflowExceptionBitShift">
            <summary>When an exception is raised, bit shifting is needed to prevent: "System.OverflowException: Arithmetic operation resulted in an overflow."</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.BackupRead(Microsoft.Win32.SafeHandles.SafeFileHandle,Alphaleonis.Win32.SafeGlobalMemoryBufferHandle,System.UInt32,System.UInt32@,System.Boolean,System.Boolean,System.IntPtr@)">
            <summary>The BackupRead function can be used to back up a file or directory, including the security information.
              <para>The function reads data associated with a specified file or directory into a buffer,</para>
              <para>which can then be written to the backup medium using the WriteFile function.</para>
            </summary>
            <remarks>
              <para>This function is not intended for use in backing up files encrypted under the Encrypted File System.</para>
              <para>Use ReadEncryptedFileRaw for that purpose.</para>
              <para>Minimum supported client: Windows XP [desktop apps only]</para>
              <para>Minimum supported server: Windows Server 2003 [desktop apps only]</para>
            </remarks>
            <param name="hFile">The file.</param>
            <param name="lpBuffer">The buffer.</param>
            <param name="nNumberOfBytesToRead">Number of bytes to reads.</param>
            <param name="lpNumberOfBytesRead">[out] Number of bytes reads.</param>
            <param name="bAbort">true to abort.</param>
            <param name="bProcessSecurity">true to process security.</param>
            <param name="lpContext">[out] The context.</param>
            <returns>
              <para>If the function succeeds, the return value is nonzero.</para>
              <para>If the function fails, the return value is zero, indicating that an I/O error occurred. To get extended error information,
              call GetLastError.</para>
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.BackupSeek(Microsoft.Win32.SafeHandles.SafeFileHandle,System.UInt32,System.UInt32,System.UInt32@,System.UInt32@,System.IntPtr@)">
            <summary>The BackupSeek function seeks forward in a data stream initially accessed by using the <see cref="M:Alphaleonis.Win32.Filesystem.NativeMethods.BackupRead(Microsoft.Win32.SafeHandles.SafeFileHandle,Alphaleonis.Win32.SafeGlobalMemoryBufferHandle,System.UInt32,System.UInt32@,System.Boolean,System.Boolean,System.IntPtr@)"/> or
              <see cref="M:Alphaleonis.Win32.Filesystem.NativeMethods.BackupWrite(Microsoft.Win32.SafeHandles.SafeFileHandle,Alphaleonis.Win32.SafeGlobalMemoryBufferHandle,System.UInt32,System.UInt32@,System.Boolean,System.Boolean,System.IntPtr@)"/> function.
              <para>The function reads data associated with a specified file or directory into a buffer, which can then be written to the backup
              medium using the WriteFile function.</para>
            </summary>
            <remarks>
              <para>Applications use the BackupSeek function to skip portions of a data stream that cause errors.</para>
              <para>This function does not seek across stream headers. For example, this function cannot be used to skip the stream name.</para>
              <para>If an application attempts to seek past the end of a substream, the function fails, the lpdwLowByteSeeked and
              lpdwHighByteSeeked parameters</para>
              <para>indicate the actual number of bytes the function seeks, and the file position is placed at the start of the next stream
              header.</para>
              <para>&#160;</para>
              <para>Minimum supported client: Windows XP [desktop apps only]</para>
              <para>Minimum supported server: Windows Server 2003 [desktop apps only]</para>
            </remarks>
            <param name="hFile">The file.</param>
            <param name="dwLowBytesToSeek">The low bytes to seek.</param>
            <param name="dwHighBytesToSeek">The high bytes to seek.</param>
            <param name="lpdwLowBytesSeeked">[out] The lpdw low bytes seeked.</param>
            <param name="lpdwHighBytesSeeked">[out] The lpdw high bytes seeked.</param>
            <param name="lpContext">[out] The context.</param>
            <returns>
              <para>If the function could seek the requested amount, the function returns a nonzero value.</para>
              <para>If the function could not seek the requested amount, the function returns zero. To get extended error information, call
              GetLastError.</para>
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.BackupWrite(Microsoft.Win32.SafeHandles.SafeFileHandle,Alphaleonis.Win32.SafeGlobalMemoryBufferHandle,System.UInt32,System.UInt32@,System.Boolean,System.Boolean,System.IntPtr@)">
            <summary>The BackupWrite function can be used to restore a file or directory that was backed up using <see cref="M:Alphaleonis.Win32.Filesystem.NativeMethods.BackupRead(Microsoft.Win32.SafeHandles.SafeFileHandle,Alphaleonis.Win32.SafeGlobalMemoryBufferHandle,System.UInt32,System.UInt32@,System.Boolean,System.Boolean,System.IntPtr@)"/>.
              <para>Use the ReadFile function to get a stream of data from the backup medium, then use BackupWrite to write the data to the
              specified file or directory.</para>
              <para>&#160;</para>
            </summary>
            <remarks>
              <para>This function is not intended for use in restoring files encrypted under the Encrypted File System. Use WriteEncryptedFileRaw
              for that purpose.</para>
              <para>Minimum supported client: Windows XP [desktop apps only]</para>
              <para>Minimum supported server: Windows Server 2003 [desktop apps only]</para>
            </remarks>
            <param name="hFile">The file.</param>
            <param name="lpBuffer">The buffer.</param>
            <param name="nNumberOfBytesToWrite">Number of bytes to writes.</param>
            <param name="lpNumberOfBytesWritten">[out] Number of bytes writtens.</param>
            <param name="bAbort">true to abort.</param>
            <param name="bProcessSecurity">true to process security.</param>
            <param name="lpContext">[out] The context.</param>
            <returns>
              <para>If the function succeeds, the return value is nonzero.</para>
              <para>If the function fails, the return value is zero, indicating that an I/O error occurred. To get extended error information,
              call GetLastError.</para>
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.IsValidHandle(System.Runtime.InteropServices.SafeHandle,System.Boolean)">
            <summary>Check is the current handle is not null, not closed and not invalid.</summary>
            <param name="handle">The current handle to check.</param>
            <param name="throwException"><see langword="true"/> will throw an <exception cref="P:Alphaleonis.Win32.Resources.Handle_Is_Invalid"/>, <see langword="false"/> will not raise this exception..</param>
            <returns><see langword="true"/> on success, <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.IsValidHandle(System.Runtime.InteropServices.SafeHandle,System.Int32,System.Boolean)">
            <summary>Check is the current handle is not null, not closed and not invalid.</summary>
            <param name="handle">The current handle to check.</param>
            <param name="lastError">The result of Marshal.GetLastWin32Error()</param>
            <param name="throwException"><see langword="true"/> will throw an <exception cref="P:Alphaleonis.Win32.Resources.Handle_Is_Invalid_Win32Error"/>, <see langword="false"/> will not raise this exception..</param>
            <returns><see langword="true"/> on success, <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.SetErrorMode(Alphaleonis.Win32.Filesystem.NativeMethods.ErrorMode)">
            <summary>
              Controls whether the system will handle the specified types of serious errors or whether the process will handle them.
            </summary>
            <remarks>
              Because the error mode is set for the entire process, you must ensure that multi-threaded applications do not set different error-
              mode attributes. Doing so can lead to inconsistent error handling.
            </remarks>
            <remarks>Minimum supported client: Windows XP [desktop apps only].</remarks>
            <remarks>Minimum supported server: Windows Server 2003 [desktop apps only].</remarks>
            <param name="uMode">The mode.</param>
            <returns>The return value is the previous state of the error-mode bit attributes.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.SetThreadErrorMode(Alphaleonis.Win32.Filesystem.NativeMethods.ErrorMode,Alphaleonis.Win32.Filesystem.NativeMethods.ErrorMode@)">
            <summary>
              Controls whether the system will handle the specified types of serious errors or whether the calling thread will handle them.
            </summary>
            <remarks>
              Because the error mode is set for the entire process, you must ensure that multi-threaded applications do not set different error-
              mode attributes. Doing so can lead to inconsistent error handling.
            </remarks>
            <remarks>Minimum supported client: Windows 7 [desktop apps only].</remarks>
            <remarks>Minimum supported server: Windows Server 2008 R2 [desktop apps only].</remarks>
            <param name="dwNewMode">The new mode.</param>
            <param name="lpOldMode">[out] The old mode.</param>
            <returns>The return value is the previous state of the error-mode bit attributes.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.GetFullPathName(System.String,System.UInt32,System.Text.StringBuilder,System.IntPtr)">
            <summary>Retrieves the full path and file name of the specified file or directory.</summary>
            <returns>If the function fails for any other reason, the return value is zero. To get extended error information, call GetLastError.</returns>
            <remarks>The GetFullPathName function is not recommended for multithreaded applications or shared library code.</remarks>
            <remarks>Minimum supported client: Windows XP [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2003 [desktop apps only]</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.GetFullPathNameTransacted(System.String,System.UInt32,System.Text.StringBuilder,System.IntPtr,System.Runtime.InteropServices.SafeHandle)">
            <summary>Retrieves the full path and file name of the specified file or directory as a transacted operation.</summary>
            <returns>If the function fails for any other reason, the return value is zero. To get extended error information, call GetLastError.</returns>
            <remarks>Minimum supported client: Windows Vista [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2008 [desktop apps only]</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.GetLongPathName(System.String,System.Text.StringBuilder,System.UInt32)">
            <summary>Converts the specified path to its long form.</summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows XP [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2003 [desktop apps only]</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.GetLongPathNameTransacted(System.String,System.Text.StringBuilder,System.UInt32,System.Runtime.InteropServices.SafeHandle)">
            <summary>Converts the specified path to its long form as a transacted operation.</summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows Vista [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2008 [desktop apps only]</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.GetShortPathName(System.String,System.Text.StringBuilder,System.UInt32)">
            <summary>Retrieves the short path form of the specified path.</summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.NativeMethods.SafeSetupDiClassDevsExHandle">
            <summary>Represents a wrapper class for a handle used by the SetupDiGetClassDevs/SetupDiDestroyDeviceInfoList Win32 API functions.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.SafeSetupDiClassDevsExHandle.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.NativeMethods.SafeSetupDiClassDevsExHandle"/> class.</summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.NativeMethods.FILE_BASIC_INFO">
            <summary>Contains the basic information for a file. Used for file handles.</summary>
            <remarks>
              <para>Specifying -1 for <see cref="F:Alphaleonis.Win32.Filesystem.NativeMethods.FILE_BASIC_INFO.LastAccessTime"/>, <see cref="F:Alphaleonis.Win32.Filesystem.NativeMethods.FILE_BASIC_INFO.ChangeTime"/>, or <see cref="F:Alphaleonis.Win32.Filesystem.NativeMethods.FILE_BASIC_INFO.LastWriteTime"/></para>
              <para>indicates that operations on the current handle should not affect the given field.</para>
              <para>(I.e, specifying -1 for <see cref="F:Alphaleonis.Win32.Filesystem.NativeMethods.FILE_BASIC_INFO.LastWriteTime"/> will leave the <see cref="F:Alphaleonis.Win32.Filesystem.NativeMethods.FILE_BASIC_INFO.LastWriteTime"/> unaffected by writes performed
              on the current handle.)</para>
            </remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.FILE_BASIC_INFO.CreationTime">
            <summary>The time the file was created in <see cref="T:Alphaleonis.Win32.Filesystem.NativeMethods.FILETIME"/> format,
            <para>which is a 64-bit value representing the number of 100-nanosecond intervals since January 1, 1601 (UTC).</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.FILE_BASIC_INFO.LastAccessTime">
            <summary>The time the file was last accessed in <see cref="T:Alphaleonis.Win32.Filesystem.NativeMethods.FILETIME"/> format.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.FILE_BASIC_INFO.LastWriteTime">
            <summary>The time the file was last written to in <see cref="T:Alphaleonis.Win32.Filesystem.NativeMethods.FILETIME"/> format.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.FILE_BASIC_INFO.ChangeTime">
            <summary>The time the file was changed in <see cref="T:Alphaleonis.Win32.Filesystem.NativeMethods.FILETIME"/> format.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.FILE_BASIC_INFO.FileAttributes">
            <summary>The file attributes.</summary>
            <remarks>If this is set to 0 in a <see cref="T:Alphaleonis.Win32.Filesystem.NativeMethods.FILE_BASIC_INFO"/> structure passed to SetFileInformationByHandle then none of the attributes are changed.</remarks>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.NativeMethods.BY_HANDLE_FILE_INFORMATION">
            <summary>Contains information that the GetFileInformationByHandle function retrieves.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.BY_HANDLE_FILE_INFORMATION.dwFileAttributes">
            <summary>The file attributes.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.BY_HANDLE_FILE_INFORMATION.ftCreationTime">
            <summary>A <see cref="T:Alphaleonis.Win32.Filesystem.NativeMethods.FILETIME"/> structure that specifies when a file or directory is created.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.BY_HANDLE_FILE_INFORMATION.ftLastAccessTime">
            <summary>A <see cref="T:Alphaleonis.Win32.Filesystem.NativeMethods.FILETIME"/> structure. For a file, the structure specifies the last time that a file is read from or written to.
            For a directory, the structure specifies when the directory is created.
            For both files and directories, the specified date is correct, but the time of day is always set to midnight.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.BY_HANDLE_FILE_INFORMATION.ftLastWriteTime">
            <summary>A <see cref="T:Alphaleonis.Win32.Filesystem.NativeMethods.FILETIME"/> structure. For a file, the structure specifies the last time that a file is written to.
            For a directory, the structure specifies when the directory is created.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.BY_HANDLE_FILE_INFORMATION.dwVolumeSerialNumber">
            <summary>The serial number of the volume that contains a file.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.BY_HANDLE_FILE_INFORMATION.nFileSizeHigh">
            <summary>The high-order part of the file size.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.BY_HANDLE_FILE_INFORMATION.nFileSizeLow">
            <summary>The low-order part of the file size.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.BY_HANDLE_FILE_INFORMATION.nNumberOfLinks">
            <summary>The number of links to this file. For the FAT file system this member is always 1. For the NTFS file system, it can be more than 1.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.BY_HANDLE_FILE_INFORMATION.nFileIndexHigh">
            <summary>The high-order part of a unique identifier that is associated with a file.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.BY_HANDLE_FILE_INFORMATION.nFileIndexLow">
            <summary>The low-order part of a unique identifier that is associated with a file.</summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.NativeMethods.ChangeErrorMode">
            <summary>Controls whether the system will handle the specified types of serious errors or whether the process will handle them.</summary>
            <remarks>Minimum supported client: Windows 2000 Professional</remarks>
            <remarks>Minimum supported server: Windows 2000 Server</remarks>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.ChangeErrorMode.#ctor(Alphaleonis.Win32.Filesystem.NativeMethods.ErrorMode)">
            <summary>ChangeErrorMode is for the Win32 SetThreadErrorMode() method, used to suppress possible pop-ups.</summary>
            <param name="mode">One of the <see cref="T:Alphaleonis.Win32.Filesystem.NativeMethods.ErrorMode"/> values.</param>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.NativeMethods.FILE_ID_BOTH_DIR_INFO">
            <summary>Contains information about files in the specified directory. Used for directory handles. Use only when calling GetFileInformationByHandleEx.</summary>
            <remarks>
            The number of files that are returned for each call to GetFileInformationByHandleEx depends on the size of the buffer that is passed to the function.
            Any subsequent calls to GetFileInformationByHandleEx on the same handle will resume the enumeration operation after the last file is returned.
            </remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.FILE_ID_BOTH_DIR_INFO.NextEntryOffset">
            <summary>The offset for the next FILE_ID_BOTH_DIR_INFO structure that is returned. Contains zero (0) if no other entries follow this one.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.FILE_ID_BOTH_DIR_INFO.FileIndex">
            <summary>The byte offset of the file within the parent directory. This member is undefined for file systems, such as NTFS,
            in which the position of a file within the parent directory is not fixed and can be changed at any time to maintain sort order.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.FILE_ID_BOTH_DIR_INFO.CreationTime">
            <summary>The time that the file was created.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.FILE_ID_BOTH_DIR_INFO.LastAccessTime">
            <summary>The time that the file was last accessed.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.FILE_ID_BOTH_DIR_INFO.LastWriteTime">
            <summary>The time that the file was last written to.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.FILE_ID_BOTH_DIR_INFO.ChangeTime">
            <summary>The time that the file was last changed.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.FILE_ID_BOTH_DIR_INFO.EndOfFile">
            <summary>The absolute new end-of-file position as a byte offset from the start of the file to the end of the file.
            Because this value is zero-based, it actually refers to the first free byte in the file.
            In other words, EndOfFile is the offset to the byte that immediately follows the last valid byte in the file.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.FILE_ID_BOTH_DIR_INFO.AllocationSize">
            <summary>The number of bytes that are allocated for the file. This value is usually a multiple of the sector or cluster size of the underlying physical device.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.FILE_ID_BOTH_DIR_INFO.FileAttributes">
            <summary>The file attributes.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.FILE_ID_BOTH_DIR_INFO.FileNameLength">
            <summary>The length of the file name.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.FILE_ID_BOTH_DIR_INFO.EaSize">
            <summary>The size of the extended attributes for the file.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.FILE_ID_BOTH_DIR_INFO.ShortNameLength">
            <summary>The length of ShortName.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.FILE_ID_BOTH_DIR_INFO.ShortName">
            <summary>The short 8.3 file naming convention (for example, "FILENAME.TXT") name of the file.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.FILE_ID_BOTH_DIR_INFO.FileId">
            <summary>The file ID.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.FILE_ID_BOTH_DIR_INFO.FileName">
            <summary>The first character of the file name string. This is followed in memory by the remainder of the string.</summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.NativeMethods.FILETIME">
            <summary>Represents the number of 100-nanosecond intervals since January 1, 1601. This structure is a 64-bit value.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.FILETIME.op_Implicit(Alphaleonis.Win32.Filesystem.NativeMethods.FILETIME)~System.Int64">
            <summary>Converts a value to long.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.FILETIME.ToLong">
            <summary>Converts a value to long.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.FILETIME.Equals(System.Object)">
            <summary>Determines whether the specified Object is equal to the current Object.</summary>
            <param name="obj">Another object to compare to.</param>
            <returns><see langword="true"/> if the specified Object is equal to the current Object; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.FILETIME.GetHashCode">
            <summary>Serves as a hash function for a particular type.</summary>
            <returns>A hash code for the current Object.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.FILETIME.op_Equality(Alphaleonis.Win32.Filesystem.NativeMethods.FILETIME,Alphaleonis.Win32.Filesystem.NativeMethods.FILETIME)">
            <summary>Implements the operator ==</summary>
            <param name="left">A.</param>
            <param name="right">B.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.FILETIME.op_Inequality(Alphaleonis.Win32.Filesystem.NativeMethods.FILETIME,Alphaleonis.Win32.Filesystem.NativeMethods.FILETIME)">
            <summary>Implements the operator !=</summary>
            <param name="left">A.</param>
            <param name="right">B.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.NativeMethods.SP_DEVINFO_DATA">
            <summary>An SP_DEVINFO_DATA structure defines a device instance that is a member of a device information set.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.SP_DEVINFO_DATA.cbSize">
            <summary>The size, in bytes, of the SP_DEVINFO_DATA structure.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.SP_DEVINFO_DATA.ClassGuid">
            <summary>The GUID of the device's setup class.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.SP_DEVINFO_DATA.DevInst">
            <summary>An opaque handle to the device instance (also known as a handle to the devnode).</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.SP_DEVINFO_DATA.Reserved">
            <summary>Reserved. For internal use only.</summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.NativeMethods.SP_DEVICE_INTERFACE_DATA">
            <summary>An SP_DEVICE_INTERFACE_DATA structure defines a device interface in a device information set.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.SP_DEVICE_INTERFACE_DATA.cbSize">
            <summary>The size, in bytes, of the SP_DEVICE_INTERFACE_DATA structure.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.SP_DEVICE_INTERFACE_DATA.InterfaceClassGuid">
            <summary>The GUID for the class to which the device interface belongs.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.SP_DEVICE_INTERFACE_DATA.Flags">
            <summary>Can be one or more of the following: SPINT_ACTIVE (1), SPINT_DEFAULT (2), SPINT_REMOVED (3).</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.SP_DEVICE_INTERFACE_DATA.Reserved">
            <summary>Reserved. Do not use.</summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.NativeMethods.SP_DEVICE_INTERFACE_DETAIL_DATA">
            <summary>An SP_DEVICE_INTERFACE_DETAIL_DATA structure contains the path for a device interface.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.SP_DEVICE_INTERFACE_DETAIL_DATA.cbSize">
            <summary>The size, in bytes, of the SP_DEVICE_INTERFACE_DETAIL_DATA structure.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.SP_DEVICE_INTERFACE_DETAIL_DATA.DevicePath">
            <summary>The device interface path. This path can be passed to Win32 functions such as CreateFile.</summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.NativeMethods.WIN32_FILE_ATTRIBUTE_DATA">
            <summary>WIN32_FILE_ATTRIBUTE_DATA structure contains attribute information for a file or directory. The GetFileAttributesEx function uses this structure.</summary>
            <remarks>
            Not all file systems can record creation and last access time, and not all file systems record them in the same manner.
            For example, on the FAT file system, create time has a resolution of 10 milliseconds, write time has a resolution of 2 seconds,
            and access time has a resolution of 1 day. On the NTFS file system, access time has a resolution of 1 hour. 
            For more information, see File Times.
            </remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.WIN32_FILE_ATTRIBUTE_DATA.dwFileAttributes">
            <summary>The file attributes of a file.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.WIN32_FILE_ATTRIBUTE_DATA.ftCreationTime">
            <summary>A <see cref="T:Alphaleonis.Win32.Filesystem.NativeMethods.FILETIME"/> structure that specifies when a file or directory was created.
            If the underlying file system does not support creation time, this member is zero.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.WIN32_FILE_ATTRIBUTE_DATA.ftLastAccessTime">
            <summary>A <see cref="T:Alphaleonis.Win32.Filesystem.NativeMethods.FILETIME"/> structure.
            For a file, the structure specifies when the file was last read from, written to, or for executable files, run.
            For a directory, the structure specifies when the directory is created. If the underlying file system does not support last access time, this member is zero.
            On the FAT file system, the specified date for both files and directories is correct, but the time of day is always set to midnight.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.WIN32_FILE_ATTRIBUTE_DATA.ftLastWriteTime">
            <summary>A <see cref="T:Alphaleonis.Win32.Filesystem.NativeMethods.FILETIME"/> structure.
            For a file, the structure specifies when the file was last written to, truncated, or overwritten, for example, when WriteFile or SetEndOfFile are used.
            The date and time are not updated when file attributes or security descriptors are changed.
            For a directory, the structure specifies when the directory is created. If the underlying file system does not support last write time, this member is zero.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.WIN32_FILE_ATTRIBUTE_DATA.nFileSizeHigh">
            <summary>The high-order DWORD of the file size. This member does not have a meaning for directories.
            This value is zero unless the file size is greater than MAXDWORD.
            The size of the file is equal to (nFileSizeHigh * (MAXDWORD+1)) + nFileSizeLow.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.WIN32_FILE_ATTRIBUTE_DATA.nFileSizeLow">
            <summary>The low-order DWORD of the file size. This member does not have a meaning for directories.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.NativeMethods.WIN32_FILE_ATTRIBUTE_DATA.FileSize">
            <summary>The file size.</summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.NativeMethods.WIN32_FIND_DATA">
            <summary>Contains information about the file that is found by the FindFirstFile, FindFirstFileEx, or FindNextFile function.</summary>
            <remarks>
            If a file has a long file name, the complete name appears in the cFileName member, and the 8.3 format truncated version of the name appears
            in the cAlternateFileName member. Otherwise, cAlternateFileName is empty. If the FindFirstFileEx function was called with a value of FindExInfoBasic
            in the fInfoLevelId parameter, the cAlternateFileName member will always contain a <see langword="null"/> string value. This remains true for all subsequent calls to the
            FindNextFile function. As an alternative method of retrieving the 8.3 format version of a file name, you can use the GetShortPathName function.
            For more information about file names, see File Names, Paths, and Namespaces.
            </remarks>
            <remarks>
            Not all file systems can record creation and last access times, and not all file systems record them in the same manner.
            For example, on the FAT file system, create time has a resolution of 10 milliseconds, write time has a resolution of 2 seconds,
            and access time has a resolution of 1 day. The NTFS file system delays updates to the last access time for a file by up to 1 hour
            after the last access. For more information, see File Times.
            </remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.WIN32_FIND_DATA.dwFileAttributes">
            <summary>The file attributes of a file.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.WIN32_FIND_DATA.ftCreationTime">
            <summary>A <see cref="T:Alphaleonis.Win32.Filesystem.NativeMethods.FILETIME"/> structure that specifies when a file or directory was created.
            If the underlying file system does not support creation time, this member is zero.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.WIN32_FIND_DATA.ftLastAccessTime">
            <summary>A <see cref="T:Alphaleonis.Win32.Filesystem.NativeMethods.FILETIME"/> structure.
            For a file, the structure specifies when the file was last read from, written to, or for executable files, run.
            For a directory, the structure specifies when the directory is created. If the underlying file system does not support last access time, this member is zero.
            On the FAT file system, the specified date for both files and directories is correct, but the time of day is always set to midnight.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.WIN32_FIND_DATA.ftLastWriteTime">
            <summary>A <see cref="T:Alphaleonis.Win32.Filesystem.NativeMethods.FILETIME"/> structure.
            For a file, the structure specifies when the file was last written to, truncated, or overwritten, for example, when WriteFile or SetEndOfFile are used.
            The date and time are not updated when file attributes or security descriptors are changed.
            For a directory, the structure specifies when the directory is created. If the underlying file system does not support last write time, this member is zero.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.WIN32_FIND_DATA.nFileSizeHigh">
            <summary>The high-order DWORD of the file size. This member does not have a meaning for directories.
            This value is zero unless the file size is greater than MAXDWORD.
            The size of the file is equal to (nFileSizeHigh * (MAXDWORD+1)) + nFileSizeLow.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.WIN32_FIND_DATA.nFileSizeLow">
            <summary>The low-order DWORD of the file size. This member does not have a meaning for directories.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.WIN32_FIND_DATA.dwReserved0">
            <summary>If the dwFileAttributes member includes the FILE_ATTRIBUTE_REPARSE_POINT attribute, this member specifies the reparse point tag.
            Otherwise, this value is undefined and should not be used.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.WIN32_FIND_DATA.dwReserved1">
            <summary>Reserved for future use.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.WIN32_FIND_DATA.cFileName">
            <summary>The name of the file.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.WIN32_FIND_DATA.cAlternateFileName">
            <summary>An alternative name for the file. This name is in the classic 8.3 file name format.</summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.NativeMethods.WIN32_STREAM_ID">
            <summary>Contains stream data.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.WIN32_STREAM_ID.dwStreamId">
            <summary>Type of stream data.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.WIN32_STREAM_ID.dwStreamAttributes">
            <summary>Attributes of data to facilitate cross-operating system transfer.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.WIN32_STREAM_ID.Size">
            <summary>Size of data, in bytes.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.NativeMethods.WIN32_STREAM_ID.dwStreamNameSize">
            <summary>Length of the name of the alternative data stream, in bytes.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.DefineDosDevice(Alphaleonis.Win32.Filesystem.DosDeviceAttributes,System.String,System.String)">
            <summary>Defines, redefines, or deletes MS-DOS device names.</summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows XP [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2003 [desktop apps only]</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.DeleteVolumeMountPoint(System.String)">
            <summary>Deletes a drive letter or mounted folder.</summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows XP [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2003 [desktop apps only]</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.FindFirstVolume(System.Text.StringBuilder,System.UInt32)">
            <summary>Retrieves the name of a volume on a computer. FindFirstVolume is used to begin scanning the volumes of a computer.</summary>
            <returns>
            If the function succeeds, the return value is a search handle used in a subsequent call to the FindNextVolume and FindVolumeClose functions.
            If the function fails to find any volumes, the return value is the INVALID_HANDLE_VALUE error code. To get extended error information, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows XP [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2003 [desktop apps only]</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.FindFirstVolumeMountPoint(System.String,System.Text.StringBuilder,System.UInt32)">
            <summary>Retrieves the name of a mounted folder on the specified volume. FindFirstVolumeMountPoint is used to begin scanning the mounted folders on a volume.</summary>
            <returns>
            If the function succeeds, the return value is a search handle used in a subsequent call to the FindNextVolumeMountPoint and FindVolumeMountPointClose functions.
            If the function fails to find a mounted folder on the volume, the return value is the INVALID_HANDLE_VALUE error code.
            </returns>
            <remarks>Minimum supported client: Windows XP [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2003 [desktop apps only]</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.FindNextVolume(Alphaleonis.Win32.Filesystem.SafeFindVolumeHandle,System.Text.StringBuilder,System.UInt32)">
            <summary>Continues a volume search started by a call to the FindFirstVolume function. FindNextVolume finds one volume per call.</summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows XP [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2003 [desktop apps only]</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.FindNextVolumeMountPoint(Alphaleonis.Win32.Filesystem.SafeFindVolumeMountPointHandle,System.Text.StringBuilder,System.UInt32)">
            <summary>Continues a mounted folder search started by a call to the FindFirstVolumeMountPoint function. FindNextVolumeMountPoint finds one mounted folder per call.</summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError. If no more mounted folders can be found, the GetLastError function returns the ERROR_NO_MORE_FILES error code.
            In that case, close the search with the FindVolumeMountPointClose function.
            </returns>
            <remarks>Minimum supported client: Windows XP</remarks>
            <remarks>Minimum supported server: Windows Server 2003</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.FindVolumeClose(System.IntPtr)">
            <summary>Closes the specified volume search handle.</summary>
            <remarks>
              <para>SetLastError is set to <see langword="false"/>.</para>
              Minimum supported client: Windows XP [desktop apps only]. Minimum supported server: Windows Server 2003 [desktop apps only].
            </remarks>
            <returns>
              If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error
              information, call GetLastError.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.FindVolumeMountPointClose(System.IntPtr)">
            <summary>Closes the specified mounted folder search handle.</summary>
            <remarks>
              <para>SetLastError is set to <see langword="false"/>.</para>
              <para>Minimum supported client: Windows XP</para>
              <para>Minimum supported server: Windows Server 2003</para>
            </remarks>
            <returns>
              If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error
              information, call GetLastError.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.GetDriveType(System.String)">
            <summary>
              Determines whether a disk drive is a removable, fixed, CD-ROM, RAM disk, or network drive.
              <para>To determine whether a drive is a USB-type drive, call <see cref="M:Alphaleonis.Win32.Filesystem.NativeMethods.SetupDiGetDeviceRegistryProperty(System.Runtime.InteropServices.SafeHandle,Alphaleonis.Win32.Filesystem.NativeMethods.SP_DEVINFO_DATA@,Alphaleonis.Win32.Filesystem.NativeMethods.SetupDiGetDeviceRegistryPropertyEnum,System.UInt32@,Alphaleonis.Win32.SafeGlobalMemoryBufferHandle,System.UInt32,System.IntPtr)"/> and specify the
              SPDRP_REMOVAL_POLICY property.</para>
            </summary>
            <remarks>
              <para>SMB does not support volume management functions.</para>
              <para>Minimum supported client: Windows XP [desktop apps only]</para>
              <para>Minimum supported server: Windows Server 2003 [desktop apps only]</para>
            </remarks>
            <param name="lpRootPathName">Full pathname of the root file.</param>
            <returns>
              <para>The return value specifies the type of drive, see <see cref="T:System.IO.DriveType"/>.</para>
              <para>If the function fails, the return value is zero. To get extended error information, call GetLastError.</para>
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.GetLogicalDrives">
            <summary>
              Retrieves a bitmask representing the currently available disk drives.
            </summary>
            <remarks>
              <para>SMB does not support volume management functions.</para>
              <para>Minimum supported client: Windows XP [desktop apps only]</para>
              <para>Minimum supported server: Windows Server 2003 [desktop apps only]</para>
            </remarks>
            <returns>
              <para>If the function succeeds, the return value is a bitmask representing the currently available disk drives.</para>
              <para>Bit position 0 (the least-significant bit) is drive A, bit position 1 is drive B, bit position 2 is drive C, and so on.</para>
              <para>If the function fails, the return value is zero. To get extended error information, call GetLastError.</para>
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.GetVolumeInformation(System.String,System.Text.StringBuilder,System.UInt32,System.UInt32@,System.Int32@,Alphaleonis.Win32.Filesystem.NativeMethods.VolumeInfoAttributes@,System.Text.StringBuilder,System.UInt32)">
            <summary>Retrieves information about the file system and volume associated with the specified root directory.</summary>
            <returns>
            If all the requested information is retrieved, the return value is nonzero.
            If not all the requested information is retrieved, the return value is zero.
            </returns>
            <remarks>Minimum supported client: Windows XP [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2003 [desktop apps only]</remarks>
            <remarks>"lpRootPathName" must end with a trailing backslash.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.GetVolumeInformationByHandle(Microsoft.Win32.SafeHandles.SafeFileHandle,System.Text.StringBuilder,System.UInt32,System.UInt32@,System.Int32@,Alphaleonis.Win32.Filesystem.NativeMethods.VolumeInfoAttributes@,System.Text.StringBuilder,System.UInt32)">
            <summary>Retrieves information about the file system and volume associated with the specified file.</summary>
            <returns>
            If all the requested information is retrieved, the return value is nonzero.
            If not all the requested information is retrieved, the return value is zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>To retrieve the current compression state of a file or directory, use FSCTL_GET_COMPRESSION.</remarks>
            <remarks>SMB does not support volume management functions.</remarks>
            <remarks>Minimum supported client: Windows Vista [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2008 [desktop apps only]</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.GetVolumeNameForVolumeMountPoint(System.String,System.Text.StringBuilder,System.UInt32)">
            <summary>Retrieves a volume GUID path for the volume that is associated with the specified volume mount point (drive letter, volume GUID path, or mounted folder).</summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>Use GetVolumeNameForVolumeMountPoint to obtain a volume GUID path for use with functions such as SetVolumeMountPoint and FindFirstVolumeMountPoint that require a volume GUID path as an input parameter.</remarks>
            <remarks>SMB does not support volume management functions.</remarks>
            <remarks>Mount points aren't supported by ReFS volumes.</remarks>
            <remarks>Minimum supported client: Windows XP [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2003 [desktop apps only]</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.GetVolumePathName(System.String,System.Text.StringBuilder,System.UInt32)">
            <summary>Retrieves the volume mount point where the specified path is mounted.</summary>
            <remarks>
              <para>If a specified path is passed, GetVolumePathName returns the path to the volume mount point, which means that it returns the
              root of the volume where the end point of the specified path is located.</para>
              <para>For example, assume that you have volume D mounted at C:\Mnt\Ddrive and volume E mounted at "C:\Mnt\Ddrive\Mnt\Edrive". Also
              assume that you have a file with the path "E:\Dir\Subdir\MyFile".</para>
              <para>If you pass "C:\Mnt\Ddrive\Mnt\Edrive\Dir\Subdir\MyFile" to GetVolumePathName, it returns the path "C:\Mnt\Ddrive\Mnt\Edrive\".</para>
              <para>If a network share is specified, GetVolumePathName returns the shortest path for which GetDriveType returns DRIVE_REMOTE,
              which means that the path is validated as a remote drive that exists, which the current user can access.</para>
              <para>Minimum supported client: Windows XP [desktop apps only]</para>
              <para>Minimum supported server: Windows Server 2003 [desktop apps only]</para>
            </remarks>
            <returns>
              <para>If the function succeeds, the return value is nonzero.</para>
              <para>If the function fails, the return value is zero. To get extended error information, call GetLastError.</para>
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.GetVolumePathNamesForVolumeName(System.String,System.Char[],System.UInt32,System.UInt32@)">
            <summary>Retrieves a list of drive letters and mounted folder paths for the specified volume.</summary>
            <remarks>Minimum supported client: Windows XP.</remarks>
            <remarks>Minimum supported server: Windows Server 2003.</remarks>
            <returns>
              If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error
              information, call GetLastError.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.SetVolumeLabel(System.String,System.String)">
            <summary>Sets the label of a file system volume.</summary>
            <remarks>Minimum supported client: Windows XP [desktop apps only].</remarks>
            <remarks>Minimum supported server: Windows Server 2003 [desktop apps only].</remarks>
            <remarks>"lpRootPathName" must end with a trailing backslash.</remarks>
            <returns>
              If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error
              information, call GetLastError.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.SetVolumeMountPoint(System.String,System.String)">
            <summary>Associates a volume with a drive letter or a directory on another volume.</summary>
            <remarks>Minimum supported client: Windows XP [desktop apps only].</remarks>
            <remarks>Minimum supported server: Windows Server 2003 [desktop apps only].</remarks>
            <returns>
              If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error
              information, call GetLastError.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NativeMethods.QueryDosDevice(System.String,System.Char[],System.UInt32)">
            <summary>Retrieves information about MS-DOS device names.</summary>
            <remarks>Minimum supported client: Windows XP [desktop apps only].</remarks>
            <remarks>Minimum supported server: Windows Server 2003 [desktop apps only].</remarks>
            <returns>
              If the function succeeds, the return value is the number of TCHARs stored into the buffer pointed to by lpTargetPath. If the
              function fails, the return value is zero. To get extended error information, call GetLastError. If the buffer is too small, the
              function fails and the last error code is ERROR_INSUFFICIENT_BUFFER.
            </returns>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.PathFormat">
            <summary>Indicates the format of a path passed to a method.</summary>
            <remarks>
            At some point in code you know the full path of file system objects, e.g.: "C:\Windows".
            For example, Directory.EnumerateFileSystemEntries() will return all files and directories from a given path.
            Most likely, some processing will happen on the results of the enum. The file or directory may be passed
            on to another function. Whenever a file path is required, some performance can be gained.
            <para>&#160;</para>
            A path like: "C:\Windows" or "\\server\share" is considered a full path for a directory because it is rooted and has a drive/unc path.
            If the method supports it, <see cref="F:Alphaleonis.Win32.Filesystem.PathFormat.FullPath"/> and <see cref="F:Alphaleonis.Win32.Filesystem.PathFormat.LongFullPath"/> will skip GetFullPath()
            calls for path resolving of the object, while also avoiding path validation and checks.
            Using <see cref="F:Alphaleonis.Win32.Filesystem.PathFormat.RelativePath"/> (default) will always call GetFullPath() and perform path validation and checks.
            <para>&#160;</para>
            When working in a loop with thousands of files, <see cref="F:Alphaleonis.Win32.Filesystem.PathFormat.LongFullPath"/> will give the best performance.
            </remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.PathFormat.RelativePath">
            <summary>The format of the path is automatically detected by the method and internally converted to an extended length path.
            It can be either a standard (short) full path, an extended length (unicode) full path or a relative path.
            <para>Example relative path: "Windows".</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.PathFormat.FullPath">
            <summary>The path is a full path in either normal or extended length (UNICODE) format.
            Internally it will be converted to an extended length (UNICODE) path.
            Using this option has a very slight performance advantage compared to using <see cref="F:Alphaleonis.Win32.Filesystem.PathFormat.RelativePath"/>.
            <para>Example full path: "C:\Windows" or "\\server\share".</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.PathFormat.LongFullPath">
            <summary>The path is an extended length path. No additional processing will be done on the path, and it will be used as is.
            Using this option has a slight performance advantage compared to using <see cref="F:Alphaleonis.Win32.Filesystem.PathFormat.RelativePath"/>.
            <para>Example long full path: "\\?\C:\Windows" or "\\?\UNC\server\share".</para>
            </summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.AlreadyExistsException">
            <summary>The exception that is thrown when an attempt to create a directory or file that already exists was made.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.AlreadyExistsException.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.AlreadyExistsException"/> class.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.AlreadyExistsException.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.AlreadyExistsException"/> class.</summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.AlreadyExistsException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.AlreadyExistsException"/> class.</summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.AlreadyExistsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.AlreadyExistsException"/> class.</summary>
            <param name="info">The data for serializing or deserializing the object.</param>
            <param name="context">The source and destination for the object.</param>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.DeviceNotReadyException">
            <summary>The requested operation could not be completed because the device was not ready.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DeviceNotReadyException.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.DeviceNotReadyException"/> class.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DeviceNotReadyException.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.DeviceNotReadyException"/> class.</summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DeviceNotReadyException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.DeviceNotReadyException"/> class.</summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DeviceNotReadyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.DeviceNotReadyException"/> class.</summary>
            <param name="info">The data for serializing or deserializing the object.</param>
            <param name="context">The source and destination for the object.</param>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.DirectoryReadOnlyException">
            <summary>The operation could not be completed because the directory is read-only.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryReadOnlyException.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryReadOnlyException"/> class.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryReadOnlyException.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryReadOnlyException"/> class.</summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryReadOnlyException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryReadOnlyException"/> class.</summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryReadOnlyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryReadOnlyException"/> class.</summary>
            <param name="info">The data for serializing or deserializing the object.</param>
            <param name="context">The source and destination for the object.</param>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.DirectoryNotEmptyException">
            <summary>The operation could not be completed because the directory was not empty.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryNotEmptyException.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryNotEmptyException"/> class.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryNotEmptyException.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryNotEmptyException"/> class.</summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryNotEmptyException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryNotEmptyException"/> class.</summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DirectoryNotEmptyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryNotEmptyException"/> class.</summary>
            <param name="info">The data for serializing or deserializing the object.</param>
            <param name="context">The source and destination for the object.</param>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.FileReadOnlyException">
            <summary>The operation could not be completed because the file is read-only.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileReadOnlyException.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.FileReadOnlyException"/> class.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileReadOnlyException.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.FileReadOnlyException"/> class.</summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileReadOnlyException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.FileReadOnlyException"/> class.</summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileReadOnlyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.FileReadOnlyException"/> class.</summary>
            <param name="info">The data for serializing or deserializing the object.</param>
            <param name="context">The source and destination for the object.</param>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.File">
            <summary>Provides static methods for the creation, copying, deletion, moving, and opening of files, and aids in the creation of <see cref="T:System.IO.FileStream"/> objects.
              <para>This class cannot be inherited.</para>
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetHash(System.String,Alphaleonis.Win32.Security.HashType)">
            <summary>
            [AlphaFS] Calculates the hash/checksum for the given <paramref name="fileFullPath"/>.
            </summary>
            <param name="fileFullPath">The name of the file.</param>
            <param name="hashType">One of the <see cref="T:Alphaleonis.Win32.Security.HashType"/> values.</param>
            <returns>The hash.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetHash(System.String,Alphaleonis.Win32.Security.HashType,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>
            [AlphaFS] Calculates the hash/checksum for the given <paramref name="fileFullPath"/>.
            </summary>
            <param name="fileFullPath">The name of the file.</param>
            <param name="hashType">One of the <see cref="T:Alphaleonis.Win32.Security.HashType"/> values.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
            <returns>The hash.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetHash(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,Alphaleonis.Win32.Security.HashType)">
            <summary>
            [AlphaFS] Calculates the hash/checksum for the given <paramref name="fileFullPath"/>.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="fileFullPath">The name of the file.</param>
            <param name="hashType">One of the <see cref="T:Alphaleonis.Win32.Security.HashType"/> values.</param>
            <returns>The hash.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetHash(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,Alphaleonis.Win32.Security.HashType,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>
            [AlphaFS] Calculates the hash/checksum for the given <paramref name="fileFullPath"/>.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="fileFullPath">The name of the file.</param>
            <param name="hashType">One of the <see cref="T:Alphaleonis.Win32.Security.HashType"/> values.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
            <returns>The hash.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetHashCore(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,Alphaleonis.Win32.Security.HashType,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>
            [AlphaFS] Calculates the hash/checksum for the given <paramref name="fileFullPath"/>.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="fileFullPath">The name of the file.</param>
            <param name="hashType">One of the <see cref="T:Alphaleonis.Win32.Security.HashType"/> values.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
            <returns>The hash core.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.ExportEncryptedFileRaw(System.String,System.IO.Stream)">
            <summary>[AlphaFS] Backs up (export) encrypted files. This is one of a group of Encrypted File System (EFS) functions that is
            intended to implement backup and restore functionality, while maintaining files in their encrypted state.</summary>
            <remarks>
              <para>
                 The file being backed up is not decrypted; it is backed up in its encrypted state.
              </para>
              <para>
                 If the caller does not have access to the key for the file, the caller needs
                 <see cref="F:Alphaleonis.Win32.Security.Privilege.Backup"/> to export encrypted files. See
                 <see cref="T:Alphaleonis.Win32.Security.PrivilegeEnabler"/>.
              </para>
              <para>
                 To backup an encrypted file call one of the
                 <see cref="O:Alphaleonis.Win32.Filesystem.File.ExportEncryptedFileRaw"/> overloads and specify the file to backup
                 along with the destination stream of the backup data.
              </para>
              <para>
                 This function is intended for the backup of only encrypted files; see <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> for backup
                 of unencrypted files.
              </para>
            </remarks>
            <param name="fileName">The name of the file to be backed up.</param>
            <param name="outputStream">The destination stream to which the backup data will be written.</param>
            <seealso cref="O:Alphaleonis.Win32.Filesystem.File.ImportEncryptedFileRaw"/>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.ExportEncryptedFileRaw(System.String,System.IO.Stream,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Backs up (export) encrypted files. This is one of a group of Encrypted File System (EFS) functions that is
              intended to implement backup and restore functionality, while maintaining files in their encrypted state.</summary>
            <remarks>
              <para>
                 The file being backed up is not decrypted; it is backed up in its encrypted state.
              </para>
              <para>
                 If the caller does not have access to the key for the file, the caller needs
                 <see cref="F:Alphaleonis.Win32.Security.Privilege.Backup"/> to export encrypted files. See
                 <see cref="T:Alphaleonis.Win32.Security.PrivilegeEnabler"/>.
              </para>
              <para>
                 To backup an encrypted file call one of the
                 <see cref="O:Alphaleonis.Win32.Filesystem.File.ExportEncryptedFileRaw"/> overloads and specify the file to backup
                 along with the destination stream of the backup data.
              </para>
              <para>
                 This function is intended for the backup of only encrypted files; see <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> for backup
                 of unencrypted files.
              </para>
            </remarks>
            <param name="fileName">The name of the file to be backed up.</param>
            <param name="outputStream">The destination stream to which the backup data will be written.</param>
            <param name="pathFormat">The path format of the <paramref name="fileName"/> parameter.</param>
            <seealso cref="O:Alphaleonis.Win32.Filesystem.File.ImportEncryptedFileRaw"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.ImportEncryptedFileRaw(System.IO.Stream,System.String)">
            <summary>[AlphaFS] Restores (import) encrypted files. This is one of a group of Encrypted File System (EFS) functions that is
              intended to implement backup and restore functionality, while maintaining files in their encrypted state.</summary>
            <remarks>
              <para>
                If the caller does not have access to the key for the file, the caller needs
                <see cref="F:Alphaleonis.Win32.Security.Privilege.Backup"/> to restore encrypted files. See
                <see cref="T:Alphaleonis.Win32.Security.PrivilegeEnabler"/>.
              </para>
              <para>
                To restore an encrypted file call one of the
                <see cref="O:Alphaleonis.Win32.Filesystem.File.ImportEncryptedFileRaw"/> overloads and specify the file to restore
                along with the destination stream of the restored data.
              </para>
              <para>
                This function is intended for the restoration of only encrypted files; see <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> for
                backup of unencrypted files.
              </para>
            </remarks>
            <param name="inputStream">The stream to read previously backed up data from.</param>
            <param name="destinationFilePath">The path of the destination file to restore to.</param>
            <seealso cref="O:Alphaleonis.Win32.Filesystem.File.ExportEncryptedFileRaw"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.ImportEncryptedFileRaw(System.IO.Stream,System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Restores (import) encrypted files. This is one of a group of Encrypted File System (EFS) functions that is
              intended to implement backup and restore functionality, while maintaining files in their encrypted state.</summary>
            <remarks>
              <para>
                If the caller does not have access to the key for the file, the caller needs
                <see cref="F:Alphaleonis.Win32.Security.Privilege.Backup"/> to restore encrypted files. See
                <see cref="T:Alphaleonis.Win32.Security.PrivilegeEnabler"/>.
              </para>
              <para>
                To restore an encrypted file call one of the
                <see cref="O:Alphaleonis.Win32.Filesystem.File.ImportEncryptedFileRaw"/> overloads and specify the file to restore
                along with the destination stream of the restored data.
              </para>
              <para>
                This function is intended for the restoration of only encrypted files; see <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> for
                backup of unencrypted files.
              </para>
            </remarks>
            <param name="inputStream">The stream to read previously backed up data from.</param>
            <param name="destinationFilePath">The path of the destination file to restore to.</param>
            <param name="pathFormat">The path format of the <paramref name="destinationFilePath"/> parameter.</param>
            <seealso cref="O:Alphaleonis.Win32.Filesystem.File.ExportEncryptedFileRaw"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.ImportEncryptedFileRaw(System.IO.Stream,System.String,System.Boolean)">
            <summary>[AlphaFS] Restores (import) encrypted files. This is one of a group of Encrypted File System (EFS) functions that is
              intended to implement backup and restore functionality, while maintaining files in their encrypted state.</summary>
            <remarks>
              <para>
                If the caller does not have access to the key for the file, the caller needs
                <see cref="F:Alphaleonis.Win32.Security.Privilege.Backup"/> to restore encrypted files. See
                <see cref="T:Alphaleonis.Win32.Security.PrivilegeEnabler"/>.
              </para>
              <para>
                To restore an encrypted file call one of the
                <see cref="O:Alphaleonis.Win32.Filesystem.File.ImportEncryptedFileRaw"/> overloads and specify the file to restore
                along with the destination stream of the restored data.
              </para>
              <para>
                This function is intended for the restoration of only encrypted files; see <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> for
                backup of unencrypted files.
              </para>
            </remarks>
            <param name="inputStream">The stream to read previously backed up data from.</param>
            <param name="destinationFilePath">The path of the destination file to restore to.</param>
            <param name="overwriteHidden">If set to <see langword="true"/> a hidden file will be overwritten on import.</param>
            <seealso cref="O:Alphaleonis.Win32.Filesystem.File.ExportEncryptedFileRaw"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.ImportEncryptedFileRaw(System.IO.Stream,System.String,System.Boolean,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Restores (import) encrypted files. This is one of a group of Encrypted File System (EFS) functions that is
              intended to implement backup and restore functionality, while maintaining files in their encrypted state.</summary>
            <remarks>
              <para>
                If the caller does not have access to the key for the file, the caller needs
                <see cref="F:Alphaleonis.Win32.Security.Privilege.Backup"/> to restore encrypted files. See
                <see cref="T:Alphaleonis.Win32.Security.PrivilegeEnabler"/>.
              </para>
              <para>
                To restore an encrypted file call one of the
                <see cref="O:Alphaleonis.Win32.Filesystem.File.ImportEncryptedFileRaw"/> overloads and specify the file to restore
                along with the destination stream of the restored data.
              </para>
              <para>
                This function is intended for the restoration of only encrypted files; see <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> for
                backup of unencrypted files.
              </para>
            </remarks>
            <param name="inputStream">The stream to read previously backed up data from.</param>
            <param name="destinationFilePath">The path of the destination file to restore to.</param>
            <param name="overwriteHidden">If set to <see langword="true"/> a hidden file will be overwritten on import.</param>
            <param name="pathFormat">The path format of the <paramref name="destinationFilePath"/> parameter.</param>
            <seealso cref="O:Alphaleonis.Win32.Filesystem.File.ExportEncryptedFileRaw"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.EnumerateAlternateDataStreams(System.String)">
            <summary>[AlphaFS] Enumerates the streams of type :$DATA from the specified file.</summary>
            <param name="path">The path to the file to enumerate streams of.</param>
            <returns>The streams of type :$DATA in the specified file.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.EnumerateAlternateDataStreams(System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Enumerates the streams of type :$DATA from the specified file.</summary>
            <param name="path">The path to the file to enumerate streams of.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
            <returns>The streams of type :$DATA in the specified file.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.EnumerateAlternateDataStreamsTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>[AlphaFS] Enumerates the streams of type :$DATA from the specified file.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The path to the file to enumerate streams of.</param>
            <returns>The streams of type :$DATA in the specified file.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.EnumerateAlternateDataStreamsTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Enumerates the streams of type :$DATA from the specified file.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The path to the file to enumerate streams of.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
            <returns>The streams of type :$DATA in the specified file.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.EnumerateAlternateDataStreamsCore(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Enumerates the streams of type :$DATA from the specified file or directory.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The path to the file or directory to enumerate streams of.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
            <returns>The streams of type :$DATA in the specified file or directory.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.EnumerateHardlinks(System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Creates an enumeration of all the hard links to the specified <paramref name="path"/>.</summary>
            <param name="path">The name of the file.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
            <returns>An enumerable collection of <see cref="T:System.String"/> of all the hard links to the specified <paramref name="path"/></returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.EnumerateHardlinks(System.String)">
            <summary>[AlphaFS] Creates an enumeration of all the hard links to the specified <paramref name="path"/>.</summary>
            <param name="path">The name of the file.</param>
            <returns>An enumerable collection of <see cref="T:System.String"/> of all the hard links to the specified <paramref name="path"/></returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.EnumerateHardlinksTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Creates an enumeration of all the hard links to the specified <paramref name="path"/>.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The name of the file.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
            <returns>An enumerable collection of <see cref="T:System.String"/> of all the hard links to the specified <paramref name="path"/></returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.EnumerateHardlinksTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>[AlphaFS] Creates an enumeration of all the hard links to the specified <paramref name="path"/>.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The name of the file.</param>
            <returns>An enumerable collection of <see cref="T:System.String"/> of all the hard links to the specified <paramref name="path"/></returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.EnumerateHardlinksCore(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Creates an enumeration of all the hard links to the specified <paramref name="path"/>.</summary>
            <exception cref="T:System.PlatformNotSupportedException"/>
            <param name="transaction">The transaction.</param>
            <param name="path">The name of the file.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
            <returns>An enumerable collection of <see cref="T:System.String"/> of all the hard links to the specified <paramref name="path"/></returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.CreateSymbolicLink(System.String,System.String,Alphaleonis.Win32.Filesystem.SymbolicLinkTarget,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Creates a symbolic link.</summary>
            <remarks>See <see cref="F:Alphaleonis.Win32.Security.Privilege.CreateSymbolicLink"/> to run this method in an elevated state.</remarks>
            <param name="symlinkFileName">The name of the target for the symbolic link to be created.</param>
            <param name="targetFileName">The symbolic link to be created.</param>
            <param name="targetType">Indicates whether the link target, <paramref name="targetFileName"/>, is a file or directory.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>      
            <exception cref="T:System.PlatformNotSupportedException">Thrown when called on an unsupported platform.</exception> 
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.CreateSymbolicLink(System.String,System.String,Alphaleonis.Win32.Filesystem.SymbolicLinkTarget)">
            <summary>[AlphaFS] Creates a symbolic link.</summary>
            <remarks>See <see cref="F:Alphaleonis.Win32.Security.Privilege.CreateSymbolicLink"/> to run this method in an elevated state.</remarks>
            <param name="symlinkFileName">The name of the target for the symbolic link to be created.</param>
            <param name="targetFileName">The symbolic link to be created.</param>
            <param name="targetType">Indicates whether the link target, <paramref name="targetFileName"/>, is a file or directory.</param>      
            <exception cref="T:System.PlatformNotSupportedException">Thrown when called on an unsupported platform.</exception> 
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.CreateSymbolicLinkTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,Alphaleonis.Win32.Filesystem.SymbolicLinkTarget,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Creates a symbolic link.</summary>
            <remarks>See <see cref="F:Alphaleonis.Win32.Security.Privilege.CreateSymbolicLink"/> to run this method in an elevated state.</remarks>
            <param name="transaction">The transaction.</param>
            <param name="symlinkFileName">The name of the target for the symbolic link to be created.</param>
            <param name="targetFileName">The symbolic link to be created.</param>
            <param name="targetType">Indicates whether the link target, <paramref name="targetFileName"/>, is a file or directory.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>      
            <exception cref="T:System.PlatformNotSupportedException">Thrown when called on an unsupported platform.</exception>       
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.CreateSymbolicLinkTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,Alphaleonis.Win32.Filesystem.SymbolicLinkTarget)">
            <summary>[AlphaFS] Creates a symbolic link.</summary>
            <remarks>See <see cref="F:Alphaleonis.Win32.Security.Privilege.CreateSymbolicLink"/> to run this method in an elevated state.</remarks>
            <param name="transaction">The transaction.</param>
            <param name="symlinkFileName">The name of the target for the symbolic link to be created.</param>
            <param name="targetFileName">The symbolic link to be created.</param>
            <param name="targetType">Indicates whether the link target, <paramref name="targetFileName"/>, is a file or directory.</param>      
            <exception cref="T:System.PlatformNotSupportedException">Thrown when called on an unsupported platform.</exception> 
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.CreateSymbolicLinkCore(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,Alphaleonis.Win32.Filesystem.SymbolicLinkTarget,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>Creates a symbolic link.</summary>
            <remarks>See <see cref="F:Alphaleonis.Win32.Security.Privilege.CreateSymbolicLink"/> to run this method in an elevated state.</remarks>
            <param name="transaction">The transaction.</param>
            <param name="symlinkFileName">The name of the target for the symbolic link to be created.</param>
            <param name="targetFileName">The symbolic link to be created.</param>
            <param name="targetType">Indicates whether the link target, <paramref name="targetFileName"/>, is a file or directory.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>      
            <exception cref="T:System.PlatformNotSupportedException"/>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.CreateHardlink(System.String,System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Establishes a hard link between an existing file and a new file. This function is only supported on the NTFS file system, and only for files, not directories.</summary>
            <param name="fileName">The name of the new file. This parameter cannot specify the name of a directory.</param>
            <param name="existingFileName">The name of the existing file. This parameter cannot specify the name of a directory.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.CreateHardlink(System.String,System.String)">
            <summary>[AlphaFS] Establishes a hard link between an existing file and a new file. This function is only supported on the NTFS file system, and only for files, not directories.</summary>
            <param name="fileName">The name of the new file. This parameter cannot specify the name of a directory.</param>
            <param name="existingFileName">The name of the existing file. This parameter cannot specify the name of a directory.</param>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.CreateHardlinkTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>
              [AlphaFS] Establishes a hard link between an existing file and a new file. This function is only supported on the NTFS file system,
              and only for files, not directories.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="fileName">The name of the new file. This parameter cannot specify the name of a directory.</param>
            <param name="existingFileName">The name of the existing file. This parameter cannot specify the name of a directory.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.CreateHardlinkTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String)">
            <summary>
              [AlphaFS] Establishes a hard link between an existing file and a new file. This function is only supported on the NTFS file system,
              and only for files, not directories.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="fileName">The name of the new file. This parameter cannot specify the name of a directory.</param>
            <param name="existingFileName">The name of the existing file. This parameter cannot specify the name of a directory.</param>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.CreateHardlinkCore(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>Establish a hard link between an existing file and a new file. This function
              is only supported on the NTFS file system, and only for files, not directories.
            </summary>
            <exception cref="T:System.NotSupportedException"/>
            <param name="transaction">The transaction.</param>
            <param name="fileName">The name of the new file. This parameter cannot specify the name of a directory.</param>
            <param name="existingFileName">The name of the existing file. This parameter cannot specify the name of a directory.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Compress(System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Compresses a file using NTFS compression.</summary>
            <param name="path">A path that describes a file to compress.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Compress(System.String)">
            <summary>[AlphaFS] Compresses a file using NTFS compression.</summary>
            <param name="path">A path that describes a file to compress.</param>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.CompressTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Compresses a file using NTFS compression.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">A path that describes a file to compress.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.CompressTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>[AlphaFS] Compresses a file using NTFS compression.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">A path that describes a file to compress.</param>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Decompress(System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Decompresses an NTFS compressed file.</summary>
            <param name="path">A path that describes a file to decompress.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Decompress(System.String)">
            <summary>[AlphaFS] Decompresses an NTFS compressed file.</summary>
            <param name="path">A path that describes a file to decompress.</param>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.DecompressTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Decompresses an NTFS compressed file.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">A path that describes a file to decompress.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.DecompressTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>[AlphaFS] Decompresses an NTFS compressed file.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">A path that describes a file to decompress.</param>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Delete(System.String)">
            <summary>Deletes the specified file.</summary>
            <remarks>If the file to be deleted does not exist, no exception is thrown.</remarks>
            <param name="path">
              The name of the file to be deleted. Wildcard characters are not supported.
            </param>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <exception cref="T:Alphaleonis.Win32.Filesystem.FileReadOnlyException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Delete(System.String,System.Boolean,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Deletes the specified file.</summary>
            <remarks>If the file to be deleted does not exist, no exception is thrown.</remarks>
            <param name="path">
              The name of the file to be deleted. Wildcard characters are not supported.
            </param>
            <param name="ignoreReadOnly">
              <see langword="true"/> overrides the read only <see cref="T:System.IO.FileAttributes"/> of the file.
            </param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <exception cref="T:Alphaleonis.Win32.Filesystem.FileReadOnlyException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Delete(System.String,System.Boolean)">
            <summary>[AlphaFS] Deletes the specified file.</summary>
            <remarks>If the file to be deleted does not exist, no exception is thrown.</remarks>
            <param name="path">
              The name of the file to be deleted. Wildcard characters are not supported.
            </param>
            <param name="ignoreReadOnly">
              <see langword="true"/> overrides the read only <see cref="T:System.IO.FileAttributes"/> of the file.
            </param>      
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <exception cref="T:Alphaleonis.Win32.Filesystem.FileReadOnlyException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.DeleteTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>[AlphaFS] Deletes the specified file.</summary>
            <remarks>If the file to be deleted does not exist, no exception is thrown.</remarks>
            <param name="transaction">The transaction.</param>
            <param name="path">
              The name of the file to be deleted. Wildcard characters are not supported.
            </param>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <exception cref="T:Alphaleonis.Win32.Filesystem.FileReadOnlyException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.DeleteTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Boolean,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Deletes the specified file.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The name of the file to be deleted. Wildcard characters are not supported.</param>
            <param name="ignoreReadOnly"><see langword="true"/> overrides the read only <see cref="T:System.IO.FileAttributes"/> of the file.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
            <remarks>If the file to be deleted does not exist, no exception is thrown.</remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <exception cref="T:Alphaleonis.Win32.Filesystem.FileReadOnlyException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.DeleteTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Boolean)">
            <summary>[AlphaFS] Deletes the specified file.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The name of the file to be deleted. Wildcard characters are not supported.</param>
            <param name="ignoreReadOnly"><see langword="true"/> overrides the read only <see cref="T:System.IO.FileAttributes"/> of the file.</param>
            <remarks>If the file to be deleted does not exist, no exception is thrown.</remarks>      
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <exception cref="T:Alphaleonis.Win32.Filesystem.FileReadOnlyException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.DeleteFileCore(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Boolean,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>Deletes a Non-/Transacted file.</summary>
            <remarks>If the file to be deleted does not exist, no exception is thrown.</remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <exception cref="T:Alphaleonis.Win32.Filesystem.FileReadOnlyException"/>
            <param name="transaction">The transaction.</param>
            <param name="path">The name of the file to be deleted.</param>
            <param name="ignoreReadOnly"><see langword="true"/> overrides the read only <see cref="T:System.IO.FileAttributes"/> of the file.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Decrypt(System.String)">
            <summary>Decrypts a file that was encrypted by the current account using the Encrypt method.</summary>
            <param name="path">A path that describes a file to decrypt.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Decrypt(System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Decrypts a file that was encrypted by the current account using the Encrypt method.</summary>
            <param name="path">A path that describes a file to decrypt.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Encrypt(System.String)">
            <summary>Encrypts a file so that only the account used to encrypt the file can decrypt it.</summary>
            <param name="path">A path that describes a file to encrypt.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Encrypt(System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Encrypts a file so that only the account used to encrypt the file can decrypt it.</summary>
            <param name="path">A path that describes a file to encrypt.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.EncryptDecryptFileCore(System.Boolean,System.String,System.Boolean,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>Decrypts/encrypts a file or directory so that only the account used to encrypt the file can decrypt it.</summary>
            <exception cref="T:System.NotSupportedException"/>
            <param name="isFolder">Specifies that <paramref name="path"/> is a file or directory.</param>
            <param name="path">A path that describes a file to encrypt.</param>
            <param name="encrypt"><see langword="true"/> encrypt, <see langword="false"/> decrypt.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.CreateText(System.String)">
            <summary>Creates or opens a file for writing UTF-8 encoded text.</summary>
            <param name="path">The file to be opened for writing.</param>
            <returns>A StreamWriter that writes to the specified file using UTF-8 encoding.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.CreateText(System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Creates or opens a file for writing UTF-8 encoded text.</summary>
            <param name="path">The file to be opened for writing.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
            <returns>A StreamWriter that writes to the specified file using UTF-8 encoding.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.CreateText(System.String,System.Text.Encoding,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Creates or opens a file for writing <see cref="T:System.Text.Encoding"/> encoded text.</summary>
            <param name="path">The file to be opened for writing.</param>
            <param name="encoding">The encoding that is applied to the contents of the file.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
            <returns>A StreamWriter that writes to the specified file using UTF-8 encoding.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.CreateTextTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>[AlphaFS] Creates or opens a file for writing UTF-8 encoded text.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to be opened for writing.</param>
            <returns>A StreamWriter that writes to the specified file using UTF-8 encoding.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.CreateTextTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Text.Encoding,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Creates or opens a file for writing <see cref="T:System.Text.Encoding"/> encoded text.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to be opened for writing.</param>
            <param name="encoding">The encoding that is applied to the contents of the file.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
            <returns>A StreamWriter that writes to the specified file using UTF-8 encoding.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.CreateTextCore(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Text.Encoding,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>Creates or opens a file for writing <see cref="T:System.Text.Encoding"/> encoded text.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to be opened for writing.</param>
            <param name="encoding">The <see cref="T:System.Text.Encoding"/> applied to the contents of the file.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
            <returns>A <see cref="T:System.IO.StreamWriter"/> that writes to the specified file using NativeMethods.DefaultFileBufferSize encoding.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Copy(System.String,System.String)">
            <summary>Copies an existing file to a new file. Overwriting a file of the same name is not allowed.</summary>
            <remarks>
              <para>The attributes of the original file are retained in the copied file.</para>
              <para>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method.</para>
              <para>If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior.</para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="sourceFileName">The file to copy.</param>
            <param name="destinationFileName">The name of the destination file. This cannot be a directory or an existing file.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Copy(System.String,System.String,System.Boolean)">
            <summary>Copies an existing file to a new file. Overwriting a file of the same name is allowed.</summary>
            <remarks>
              <para>The attributes of the original file are retained in the copied file.</para>
              <para>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method.</para>
              <para>If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior.</para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="sourceFileName">The file to copy. </param>
            <param name="destinationFileName">The name of the destination file. This cannot be a directory.</param>
            <param name="overwrite"><see langword="true"/> if the destination file should ignoring the read-only and hidden attributes and overwrite; otherwise, <see langword="false"/>.</param>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Copy(System.String,System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Copies an existing file to a new file. Overwriting a file of the same name is not allowed.</summary>
            <remarks>
              <para>The attributes of the original file are retained in the copied file.</para>
              <para>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method.</para>
              <para>If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior.</para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="sourceFileName">The file to copy. </param>
            <param name="destinationFileName">The name of the destination file. This cannot be a directory.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Copy(System.String,System.String,System.Boolean,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Copies an existing file to a new file. Overwriting a file of the same name is allowed.</summary>
            <remarks>
              <para>The attributes of the original file are retained in the copied file.</para>
              <para>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method.</para>
              <para>If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior.</para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="sourceFileName">The file to copy. </param>
            <param name="destinationFileName">The name of the destination file. This cannot be a directory.</param>
            <param name="overwrite"><see langword="true"/> if the destination file should ignoring the read-only and hidden attributes and overwrite; otherwise, <see langword="false"/>.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.CopyTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String)">
            <summary>[AlphaFS] Copies an existing file to a new file. Overwriting a file of the same name is not allowed.</summary>
            <remarks>
              <para>The attributes of the original file are retained in the copied file.</para>
              <para>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method.</para>
              <para>If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior.</para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="transaction">The transaction.</param>
            <param name="sourceFileName">The file to copy.</param>
            <param name="destinationFileName">The name of the destination file. This cannot be a directory or an existing file.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.CopyTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Copies an existing file to a new file. Overwriting a file of the same name is not allowed.</summary>
            <remarks>
              <para>The attributes of the original file are retained in the copied file.</para>
              <para>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method.</para>
              <para>If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior.</para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="transaction">The transaction.</param>
            <param name="sourceFileName">The file to copy. </param>
            <param name="destinationFileName">The name of the destination file. This cannot be a directory.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.CopyTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,System.Boolean)">
            <summary>[AlphaFS] Copies an existing file to a new file. Overwriting a file of the same name is allowed.</summary>
            <remarks>
              <para>The attributes of the original file are retained in the copied file.</para>
              <para>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method.</para>
              <para>If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior.</para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="transaction">The transaction.</param>
            <param name="sourceFileName">The file to copy. </param>
            <param name="destinationFileName">The name of the destination file. This cannot be a directory.</param>
            <param name="overwrite"><see langword="true"/> if the destination file should ignoring the read-only and hidden attributes and overwrite; otherwise, <see langword="false"/>.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.CopyTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,System.Boolean,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Copies an existing file to a new file. Overwriting a file of the same name is allowed.</summary>
            <remarks>
              <para>The attributes of the original file are retained in the copied file.</para>
              <para>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method.</para>
              <para>If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior.</para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="transaction">The transaction.</param>
            <param name="sourceFileName">The file to copy. </param>
            <param name="destinationFileName">The name of the destination file. This cannot be a directory.</param>
            <param name="overwrite"><see langword="true"/> if the destination file should ignoring the read-only and hidden attributes and overwrite; otherwise, <see langword="false"/>.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Copy(System.String,System.String,Alphaleonis.Win32.Filesystem.CopyOptions)">
            <summary>[AlphaFS] Copies an existing file to a new file. Overwriting a file of the same name is allowed. <see cref="T:Alphaleonis.Win32.Filesystem.CopyOptions"/> can be specified.</summary>
            <remarks>
              <para>Option <see cref="F:Alphaleonis.Win32.Filesystem.CopyOptions.NoBuffering"/> is recommended for very large file transfers.</para>
              <para>The attributes of the original file are retained in the copied file.</para>
              <para>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method.</para>
              <para>If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior.</para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="sourceFileName">The file to copy.</param>
            <param name="destinationFileName">The name of the destination file. This cannot be a directory.</param>
            <param name="copyOptions"><see cref="T:Alphaleonis.Win32.Filesystem.CopyOptions"/> that specify how the file is to be copied. This parameter can be <see langword="null"/>.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Copy(System.String,System.String,Alphaleonis.Win32.Filesystem.CopyOptions,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Copies an existing file to a new file. Overwriting a file of the same name is allowed. <see cref="T:Alphaleonis.Win32.Filesystem.CopyOptions"/> can be specified.</summary>
            <remarks>
              <para>Option <see cref="F:Alphaleonis.Win32.Filesystem.CopyOptions.NoBuffering"/> is recommended for very large file transfers.</para>
              <para>The attributes of the original file are retained in the copied file.</para>
              <para>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method.</para>
              <para>If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior.</para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="sourceFileName">The file to copy.</param>
            <param name="destinationFileName">The name of the destination file. This cannot be a directory.</param>
            <param name="copyOptions"><see cref="T:Alphaleonis.Win32.Filesystem.CopyOptions"/> that specify how the file is to be copied. This parameter can be <see langword="null"/>.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Copy(System.String,System.String,Alphaleonis.Win32.Filesystem.CopyOptions,System.Boolean)">
            <summary>[AlphaFS] Copies an existing file to a new file. Overwriting a file of the same name is allowed. <see cref="T:Alphaleonis.Win32.Filesystem.CopyOptions"/> can be specified.</summary>
            <remarks>
              <para>Option <see cref="F:Alphaleonis.Win32.Filesystem.CopyOptions.NoBuffering"/> is recommended for very large file transfers.</para>
              <para>The attributes of the original file are retained in the copied file.</para>
              <para>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method.</para>
              <para>If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior.</para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="sourceFileName">The file to copy.</param>
            <param name="destinationFileName">The name of the destination file. This cannot be a directory.</param>
            <param name="copyOptions"><see cref="T:Alphaleonis.Win32.Filesystem.CopyOptions"/> that specify how the file is to be copied. This parameter can be <see langword="null"/>.</param>
            <param name="preserveDates"><see langword="true"/> if original Timestamps must be preserved, <see langword="false"/> otherwise.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Copy(System.String,System.String,Alphaleonis.Win32.Filesystem.CopyOptions,System.Boolean,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Copies an existing file to a new file. Overwriting a file of the same name is allowed. <see cref="T:Alphaleonis.Win32.Filesystem.CopyOptions"/> can be specified.</summary>
            <remarks>
              <para>Option <see cref="F:Alphaleonis.Win32.Filesystem.CopyOptions.NoBuffering"/> is recommended for very large file transfers.</para>
              <para>The attributes of the original file are retained in the copied file.</para>
              <para>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method.</para>
              <para>If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior.</para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="sourceFileName">The file to copy.</param>
            <param name="destinationFileName">The name of the destination file. This cannot be a directory.</param>
            <param name="copyOptions"><see cref="T:Alphaleonis.Win32.Filesystem.CopyOptions"/> that specify how the file is to be copied. This parameter can be <see langword="null"/>.</param>
            <param name="preserveDates"><see langword="true"/> if original Timestamps must be preserved, <see langword="false"/> otherwise.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Copy(System.String,System.String,Alphaleonis.Win32.Filesystem.CopyOptions,Alphaleonis.Win32.Filesystem.CopyMoveProgressRoutine,System.Object)">
            <summary>[AlphaFS] Copies an existing file to a new file. Overwriting a file of the same name is allowed.  <see cref="T:Alphaleonis.Win32.Filesystem.CopyOptions"/> can be specified,
              <para>and the possibility of notifying the application of its progress through a callback function.</para>
            </summary>
            <returns>A <see cref="T:Alphaleonis.Win32.Filesystem.CopyMoveResult"/> class with the status of the Copy action.</returns>
            <remarks>
              <para>Option <see cref="F:Alphaleonis.Win32.Filesystem.CopyOptions.NoBuffering"/> is recommended for very large file transfers.</para>
              <para>The attributes of the original file are retained in the copied file.</para>
              <para>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method.</para>
              <para>If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior.</para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="sourceFileName">The file to copy.</param>
            <param name="destinationFileName">The name of the destination file. This cannot be a directory.</param>
            <param name="copyOptions"><see cref="T:Alphaleonis.Win32.Filesystem.CopyOptions"/> that specify how the file is to be copied. This parameter can be <see langword="null"/>.</param>
            <param name="progressHandler">A callback function that is called each time another portion of the file has been copied. This parameter can be <see langword="null"/>.</param>
            <param name="userProgressData">The argument to be passed to the callback function. This parameter can be <see langword="null"/>.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Copy(System.String,System.String,Alphaleonis.Win32.Filesystem.CopyOptions,Alphaleonis.Win32.Filesystem.CopyMoveProgressRoutine,System.Object,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Copies an existing file to a new file. Overwriting a file of the same name is allowed.  <see cref="T:Alphaleonis.Win32.Filesystem.CopyOptions"/> can be specified,
              <para>and the possibility of notifying the application of its progress through a callback function.</para>
            </summary>
            <returns>A <see cref="T:Alphaleonis.Win32.Filesystem.CopyMoveResult"/> class with the status of the Copy action.</returns>
            <remarks>
              <para>Option <see cref="F:Alphaleonis.Win32.Filesystem.CopyOptions.NoBuffering"/> is recommended for very large file transfers.</para>
              <para>The attributes of the original file are retained in the copied file.</para>
              <para>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method.</para>
              <para>If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior.</para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="sourceFileName">The file to copy.</param>
            <param name="destinationFileName">The name of the destination file. This cannot be a directory.</param>
            <param name="copyOptions"><see cref="T:Alphaleonis.Win32.Filesystem.CopyOptions"/> that specify how the file is to be copied. This parameter can be <see langword="null"/>.</param>
            <param name="progressHandler">A callback function that is called each time another portion of the file has been copied. This parameter can be <see langword="null"/>.</param>
            <param name="userProgressData">The argument to be passed to the callback function. This parameter can be <see langword="null"/>.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Copy(System.String,System.String,Alphaleonis.Win32.Filesystem.CopyOptions,System.Boolean,Alphaleonis.Win32.Filesystem.CopyMoveProgressRoutine,System.Object)">
            <summary>[AlphaFS] Copies an existing file to a new file. Overwriting a file of the same name is allowed.  <see cref="T:Alphaleonis.Win32.Filesystem.CopyOptions"/> can be specified,
              <para>and the possibility of notifying the application of its progress through a callback function.</para>
            </summary>
            <returns>A <see cref="T:Alphaleonis.Win32.Filesystem.CopyMoveResult"/> class with the status of the Copy action.</returns>
            <remarks>
              <para>Option <see cref="F:Alphaleonis.Win32.Filesystem.CopyOptions.NoBuffering"/> is recommended for very large file transfers.</para>
              <para>The attributes of the original file are retained in the copied file.</para>
              <para>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method.</para>
              <para>If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior.</para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="sourceFileName">The file to copy.</param>
            <param name="destinationFileName">The name of the destination file. This cannot be a directory.</param>
            <param name="copyOptions"><see cref="T:Alphaleonis.Win32.Filesystem.CopyOptions"/> that specify how the file is to be copied. This parameter can be <see langword="null"/>.</param>
            <param name="preserveDates"><see langword="true"/> if original Timestamps must be preserved, <see langword="false"/> otherwise.</param>
            <param name="progressHandler">A callback function that is called each time another portion of the file has been copied. This parameter can be <see langword="null"/>.</param>
            <param name="userProgressData">The argument to be passed to the callback function. This parameter can be <see langword="null"/>.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Copy(System.String,System.String,Alphaleonis.Win32.Filesystem.CopyOptions,System.Boolean,Alphaleonis.Win32.Filesystem.CopyMoveProgressRoutine,System.Object,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Copies an existing file to a new file. Overwriting a file of the same name is allowed.  <see cref="T:Alphaleonis.Win32.Filesystem.CopyOptions"/> can be specified,
              <para>and the possibility of notifying the application of its progress through a callback function.</para>
            </summary>
            <returns>A <see cref="T:Alphaleonis.Win32.Filesystem.CopyMoveResult"/> class with the status of the Copy action.</returns>
            <remarks>
              <para>Option <see cref="F:Alphaleonis.Win32.Filesystem.CopyOptions.NoBuffering"/> is recommended for very large file transfers.</para>
              <para>The attributes of the original file are retained in the copied file.</para>
              <para>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method.</para>
              <para>If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior.</para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="sourceFileName">The file to copy.</param>
            <param name="destinationFileName">The name of the destination file. This cannot be a directory.</param>
            <param name="copyOptions"><see cref="T:Alphaleonis.Win32.Filesystem.CopyOptions"/> that specify how the file is to be copied. This parameter can be <see langword="null"/>.</param>
            <param name="preserveDates"><see langword="true"/> if original Timestamps must be preserved, <see langword="false"/> otherwise.</param>
            <param name="progressHandler">A callback function that is called each time another portion of the file has been copied. This parameter can be <see langword="null"/>.</param>
            <param name="userProgressData">The argument to be passed to the callback function. This parameter can be <see langword="null"/>.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.CopyTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,Alphaleonis.Win32.Filesystem.CopyOptions)">
            <summary>[AlphaFS] Copies an existing file to a new file. Overwriting a file of the same name is allowed. <see cref="T:Alphaleonis.Win32.Filesystem.CopyOptions"/> can be specified.</summary>
            <remarks>
              <para>Option <see cref="F:Alphaleonis.Win32.Filesystem.CopyOptions.NoBuffering"/> is recommended for very large file transfers.</para>
              <para>The attributes of the original file are retained in the copied file.</para>
              <para>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method.</para>
              <para>If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior.</para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="transaction">The transaction.</param>
            <param name="sourceFileName">The file to copy.</param>
            <param name="destinationFileName">The name of the destination file. This cannot be a directory.</param>
            <param name="copyOptions"><see cref="T:Alphaleonis.Win32.Filesystem.CopyOptions"/> that specify how the file is to be copied. This parameter can be <see langword="null"/>.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.CopyTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,Alphaleonis.Win32.Filesystem.CopyOptions,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Copies an existing file to a new file. Overwriting a file of the same name is allowed. <see cref="T:Alphaleonis.Win32.Filesystem.CopyOptions"/> can be specified.</summary>
            <remarks>
              <para>Option <see cref="F:Alphaleonis.Win32.Filesystem.CopyOptions.NoBuffering"/> is recommended for very large file transfers.</para>
              <para>The attributes of the original file are retained in the copied file.</para>
              <para>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method.</para>
              <para>If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior.</para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="transaction">The transaction.</param>
            <param name="sourceFileName">The file to copy.</param>
            <param name="destinationFileName">The name of the destination file. This cannot be a directory.</param>
            <param name="copyOptions"><see cref="T:Alphaleonis.Win32.Filesystem.CopyOptions"/> that specify how the file is to be copied. This parameter can be <see langword="null"/>.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.CopyTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,Alphaleonis.Win32.Filesystem.CopyOptions,System.Boolean)">
            <summary>[AlphaFS] Copies an existing file to a new file. Overwriting a file of the same name is allowed. <see cref="T:Alphaleonis.Win32.Filesystem.CopyOptions"/> can be specified.</summary>
            <remarks>
              <para>Option <see cref="F:Alphaleonis.Win32.Filesystem.CopyOptions.NoBuffering"/> is recommended for very large file transfers.</para>
              <para>The attributes of the original file are retained in the copied file.</para>
              <para>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method.</para>
              <para>If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior.</para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="transaction">The transaction.</param>
            <param name="sourceFileName">The file to copy.</param>
            <param name="destinationFileName">The name of the destination file. This cannot be a directory.</param>
            <param name="copyOptions"><see cref="T:Alphaleonis.Win32.Filesystem.CopyOptions"/> that specify how the file is to be copied. This parameter can be <see langword="null"/>.</param>
            <param name="preserveDates"><see langword="true"/> if original Timestamps must be preserved, <see langword="false"/> otherwise.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.CopyTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,Alphaleonis.Win32.Filesystem.CopyOptions,System.Boolean,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Copies an existing file to a new file. Overwriting a file of the same name is allowed. <see cref="T:Alphaleonis.Win32.Filesystem.CopyOptions"/> can be specified.</summary>
            <remarks>
              <para>Option <see cref="F:Alphaleonis.Win32.Filesystem.CopyOptions.NoBuffering"/> is recommended for very large file transfers.</para>
              <para>The attributes of the original file are retained in the copied file.</para>
              <para>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method.</para>
              <para>If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior.</para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="transaction">The transaction.</param>
            <param name="sourceFileName">The file to copy.</param>
            <param name="destinationFileName">The name of the destination file. This cannot be a directory.</param>
            <param name="copyOptions"><see cref="T:Alphaleonis.Win32.Filesystem.CopyOptions"/> that specify how the file is to be copied. This parameter can be <see langword="null"/>.</param>
            <param name="preserveDates"><see langword="true"/> if original Timestamps must be preserved, <see langword="false"/> otherwise.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.CopyTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,Alphaleonis.Win32.Filesystem.CopyOptions,Alphaleonis.Win32.Filesystem.CopyMoveProgressRoutine,System.Object)">
            <summary>[AlphaFS] Copies an existing file to a new file. Overwriting a file of the same name is allowed.  <see cref="T:Alphaleonis.Win32.Filesystem.CopyOptions"/> can be specified,
              <para>and the possibility of notifying the application of its progress through a callback function.</para>
            </summary>
            <returns>A <see cref="T:Alphaleonis.Win32.Filesystem.CopyMoveResult"/> class with the status of the Copy action.</returns>
            <remarks>
              <para>Option <see cref="F:Alphaleonis.Win32.Filesystem.CopyOptions.NoBuffering"/> is recommended for very large file transfers.</para>
              <para>The attributes of the original file are retained in the copied file.</para>
              <para>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method.</para>
              <para>If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior.</para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="transaction">The transaction.</param>
            <param name="sourceFileName">The file to copy.</param>
            <param name="destinationFileName">The name of the destination file. This cannot be a directory.</param>
            <param name="copyOptions"><see cref="T:Alphaleonis.Win32.Filesystem.CopyOptions"/> that specify how the file is to be copied. This parameter can be <see langword="null"/>.</param>
            <param name="progressHandler">A callback function that is called each time another portion of the file has been copied. This parameter can be <see langword="null"/>.</param>
            <param name="userProgressData">The argument to be passed to the callback function. This parameter can be <see langword="null"/>.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.CopyTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,Alphaleonis.Win32.Filesystem.CopyOptions,Alphaleonis.Win32.Filesystem.CopyMoveProgressRoutine,System.Object,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Copies an existing file to a new file. Overwriting a file of the same name is allowed.  <see cref="T:Alphaleonis.Win32.Filesystem.CopyOptions"/> can be specified,
              <para>and the possibility of notifying the application of its progress through a callback function.</para>
            </summary>
            <returns>A <see cref="T:Alphaleonis.Win32.Filesystem.CopyMoveResult"/> class with the status of the Copy action.</returns>
            <remarks>
              <para>Option <see cref="F:Alphaleonis.Win32.Filesystem.CopyOptions.NoBuffering"/> is recommended for very large file transfers.</para>
              <para>The attributes of the original file are retained in the copied file.</para>
              <para>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method.</para>
              <para>If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior.</para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="transaction">The transaction.</param>
            <param name="sourceFileName">The file to copy.</param>
            <param name="destinationFileName">The name of the destination file. This cannot be a directory.</param>
            <param name="copyOptions"><see cref="T:Alphaleonis.Win32.Filesystem.CopyOptions"/> that specify how the file is to be copied. This parameter can be <see langword="null"/>.</param>
            <param name="progressHandler">A callback function that is called each time another portion of the file has been copied. This parameter can be <see langword="null"/>.</param>
            <param name="userProgressData">The argument to be passed to the callback function. This parameter can be <see langword="null"/>.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.CopyTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,Alphaleonis.Win32.Filesystem.CopyOptions,System.Boolean,Alphaleonis.Win32.Filesystem.CopyMoveProgressRoutine,System.Object)">
            <summary>[AlphaFS] Copies an existing file to a new file. Overwriting a file of the same name is allowed.  <see cref="T:Alphaleonis.Win32.Filesystem.CopyOptions"/> can be specified,
              <para>and the possibility of notifying the application of its progress through a callback function.</para>
            </summary>
            <returns>A <see cref="T:Alphaleonis.Win32.Filesystem.CopyMoveResult"/> class with the status of the Copy action.</returns>
            <remarks>
              <para>Option <see cref="F:Alphaleonis.Win32.Filesystem.CopyOptions.NoBuffering"/> is recommended for very large file transfers.</para>
              <para>The attributes of the original file are retained in the copied file.</para>
              <para>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method.</para>
              <para>If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior.</para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="transaction">The transaction.</param>
            <param name="sourceFileName">The file to copy.</param>
            <param name="destinationFileName">The name of the destination file. This cannot be a directory.</param>
            <param name="copyOptions"><see cref="T:Alphaleonis.Win32.Filesystem.CopyOptions"/> that specify how the file is to be copied. This parameter can be <see langword="null"/>.</param>
            <param name="preserveDates"><see langword="true"/> if original Timestamps must be preserved, <see langword="false"/> otherwise.</param>
            <param name="progressHandler">A callback function that is called each time another portion of the file has been copied. This parameter can be <see langword="null"/>.</param>
            <param name="userProgressData">The argument to be passed to the callback function. This parameter can be <see langword="null"/>.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.CopyTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,Alphaleonis.Win32.Filesystem.CopyOptions,System.Boolean,Alphaleonis.Win32.Filesystem.CopyMoveProgressRoutine,System.Object,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Copies an existing file to a new file. Overwriting a file of the same name is allowed.  <see cref="T:Alphaleonis.Win32.Filesystem.CopyOptions"/> can be specified,
              <para>and the possibility of notifying the application of its progress through a callback function.</para>
            </summary>
            <returns>A <see cref="T:Alphaleonis.Win32.Filesystem.CopyMoveResult"/> class with the status of the Copy action.</returns>
            <remarks>
              <para>Option <see cref="F:Alphaleonis.Win32.Filesystem.CopyOptions.NoBuffering"/> is recommended for very large file transfers.</para>
              <para>The attributes of the original file are retained in the copied file.</para>
              <para>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method.</para>
              <para>If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior.</para>
            </remarks>
            <param name="transaction">The transaction.</param>
            <param name="sourceFileName">The file to copy.</param>
            <param name="destinationFileName">The name of the destination file. This cannot be a directory.</param>
            <param name="copyOptions"><see cref="T:Alphaleonis.Win32.Filesystem.CopyOptions"/> that specify how the file is to be copied. This parameter can be <see langword="null"/>.</param>
            <param name="preserveDates"><see langword="true"/> if original Timestamps must be preserved, <see langword="false"/> otherwise.</param>
            <param name="progressHandler">A callback function that is called each time another portion of the file has been copied. This parameter can be <see langword="null"/>.</param>
            <param name="userProgressData">The argument to be passed to the callback function. This parameter can be <see langword="null"/>.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Move(System.String,System.String)">
            <summary>Moves a specified file to a new location, providing the option to specify a new file name.</summary>
            <remarks>
              <para>This method works across disk volumes, and it does not throw an exception if the source and destination are the same.</para>
              <para>Note that if you attempt to replace a file by moving a file of the same name into that directory, you get an <see cref="T:System.IO.IOException"/>.</para>
              <para>You cannot use the Move method to overwrite an existing file.</para>
              <para>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method.</para>
              <para>If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior.</para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="sourceFileName">The name of the file to move.</param>
            <param name="destinationFileName">The new path for the file.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Move(System.String,System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Moves a specified file to a new location, providing the option to specify a new file name.</summary>
            <remarks>
              <para>This method works across disk volumes, and it does not throw an exception if the source and destination are the same.</para>
              <para>Note that if you attempt to replace a file by moving a file of the same name into that directory, you get an <see cref="T:System.IO.IOException"/>.</para>
              <para>You cannot use the Move method to overwrite an existing file.</para>
              <para>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method.</para>
              <para>If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior.</para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="sourceFileName">The name of the file to move.</param>
            <param name="destinationFileName">The new path for the file.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.MoveTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String)">
            <summary>[AlphaFS] Moves a specified file to a new location, providing the option to specify a new file name.</summary>
            <remarks>
              <para>This method works across disk volumes, and it does not throw an exception if the source and destination are the same.</para>
              <para>Note that if you attempt to replace a file by moving a file of the same name into that directory, you get an <see cref="T:System.IO.IOException"/>.</para>
              <para>You cannot use the Move method to overwrite an existing file.</para>
              <para>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method.</para>
              <para>If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior.</para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="transaction">The transaction.</param>
            <param name="sourceFileName">The name of the file to move.</param>
            <param name="destinationFileName">The new path for the file.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.MoveTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Moves a specified file to a new location, providing the option to specify a new file name.</summary>
            <remarks>
              <para>This method works across disk volumes, and it does not throw an exception if the source and destination are the same.</para>
              <para>Note that if you attempt to replace a file by moving a file of the same name into that directory, you get an <see cref="T:System.IO.IOException"/>.</para>
              <para>You cannot use the Move method to overwrite an existing file.</para>
              <para>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method.</para>
              <para>If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior.</para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="transaction">The transaction.</param>
            <param name="sourceFileName">The name of the file to move.</param>
            <param name="destinationFileName">The new path for the file.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Move(System.String,System.String,Alphaleonis.Win32.Filesystem.MoveOptions)">
            <summary>[AlphaFS] Moves a specified file to a new location, providing the option to specify a new file name.</summary>
            <remarks>
              <para>This method works across disk volumes, and it does not throw an exception if the source and destination are the same.</para>
              <para>Note that if you attempt to replace a file by moving a file of the same name into that directory, you get an <see cref="T:System.IO.IOException"/>.</para>
              <para>You cannot use the Move method to overwrite an existing file.</para>
              <para>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method.</para>
              <para>If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior.</para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="sourceFileName">The name of the file to move.</param>
            <param name="destinationFileName">The new path for the file.</param>
            <param name="moveOptions"><see cref="T:Alphaleonis.Win32.Filesystem.MoveOptions"/> that specify how the file is to be moved. This parameter can be <see langword="null"/>.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Move(System.String,System.String,Alphaleonis.Win32.Filesystem.MoveOptions,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Moves a specified file to a new location, providing the option to specify a new file name.</summary>
            <remarks>
              <para>This method works across disk volumes, and it does not throw an exception if the source and destination are the same.</para>
              <para>Note that if you attempt to replace a file by moving a file of the same name into that directory, you get an <see cref="T:System.IO.IOException"/>.</para>
              <para>You cannot use the Move method to overwrite an existing file.</para>
              <para>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method.</para>
              <para>If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior.</para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="sourceFileName">The name of the file to move.</param>
            <param name="destinationFileName">The new path for the file.</param>
            <param name="moveOptions"><see cref="T:Alphaleonis.Win32.Filesystem.MoveOptions"/> that specify how the file is to be moved. This parameter can be <see langword="null"/>.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Move(System.String,System.String,Alphaleonis.Win32.Filesystem.MoveOptions,Alphaleonis.Win32.Filesystem.CopyMoveProgressRoutine,System.Object)">
            <summary>[AlphaFS] Moves a specified file to a new location, providing the option to specify a new file name.</summary>
            <returns>A <see cref="T:Alphaleonis.Win32.Filesystem.CopyMoveResult"/> class with the status of the Move action.</returns>
            <remarks>
              <para>This method works across disk volumes, and it does not throw an exception if the source and destination are the same.</para>
              <para>Note that if you attempt to replace a file by moving a file of the same name into that directory, you get an <see cref="T:System.IO.IOException"/>.</para>
              <para>You cannot use the Move method to overwrite an existing file.</para>
              <para>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method.</para>
              <para>If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior.</para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="sourceFileName">The name of the file to move.</param>
            <param name="destinationFileName">The new path for the file.</param>
            <param name="moveOptions"><see cref="T:Alphaleonis.Win32.Filesystem.MoveOptions"/> that specify how the file is to be moved. This parameter can be <see langword="null"/>.</param>
            <param name="progressHandler">A callback function that is called each time another portion of the file has been moved. This parameter can be <see langword="null"/>.</param>
            <param name="userProgressData">The argument to be passed to the callback function. This parameter can be <see langword="null"/>.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Move(System.String,System.String,Alphaleonis.Win32.Filesystem.MoveOptions,Alphaleonis.Win32.Filesystem.CopyMoveProgressRoutine,System.Object,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Moves a specified file to a new location, providing the option to specify a new file name.</summary>
            <returns>A <see cref="T:Alphaleonis.Win32.Filesystem.CopyMoveResult"/> class with the status of the Move action.</returns>
            <remarks>
              <para>This method works across disk volumes, and it does not throw an exception if the source and destination are the same.</para>
              <para>Note that if you attempt to replace a file by moving a file of the same name into that directory, you get an <see cref="T:System.IO.IOException"/>.</para>
              <para>You cannot use the Move method to overwrite an existing file.</para>
              <para>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method.</para>
              <para>If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior.</para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="sourceFileName">The name of the file to move.</param>
            <param name="destinationFileName">The new path for the file.</param>
            <param name="moveOptions"><see cref="T:Alphaleonis.Win32.Filesystem.MoveOptions"/> that specify how the file is to be moved. This parameter can be <see langword="null"/>.</param>
            <param name="progressHandler">A callback function that is called each time another portion of the file has been moved. This parameter can be <see langword="null"/>.</param>
            <param name="userProgressData">The argument to be passed to the callback function. This parameter can be <see langword="null"/>.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.MoveTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,Alphaleonis.Win32.Filesystem.MoveOptions)">
            <summary>[AlphaFS] Moves a specified file to a new location, providing the option to specify a new file name.</summary>
            <remarks>
              <para>This method works across disk volumes, and it does not throw an exception if the source and destination are the same.</para>
              <para>Note that if you attempt to replace a file by moving a file of the same name into that directory, you get an <see cref="T:System.IO.IOException"/>.</para>
              <para>You cannot use the Move method to overwrite an existing file.</para>
              <para>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method.</para>
              <para>If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior.</para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="transaction">The transaction.</param>
            <param name="sourceFileName">The name of the file to move.</param>
            <param name="destinationFileName">The new path for the file.</param>
            <param name="moveOptions"><see cref="T:Alphaleonis.Win32.Filesystem.MoveOptions"/> that specify how the file is to be moved. This parameter can be <see langword="null"/>.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.MoveTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,Alphaleonis.Win32.Filesystem.MoveOptions,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Moves a specified file to a new location, providing the option to specify a new file name.</summary>
            <remarks>
              <para>This method works across disk volumes, and it does not throw an exception if the source and destination are the same.</para>
              <para>Note that if you attempt to replace a file by moving a file of the same name into that directory, you get an <see cref="T:System.IO.IOException"/>.</para>
              <para>You cannot use the Move method to overwrite an existing file.</para>
              <para>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method.</para>
              <para>If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior.</para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="transaction">The transaction.</param>
            <param name="sourceFileName">The name of the file to move.</param>
            <param name="destinationFileName">The new path for the file.</param>
            <param name="moveOptions"><see cref="T:Alphaleonis.Win32.Filesystem.MoveOptions"/> that specify how the file is to be moved. This parameter can be <see langword="null"/>.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.MoveTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,Alphaleonis.Win32.Filesystem.MoveOptions,Alphaleonis.Win32.Filesystem.CopyMoveProgressRoutine,System.Object)">
            <summary>[AlphaFS] Moves a specified file to a new location, providing the option to specify a new file name.</summary>
            <returns>A <see cref="T:Alphaleonis.Win32.Filesystem.CopyMoveResult"/> class with the status of the Move action.</returns>
            <remarks>
              <para>This method works across disk volumes, and it does not throw an exception if the source and destination are the same.</para>
              <para>Note that if you attempt to replace a file by moving a file of the same name into that directory, you get an <see cref="T:System.IO.IOException"/>.</para>
              <para>You cannot use the Move method to overwrite an existing file.</para>
              <para>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method.</para>
              <para>If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior.</para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="transaction">The transaction.</param>
            <param name="sourceFileName">The name of the file to move.</param>
            <param name="destinationFileName">The new path for the file.</param>
            <param name="moveOptions"><see cref="T:Alphaleonis.Win32.Filesystem.MoveOptions"/> that specify how the file is to be moved. This parameter can be <see langword="null"/>.</param>
            <param name="progressHandler">A callback function that is called each time another portion of the file has been moved. This parameter can be <see langword="null"/>.</param>
            <param name="userProgressData">The argument to be passed to the callback function. This parameter can be <see langword="null"/>.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.MoveTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,Alphaleonis.Win32.Filesystem.MoveOptions,Alphaleonis.Win32.Filesystem.CopyMoveProgressRoutine,System.Object,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Moves a specified file to a new location, providing the option to specify a new file name.</summary>
            <returns>A <see cref="T:Alphaleonis.Win32.Filesystem.CopyMoveResult"/> class with the status of the Move action.</returns>
            <remarks>
              <para>This method works across disk volumes, and it does not throw an exception if the source and destination are the same.</para>
              <para>Note that if you attempt to replace a file by moving a file of the same name into that directory, you get an <see cref="T:System.IO.IOException"/>.</para>
              <para>You cannot use the Move method to overwrite an existing file.</para>
              <para>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method.</para>
              <para>If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior.</para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="transaction">The transaction.</param>
            <param name="sourceFileName">The name of the file to move.</param>
            <param name="destinationFileName">The new path for the file.</param>
            <param name="moveOptions"><see cref="T:Alphaleonis.Win32.Filesystem.MoveOptions"/> that specify how the file is to be moved. This parameter can be <see langword="null"/>.</param>
            <param name="progressHandler">A callback function that is called each time another portion of the file has been moved. This parameter can be <see langword="null"/>.</param>
            <param name="userProgressData">The argument to be passed to the callback function. This parameter can be <see langword="null"/>.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.CopyMoveCore(System.Boolean,Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,System.Boolean,System.Nullable{Alphaleonis.Win32.Filesystem.CopyOptions},System.Nullable{Alphaleonis.Win32.Filesystem.MoveOptions},Alphaleonis.Win32.Filesystem.CopyMoveProgressRoutine,System.Object,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>Copy/move a Non-/Transacted file or directory including its children to a new location, <see cref="T:Alphaleonis.Win32.Filesystem.CopyOptions"/> or <see cref="T:Alphaleonis.Win32.Filesystem.MoveOptions"/> can be specified,
              and the possibility of notifying the application of its progress through a callback function.
            </summary>
            <returns>A <see cref="T:Alphaleonis.Win32.Filesystem.CopyMoveResult"/> class with the status of the Copy or Move action.</returns>      
            <remarks>
              <para>Option <see cref="F:Alphaleonis.Win32.Filesystem.CopyOptions.NoBuffering"/> is recommended for very large file transfers.</para>
              <para>You cannot use the Move method to overwrite an existing file, unless
              <paramref name="moveOptions"/> contains <see cref="F:Alphaleonis.Win32.Filesystem.MoveOptions.ReplaceExisting"/>.</para>
              <para>This Move method works across disk volumes, and it does not throw an exception if the
              source and destination are the same. </para>
              <para>Note that if you attempt to replace a file by moving a file of the same name into
              that directory, you get an IOException.</para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="isFolder">Specifies that <paramref name="sourcePath"/> and <paramref name="destinationPath"/> are a file or directory.</param>
            <param name="transaction">The transaction.</param>
            <param name="sourcePath">The source directory path plus file name.</param>
            <param name="destinationPath">The destination directory path plus file name.</param>
            <param name="preserveDates"><see langword="true"/> if original Timestamps must be preserved, <see langword="false"/> otherwise. This parameter is ignored for move operations.</param>
            <param name="copyOptions"><see cref="T:Alphaleonis.Win32.Filesystem.CopyOptions"/> that specify how the file is to be copied. This parameter can be <see langword="null"/>.</param>
            <param name="moveOptions">Flags that specify how the file or directory is to be moved. This parameter can be <see langword="null"/>.</param>
            <param name="progressHandler">A callback function that is called each time another portion of the file has been copied/moved. This parameter can be <see langword="null"/>.</param>
            <param name="userProgressData">The argument to be passed to the callback function. This parameter can be <see langword="null"/>.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.IsLocked(System.String)">
            <summary>[AlphaFS] Determines whether the specified file is in use (locked).</summary>
            <returns>Returns <see langword="true"/> if the specified file is in use (locked); otherwise, <see langword="false"/></returns>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.Exception"/>
            <param name="path">The file to check.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.IsLocked(System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Determines whether the specified file is in use (locked).</summary>
            <returns>Returns <see langword="true"/> if the specified file is in use (locked); otherwise, <see langword="false"/></returns>
            <exception cref="T:System.IO.FileNotFoundException"></exception>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.Exception"/>
            <param name="path">The file to check.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.IsLockedTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>[AlphaFS] Determines whether the specified file is in use (locked).</summary>
            <returns>Returns <see langword="true"/> if the specified file is in use (locked); otherwise, <see langword="false"/></returns>
            <exception cref="T:System.IO.FileNotFoundException"></exception>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.Exception"/>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to check.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.IsLockedTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Determines whether the specified file is in use (locked).</summary>
            <returns>Returns <see langword="true"/> if the specified file is in use (locked); otherwise, <see langword="false"/></returns>
            <exception cref="T:System.IO.FileNotFoundException"></exception>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.Exception"/>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to check.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.IsLockedCore(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Determines whether the specified file is in use (locked).</summary>
            <returns>Returns <see langword="true"/> if the specified file is in use (locked); otherwise, <see langword="false"/></returns>
            <exception cref="T:System.IO.FileNotFoundException"></exception>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.Exception"/>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to check.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.AppendAllLines(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Appends lines to a file, and then closes the file. If the specified file does not exist, this method creates a file, writes the
              specified lines to the file, and then closes the file.
            </summary>
            <remarks>
              The method creates the file if it doesn't exist, but it doesn't create new directories. Therefore, the value of the path parameter
              must contain existing directories.
            </remarks>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.Security.SecurityException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <exception cref="T:System.PlatformNotSupportedException"/>
            <param name="path">The file to append the lines to. The file is created if it doesn't already exist.</param>
            <param name="contents">The lines to append to the file.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.AppendAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)">
            <summary>Appends lines to a file, and then closes the file. If the specified file does not exist, this method creates a file, writes the
              specified lines to the file, and then closes the file.
            </summary>
            <remarks>
              The method creates the file if it doesn't exist, but it doesn't create new directories. Therefore, the value of the path parameter
              must contain existing directories.
            </remarks>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.Security.SecurityException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <exception cref="T:System.PlatformNotSupportedException"/>
            <param name="path">The file to append the lines to. The file is created if it doesn't already exist.</param>
            <param name="contents">The lines to append to the file.</param>
            <param name="encoding">The character <see cref="T:System.Text.Encoding"/> to use.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.AppendAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Appends lines to a file, and then closes the file. If the specified file does not exist, this method creates a file,
              writes the specified lines to the file, and then closes the file.
            </summary>
            <remarks>
              The method creates the file if it doesn't exist, but it doesn't create new directories. Therefore, the value of the path parameter
              must contain existing directories.
            </remarks>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.Security.SecurityException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <exception cref="T:System.PlatformNotSupportedException"/>
            <param name="path">The file to append the lines to. The file is created if it doesn't already exist.</param>
            <param name="contents">The lines to append to the file.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.AppendAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Appends lines to a file, and then closes the file. If the specified file does not
              exist, this method creates a file, writes the specified lines to the file, and then closes
              the file.
            </summary>
            <remarks>
              The method creates the file if it doesn't exist, but it doesn't create new directories.
              Therefore, the value of the path parameter must contain existing directories.
            </remarks>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.Security.SecurityException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <exception cref="T:System.PlatformNotSupportedException"/>
            <param name="path">
              The file to append the lines to. The file is created if it doesn't already exist.
            </param>
            <param name="contents">The lines to append to the file.</param>
            <param name="encoding">The character <see cref="T:System.Text.Encoding"/> to use.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.AppendAllLinesTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>[AlphaFS] Appends lines to a file, and then closes the file. If the specified file does not exist, this method creates a file,
              writes the specified lines to the file, and then closes the file.
            </summary>
            <remarks>
              The method creates the file if it doesn't exist, but it doesn't create new directories. Therefore, the value of the path parameter
              must contain existing directories.
            </remarks>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.Security.SecurityException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <exception cref="T:System.PlatformNotSupportedException"/>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to append the lines to. The file is created if it doesn't already exist.</param>
            <param name="contents">The lines to append to the file.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.AppendAllLinesTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)">
            <summary>[AlphaFS] Appends lines to a file, and then closes the file. If the specified file does not exist, this method creates a file,
              writes the specified lines to the file, and then closes the file.
            </summary>
            <remarks>
              The method creates the file if it doesn't exist, but it doesn't create new directories. Therefore, the value of the path parameter
              must contain existing directories.
            </remarks>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.Security.SecurityException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <exception cref="T:System.PlatformNotSupportedException"/>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to append the lines to. The file is created if it doesn't already exist.</param>
            <param name="contents">The lines to append to the file.</param>
            <param name="encoding">The character <see cref="T:System.Text.Encoding"/> to use.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.AppendAllLinesTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Collections.Generic.IEnumerable{System.String},Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Appends lines to a file, and then closes the file. If the specified file does not exist, this method creates a file, writes the
              specified lines to the file, and then closes the file.
            </summary>
            <remarks>
              The method creates the file if it doesn't exist, but it doesn't create new directories. Therefore, the value of the path parameter
              must contain existing directories.
            </remarks>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.Security.SecurityException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <exception cref="T:System.PlatformNotSupportedException"/>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to append the lines to. The file is created if it doesn't already exist.</param>
            <param name="contents">The lines to append to the file.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.AppendAllLinesTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Appends lines to a file, and then closes the file. If the specified file does not exist, this method creates a file,
              writes the specified lines to the file, and then closes the file.
            </summary>
            <remarks>
              The method creates the file if it doesn't exist, but it doesn't create new directories. Therefore, the value of the path parameter
              must contain existing directories.
            </remarks>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.Security.SecurityException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <exception cref="T:System.PlatformNotSupportedException"/>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to append the lines to. The file is created if it doesn't already exist.</param>
            <param name="contents">The lines to append to the file.</param>
            <param name="encoding">The character <see cref="T:System.Text.Encoding"/> to use.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.AppendAllText(System.String,System.String)">
            <summary>Appends the specified stringto the file, creating the file if it does not already exist.</summary>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.Security.SecurityException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <exception cref="T:System.PlatformNotSupportedException"/>
            <param name="path">The file to append the specified string to.</param>
            <param name="contents">The string to append to the file.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.AppendAllText(System.String,System.String,System.Text.Encoding)">
            <summary>Appends the specified string to the file, creating the file if it does not already exist.</summary>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.Security.SecurityException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <exception cref="T:System.PlatformNotSupportedException"/>
            <param name="path">The file to append the specified string to.</param>
            <param name="contents">The string to append to the file.</param>
            <param name="encoding">The character <see cref="T:System.Text.Encoding"/> to use.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.AppendAllText(System.String,System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Appends the specified stringto the file, creating the file if it does not already exist.</summary>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.Security.SecurityException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <exception cref="T:System.PlatformNotSupportedException"/>
            <param name="path">The file to append the specified string to.</param>
            <param name="contents">The string to append to the file.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.AppendAllText(System.String,System.String,System.Text.Encoding,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Appends the specified string to the file, creating the file if it does not already exist.</summary>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.Security.SecurityException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <exception cref="T:System.PlatformNotSupportedException"/>
            <param name="path">The file to append the specified string to.</param>
            <param name="contents">The string to append to the file.</param>
            <param name="encoding">The character <see cref="T:System.Text.Encoding"/> to use.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.AppendAllTextTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String)">
            <summary>[AlphaFS] Appends the specified stringto the file, creating the file if it does not already exist.</summary>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.Security.SecurityException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <exception cref="T:System.PlatformNotSupportedException"/>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to append the specified string to.</param>
            <param name="contents">The string to append to the file.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.AppendAllTextTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,System.Text.Encoding)">
            <summary>[AlphaFS] Appends the specified string to the file, creating the file if it does not already exist.</summary>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.Security.SecurityException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <exception cref="T:System.PlatformNotSupportedException"/>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to append the specified string to.</param>
            <param name="contents">The string to append to the file.</param>
            <param name="encoding">The character <see cref="T:System.Text.Encoding"/> to use.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.AppendAllTextTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Appends the specified stringto the file, creating the file if it does not already exist.</summary>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.Security.SecurityException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <exception cref="T:System.PlatformNotSupportedException"/>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to append the specified string to.</param>
            <param name="contents">The string to append to the file.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.AppendAllTextTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,System.Text.Encoding,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Appends the specified string to the file, creating the file if it does not already exist.</summary>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.Security.SecurityException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <exception cref="T:System.PlatformNotSupportedException"/>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to append the specified string to.</param>
            <param name="contents">The string to append to the file.</param>
            <param name="encoding">The character <see cref="T:System.Text.Encoding"/> to use.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.WriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Creates a new file, writes a collection of strings to the file, and then closes the file.</summary>
            <remarks>The default behavior of the method is to write out data by using UTF-8 encoding without a byte order mark (BOM).</remarks>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.Security.SecurityException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <exception cref="T:System.PlatformNotSupportedException"/>
            <param name="path">The file to write to.</param>
            <param name="contents">The lines to write to the file.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.WriteAllLines(System.String,System.String[])">
            <summary>Creates a new file by using the specified encoding, writes a collection of strings to the file, and then closes the file.</summary>
            <param name="path">The file to write to.</param>
            <param name="contents">The string array to write to the file.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.WriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)">
            <summary>Creates a new file by using the specified encoding, writes a collection of strings to the file, and then closes the file.</summary>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.Security.SecurityException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <exception cref="T:System.PlatformNotSupportedException"/>
            <param name="path">The file to write to.</param>
            <param name="contents">The lines to write to the file.</param>
            <param name="encoding">The character <see cref="T:System.Text.Encoding"/> to use.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.WriteAllLines(System.String,System.String[],System.Text.Encoding)">
            <summary>Creates a new file by using the specified encoding, writes a collection of strings to the file, and then closes the file.</summary>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.Security.SecurityException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <exception cref="T:System.PlatformNotSupportedException"/>
            <param name="path">The file to write to.</param>
            <param name="contents">The string array to write to the file.</param>
            <param name="encoding">The character <see cref="T:System.Text.Encoding"/> to use.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.WriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Creates a new file, writes a collection of strings to the file, and then closes the file.</summary>
            <remarks>The default behavior of the method is to write out data by using UTF-8 encoding without a byte order mark (BOM).</remarks>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.Security.SecurityException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <exception cref="T:System.PlatformNotSupportedException"/>
            <param name="path">The file to write to.</param>
            <param name="contents">The lines to write to the file.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.WriteAllLines(System.String,System.String[],Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Creates a new file by using the specified encoding, writes a collection of strings to the file, and then closes the file.</summary>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.Security.SecurityException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <exception cref="T:System.PlatformNotSupportedException"/>
            <param name="path">The file to write to.</param>
            <param name="contents">The string array to write to the file.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.WriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Creates a new file by using the specified encoding, writes a collection of strings to the file, and then closes the file.</summary>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.Security.SecurityException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <exception cref="T:System.PlatformNotSupportedException"/>
            <param name="path">The file to write to.</param>
            <param name="contents">The lines to write to the file.</param>
            <param name="encoding">The character <see cref="T:System.Text.Encoding"/> to use.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.WriteAllLines(System.String,System.String[],System.Text.Encoding,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Creates a new file by using the specified encoding, writes a collection of strings to the file, and then closes the file.</summary>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.Security.SecurityException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <exception cref="T:System.PlatformNotSupportedException"/>
            <param name="path">The file to write to.</param>
            <param name="contents">The string array to write to the file.</param>
            <param name="encoding">The character <see cref="T:System.Text.Encoding"/> to use.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.WriteAllLinesTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>[AlphaFS] Creates a new file, writes a collection of strings to the file, and then closes the file.</summary>
            <remarks>The default behavior of the method is to write out data by using UTF-8 encoding without a byte order mark (BOM).</remarks>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.Security.SecurityException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <exception cref="T:System.PlatformNotSupportedException"/>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to write to.</param>
            <param name="contents">The lines to write to the file.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.WriteAllLinesTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String[])">
            <summary>[AlphaFS] Creates a new file, writes a collection of strings to the file, and then closes the file.</summary>
            <remarks>The default behavior of the method is to write out data by using UTF-8 encoding without a byte order mark (BOM).</remarks>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.Security.SecurityException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <exception cref="T:System.PlatformNotSupportedException"/>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to write to.</param>
            <param name="contents">The string array to write to the file.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.WriteAllLinesTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)">
            <summary>[AlphaFS] Creates a new file by using the specified encoding, writes a collection of strings to the file, and then closes the file.</summary>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.Security.SecurityException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <exception cref="T:System.PlatformNotSupportedException"/>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to write to.</param>
            <param name="contents">The lines to write to the file.</param>
            <param name="encoding">The character <see cref="T:System.Text.Encoding"/> to use.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.WriteAllLinesTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String[],System.Text.Encoding)">
            <summary>[AlphaFS] Creates a new file by using the specified encoding, writes a collection of strings to the file, and then closes the file.</summary>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.Security.SecurityException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <exception cref="T:System.PlatformNotSupportedException"/>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to write to.</param>
            <param name="contents">The string array to write to the file.</param>
            <param name="encoding">The character <see cref="T:System.Text.Encoding"/> to use.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.WriteAllLinesTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Collections.Generic.IEnumerable{System.String},Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Creates a new file, writes a collection of strings to the file, and then closes the file.</summary>
            <remarks>The default behavior of the method is to write out data by using UTF-8 encoding without a byte order mark (BOM).</remarks>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.Security.SecurityException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <exception cref="T:System.PlatformNotSupportedException"/>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to write to.</param>
            <param name="contents">The lines to write to the file.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.WriteAllLinesTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String[],Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Creates a new file by using the specified encoding, writes a collection of strings to the file, and then closes the file.</summary>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.Security.SecurityException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <exception cref="T:System.PlatformNotSupportedException"/>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to write to.</param>
            <param name="contents">The string array to write to the file.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.WriteAllLinesTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Creates a new file by using the specified encoding, writes a collection of strings to the file, and then closes the file.</summary>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.Security.SecurityException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <exception cref="T:System.PlatformNotSupportedException"/>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to write to.</param>
            <param name="contents">The lines to write to the file.</param>
            <param name="encoding">The character <see cref="T:System.Text.Encoding"/> to use.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.WriteAllLinesTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String[],System.Text.Encoding,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Creates a new file by using the specified encoding, writes a collection of strings to the file, and then closes the file.</summary>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.Security.SecurityException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <exception cref="T:System.PlatformNotSupportedException"/>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to write to.</param>
            <param name="contents">The string array to write to the file.</param>
            <param name="encoding">The character <see cref="T:System.Text.Encoding"/> to use.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.WriteAllText(System.String,System.String)">
            <summary>Creates a new file, writes the specified string to the file, and then closes the file. If the target file already exists, it is overwritten.</summary>
            <remarks>This method uses UTF-8 encoding without a Byte-Order Mark (BOM)</remarks>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.Security.SecurityException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <exception cref="T:System.PlatformNotSupportedException"/>
            <param name="path">The file to write to.</param>
            <param name="contents">The string to write to the file.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.WriteAllText(System.String,System.String,System.Text.Encoding)">
            <summary>Creates a new file, writes the specified string to the file using the specified encoding, and then closes the file. If the target file already exists, it is overwritten.</summary>
            <param name="path">The file to write to.</param>
            <param name="contents">The string to write to the file.</param>
            <param name="encoding">The <see cref="T:System.Text.Encoding"/> applied to the contents of the file.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.WriteAllText(System.String,System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Creates a new file, writes the specified string to the file, and then closes the file. If the target file already exists, it is overwritten.</summary>
            <remarks>This method uses UTF-8 encoding without a Byte-Order Mark (BOM)</remarks>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.Security.SecurityException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <exception cref="T:System.PlatformNotSupportedException"/>
            <param name="path">The file to write to.</param>
            <param name="contents">The string to write to the file.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.WriteAllText(System.String,System.String,System.Text.Encoding,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Creates a new file, writes the specified string to the file using the specified encoding, and then closes the file. If the target file already exists, it is overwritten.</summary>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.Security.SecurityException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <exception cref="T:System.PlatformNotSupportedException"/>
            <param name="path">The file to write to.</param>
            <param name="contents">The string to write to the file.</param>
            <param name="encoding">The <see cref="T:System.Text.Encoding"/> applied to the contents of the file.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.WriteAllTextTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String)">
            <summary>[AlphaFS] Creates a new file as part of a transaction, write the contents to the file, and then closes the file. If the target file already exists, it is overwritten.</summary>
            <remarks>This method uses UTF-8 encoding without a Byte-Order Mark (BOM)</remarks>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.Security.SecurityException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <exception cref="T:System.PlatformNotSupportedException"/>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to write to.</param>
            <param name="contents">The string to write to the file.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.WriteAllTextTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,System.Text.Encoding)">
            <summary>[AlphaFS] Creates a new file as part of a transaction, writes the specified string to the file using the specified encoding, and then closes the file. If the target file already exists, it is overwritten.</summary>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.Security.SecurityException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <exception cref="T:System.PlatformNotSupportedException"/>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to write to.</param>
            <param name="contents">The string to write to the file.</param>
            <param name="encoding">The <see cref="T:System.Text.Encoding"/> applied to the contents of the file.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.WriteAllTextTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Creates a new file as part of a transaction, write the contents to the file, and then closes the file. If the target file already exists, it is overwritten.</summary>
            <remarks>This method uses UTF-8 encoding without a Byte-Order Mark (BOM)</remarks>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.Security.SecurityException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <exception cref="T:System.PlatformNotSupportedException"/>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to write to.</param>
            <param name="contents">The string to write to the file.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.WriteAllTextTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,System.Text.Encoding,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Creates a new file as part of a transaction, writes the specified string to the file using the specified encoding, and then closes the file. If the target file already exists, it is overwritten.</summary>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.Security.SecurityException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <exception cref="T:System.PlatformNotSupportedException"/>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to write to.</param>
            <param name="contents">The string to write to the file.</param>
            <param name="encoding">The <see cref="T:System.Text.Encoding"/> applied to the contents of the file.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.WriteAppendAllLinesCore(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding,System.Boolean,System.Boolean,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>Creates/appends a new file by using the specified encoding, writes a collection of strings to the file, and then closes the file.</summary>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.Security.SecurityException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <exception cref="T:System.PlatformNotSupportedException"/>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to write to.</param>
            <param name="contents">The lines to write to the file.</param>
            <param name="encoding">The character <see cref="T:System.Text.Encoding"/> to use.</param>
            <param name="isAppend"><see langword="true"/> for file Append, <see langword="false"/> for file Write.</param>
            <param name="addNewLine"><see langword="true"/> to a line terminator, <see langword="false"/> to ommit the line terminator.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.AppendText(System.String)">
            <summary>
              Creates a <see cref="T:System.IO.StreamWriter"/> that appends NativeMethods.DefaultFileEncoding encoded text to an existing file, or to a new
              file if the specified file does not exist.
            </summary>
            <param name="path">The path to the file to append to.</param>
            <returns>
              A stream writer that appends NativeMethods.DefaultFileEncoding encoded text to the specified file or to a new file.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.AppendText(System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>
              Creates a <see cref="T:System.IO.StreamWriter"/> that appends NativeMethods.DefaultFileEncoding encoded text to an existing file, or
              to a new file if the specified file does not exist.
            </summary>
            <param name="path">The path to the file to append to.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
            <returns>
              A stream writer that appends NativeMethods.DefaultFileEncoding encoded text to the specified file or to a new file.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.AppendText(System.String,System.Text.Encoding,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>
              Creates a <see cref="T:System.IO.StreamWriter"/> that appends NativeMethods.DefaultFileEncoding encoded text to an existing file, or
              to a new file if the specified file does not exist.
            </summary>
            <param name="path">The path to the file to append to.</param>
            <param name="encoding">The character <see cref="T:System.Text.Encoding"/> to use.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
            <returns>
              A stream writer that appends NativeMethods.DefaultFileEncoding encoded text to the specified file or to a new file.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.AppendText(System.String,System.Text.Encoding)">
            <summary>
              Creates a <see cref="T:System.IO.StreamWriter"/> that appends NativeMethods.DefaultFileEncoding encoded text to an existing file, or
              to a new file if the specified file does not exist.
            </summary>
            <param name="path">The path to the file to append to.</param>
            <param name="encoding">The character <see cref="T:System.Text.Encoding"/> to use.</param>
            <returns>
              A stream writer that appends NativeMethods.DefaultFileEncoding encoded text to the specified file or to a new file.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.AppendTextTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>
              Creates a <see cref="T:System.IO.StreamWriter"/> that appends NativeMethods.DefaultFileEncoding encoded text to an existing file, or
              to a new file if the specified file does not exist.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The path to the file to append to.</param>
            <returns>
              A stream writer that appends NativeMethods.DefaultFileEncoding encoded text to the specified file or to a new file.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.AppendTextTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>
              Creates a <see cref="T:System.IO.StreamWriter"/> that appends NativeMethods.DefaultFileEncoding encoded text to an existing file, or
              to a new file if the specified file does not exist.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The path to the file to append to.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
            <returns>
              A stream writer that appends NativeMethods.DefaultFileEncoding encoded text to the specified file or to a new file.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.AppendTextTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Text.Encoding,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>
              Creates a <see cref="T:System.IO.StreamWriter"/> that appends NativeMethods.DefaultFileEncoding encoded text to an existing file, or
              to a new file if the specified file does not exist.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The path to the file to append to.</param>
            <param name="encoding">The character <see cref="T:System.Text.Encoding"/> to use.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
            <returns>
              A stream writer that appends NativeMethods.DefaultFileEncoding encoded text to the specified file or to a new file.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.AppendTextTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Text.Encoding)">
            <summary>
              Creates a <see cref="T:System.IO.StreamWriter"/> that appends NativeMethods.DefaultFileEncoding encoded text to an existing file, or
              to a new file if the specified file does not exist.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The path to the file to append to.</param>
            <param name="encoding">The character <see cref="T:System.Text.Encoding"/> to use.</param>
            <returns>
              A stream writer that appends NativeMethods.DefaultFileEncoding encoded text to the specified file or to a new file.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.AppendTextCore(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Text.Encoding,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>Creates a <see cref="T:System.IO.StreamWriter"/> that appends NativeMethods.DefaultFileEncoding encoded text to an existing file, or to a new file if the specified file does not exist.</summary>
            <exception cref="T:System.IO.IOException"/>
            <param name="transaction">The transaction.</param>
            <param name="path">The path to the file to append to.</param>
            <param name="encoding">The character <see cref="T:System.Text.Encoding"/> to use.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
            <returns>
              A stream writer that appends NativeMethods.DefaultFileEncoding encoded text to the specified file or to a new file.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Create(System.String)">
            <summary>Creates or overwrites a file in the specified path.</summary>
            <param name="path">The path and name of the file to create.</param>
            <returns>A <see cref="T:System.IO.FileStream"/> that provides read/write access to the file specified in <paramref name="path"/>.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Create(System.String,System.Int32)">
            <summary>Creates or overwrites the specified file.</summary>
            <param name="path">The name of the file.</param>
            <param name="bufferSize">The number of bytes buffered for reads and writes to the file.</param>
            <returns>
              A <see cref="T:System.IO.FileStream"/> with the specified buffer size that provides read/write access to the file specified in
              <paramref name="path"/>.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Create(System.String,System.Int32,System.IO.FileOptions)">
            <summary>
              Creates or overwrites the specified file, specifying a buffer size and a
              <see cref="T:System.IO.FileOptions"/> value that describes how to create or overwrite the file.
            </summary>
            <param name="path">The name of the file.</param>
            <param name="bufferSize">The number of bytes buffered for reads and writes to the file.</param>
            <param name="options">One of the <see cref="T:System.IO.FileOptions"/> values that describes how to create or overwrite the file.</param>
            <returns>A new file with the specified buffer size.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Create(System.String,System.Int32,System.IO.FileOptions,System.Security.AccessControl.FileSecurity)">
            <summary>
              Creates or overwrites the specified file, specifying a buffer size and a
              <see cref="T:System.IO.FileOptions"/> value that describes how to create or overwrite the file.
            </summary>
            <param name="path">The name of the file.</param>
            <param name="bufferSize">The number of bytes buffered for reads and writes to the file.</param>
            <param name="options">One of the <see cref="T:System.IO.FileOptions"/> values that describes how to create or overwrite the file.</param>
            <param name="fileSecurity">
              One of the <see cref="T:System.Security.AccessControl.FileSecurity"/> values that determines the access control and audit security for the file.
            </param>
            <returns>A new file with the specified buffer size, file options, and file security.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Create(System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>Creates or overwrites a file in the specified path.</summary>
            <param name="path">The path and name of the file to create.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
            <returns>
              A <see cref="T:System.IO.FileStream"/> that provides read/write access to the file specified in
              <paramref name="path"/>.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Create(System.String,System.Int32,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>Creates or overwrites the specified file.</summary>
            <param name="path">The name of the file.</param>
            <param name="bufferSize">The number of bytes buffered for reads and writes to the file.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
            <returns>
              A <see cref="T:System.IO.FileStream"/> with the specified buffer size that provides read/write access to the file specified in
              <paramref name="path"/>.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Create(System.String,System.Int32,System.IO.FileOptions,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>
              Creates or overwrites the specified file, specifying a buffer size and a
              <see cref="T:System.IO.FileOptions"/> value that describes how to create or overwrite the file.
            </summary>
            <param name="path">The name of the file.</param>
            <param name="bufferSize">
              The number of bytes buffered for reads and writes to the file.
            </param>
            <param name="options">
              One of the <see cref="T:System.IO.FileOptions"/> values that describes how to create or overwrite the
              file.
            </param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
            <returns>A new file with the specified buffer size.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Create(System.String,System.Int32,System.IO.FileOptions,System.Security.AccessControl.FileSecurity,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>
              Creates or overwrites the specified file, specifying a buffer size and a
              <see cref="T:System.IO.FileOptions"/> value that describes how to create or overwrite the file.
            </summary>
            <param name="path">The name of the file.</param>
            <param name="bufferSize">
              The number of bytes buffered for reads and writes to the file.
            </param>
            <param name="options">
              One of the <see cref="T:System.IO.FileOptions"/> values that describes how to create or overwrite the
              file.
            </param>
            <param name="fileSecurity">
              One of the <see cref="T:System.Security.AccessControl.FileSecurity"/> values that determines the access control and audit
              security for the file.
            </param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
            <returns>
              A new file with the specified buffer size, file options, and file security.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.CreateTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>Creates or overwrites a file in the specified path.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The path and name of the file to create.</param>
            <returns>
              A <see cref="T:System.IO.FileStream"/> that provides read/write access to the file specified in
              <paramref name="path"/>.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.CreateTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Int32)">
            <summary>Creates or overwrites the specified file.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The name of the file.</param>
            <param name="bufferSize">
              The number of bytes buffered for reads and writes to the file.
            </param>
            <returns>
              A <see cref="T:System.IO.FileStream"/> with the specified buffer size that provides read/write access
              to the file specified in <paramref name="path"/>.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.CreateTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Int32,System.IO.FileOptions)">
            <summary>
              Creates or overwrites the specified file, specifying a buffer size and a
              <see cref="T:System.IO.FileOptions"/> value that describes how to create or overwrite the file.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The name of the file.</param>
            <param name="bufferSize">The number of bytes buffered for reads and writes to the file.</param>
            <param name="options">One of the <see cref="T:System.IO.FileOptions"/> values that describes how to create or overwrite the file.</param>
            <returns>A new file with the specified buffer size.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.CreateTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Int32,System.IO.FileOptions,System.Security.AccessControl.FileSecurity)">
            <summary>
              Creates or overwrites the specified file, specifying a buffer size and a
              <see cref="T:System.IO.FileOptions"/> value that describes how to create or overwrite the file.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The name of the file.</param>
            <param name="bufferSize">The number of bytes buffered for reads and writes to the file.</param>
            <param name="options">One of the <see cref="T:System.IO.FileOptions"/> values that describes how to create or overwrite the file.</param>
            <param name="fileSecurity">
              One of the <see cref="T:System.Security.AccessControl.FileSecurity"/> values that determines the access control and audit security for the file.
            </param>
            <returns>A new file with the specified buffer size, file options, and file security.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.CreateTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>Creates or overwrites a file in the specified path.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The path and name of the file to create.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
            <returns>
              A <see cref="T:System.IO.FileStream"/> that provides read/write access to the file specified in
              <paramref name="path"/>.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.CreateTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Int32,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>Creates or overwrites the specified file.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The name of the file.</param>
            <param name="bufferSize">The number of bytes buffered for reads and writes to the file.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
            <returns>
              A <see cref="T:System.IO.FileStream"/> with the specified buffer size that provides read/write access to the file specified in
              <paramref name="path"/>.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.CreateTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Int32,System.IO.FileOptions,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>
              Creates or overwrites the specified file, specifying a buffer size and a
              <see cref="T:System.IO.FileOptions"/> value that describes how to create or overwrite the file.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The name of the file.</param>
            <param name="bufferSize">The number of bytes buffered for reads and writes to the file.</param>
            <param name="options">One of the <see cref="T:System.IO.FileOptions"/> values that describes how to create or overwrite the file.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
            <returns>A new file with the specified buffer size.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.CreateTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Int32,System.IO.FileOptions,System.Security.AccessControl.FileSecurity,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>
              Creates or overwrites the specified file, specifying a buffer size and a
              <see cref="T:System.IO.FileOptions"/> value that describes how to create or overwrite the file.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The name of the file.</param>
            <param name="bufferSize">The number of bytes buffered for reads and writes to the file.</param>
            <param name="options">One of the <see cref="T:System.IO.FileOptions"/> values that describes how to create or overwrite the file.</param>
            <param name="fileSecurity">
              One of the <see cref="T:System.Security.AccessControl.FileSecurity"/> values that determines the access control and audit security for the file.
            </param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
            <returns>A new file with the specified buffer size, file options, and file security.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.CreateFileStreamCore(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,Alphaleonis.Win32.Filesystem.ExtendedFileAttributes,System.Security.AccessControl.FileSecurity,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>Creates or overwrites a file in the specified path.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The name of the file.</param>
            <param name="attributes">The <see cref="T:Alphaleonis.Win32.Filesystem.ExtendedFileAttributes"/> additional advanced options to create a file.</param>
            <param name="fileSecurity">
              A <see cref="T:System.Security.AccessControl.FileSecurity"/> instance that determines the access control and audit security for the file.
            </param>
            <param name="mode">The <see cref="T:System.IO.FileMode"/> option gives you more precise control over how you want to create a file.</param>
            <param name="access">
              The <see cref="T:System.IO.FileAccess"/> allow you additionally specify to default read/write capability - just write, bypassing any cache.
            </param>
            <param name="share">
              The <see cref="T:System.IO.FileShare"/> option controls how you would like to share created file with other requesters.
            </param>
             <param name="pathFormat">Indicates the format of the <paramref name="path"/> parameter.</param>
            <param name="bufferSize">The number of bytes buffered for reads and writes to the file.</param>
            <returns>A <see cref="T:System.IO.FileStream"/> that provides read/write access to the file specified in path.</returns>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.CreateFileCore(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,Alphaleonis.Win32.Filesystem.ExtendedFileAttributes,System.Security.AccessControl.FileSecurity,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Boolean,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>Creates or opens a file, directory or I/O device.</summary>
            <returns>A <see cref="T:Microsoft.Win32.SafeHandles.SafeFileHandle"/> that provides read/write access to the file or directory specified by <paramref name="path"/>.</returns>
            <remarks>
              <para>To obtain a directory handle using CreateFile, specify the FILE_FLAG_BACKUP_SEMANTICS flag as part of dwFlagsAndAttributes.</para>
              <para>The most commonly used I/O devices are as follows: file, file stream, directory, physical disk, volume, console buffer, tape drive, communications resource, mailslot, and pipe.</para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.NotSupportedException"/>
            <param name="transaction">The transaction.</param>
            <param name="path">The path and name of the file or directory to create.</param>
            <param name="attributes">One of the <see cref="T:Alphaleonis.Win32.Filesystem.ExtendedFileAttributes"/> values that describes how to create or overwrite the file or directory.</param>
            <param name="fileSecurity">A <see cref="T:System.Security.AccessControl.FileSecurity"/> instance that determines the access control and audit security for the file or directory.</param>
            <param name="fileMode">A <see cref="T:System.IO.FileMode"/> constant that determines how to open or create the file or directory.</param>
            <param name="fileSystemRights">A <see cref="T:System.Security.AccessControl.FileSystemRights"/> constant that determines the access rights to use when creating access and audit rules for the file or directory.</param>
            <param name="fileShare">A <see cref="T:System.IO.FileShare"/> constant that determines how the file or directory will be shared by processes.</param>
            <param name="checkPath">.</param>
            <param name="pathFormat">Indicates the format of the <paramref name="path"/> parameter.</param>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Exists(System.String)">
            <summary>Determines whether the specified file exists.</summary>
            <remarks>
              <para>MSDN: .NET 3.5+: Trailing spaces are removed from the end of the
              <paramref name="path"/> parameter before checking whether the directory exists.</para>
              <para>The Exists method returns <see langword="false"/> if any error occurs while trying to
              determine if the specified file exists.</para>
              <para>This can occur in situations that raise exceptions such as passing a file name with
              invalid characters or too many characters, a failing or missing disk, or if the caller does not have permission to read the
              file.</para>
              <para>The Exists method should not be used for path validation,
              this method merely checks if the file specified in path exists.</para>
              <para>Passing an invalid path to Exists returns false.</para>
              <para>Be aware that another process can potentially do something with the file in
              between the time you call the Exists method and perform another operation on the file, such as Delete.</para>
            </remarks>
            <param name="path">The file to check.</param>
            <returns>
              Returns <see langword="true"/> if the caller has the required permissions and
              <paramref name="path"/> contains the name of an existing file; otherwise,
              <see langword="false"/>
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Exists(System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Determines whether the specified file exists.</summary>
            <remarks>
              <para>MSDN: .NET 3.5+: Trailing spaces are removed from the end of the
              <paramref name="path"/> parameter before checking whether the directory exists.</para>
              <para>The Exists method returns <see langword="false"/> if any error occurs while trying to
              determine if the specified file exists.</para>
              <para>This can occur in situations that raise exceptions such as passing a file name with
              invalid characters or too many characters,</para>
              <para>a failing or missing disk, or if the caller does not have permission to read the
              file.</para>
              <para>The Exists method should not be used for path validation, this method merely checks
              if the file specified in path exists.</para>
              <para>Passing an invalid path to Exists returns false.</para>
              <para>Be aware that another process can potentially do something with the file in
              between the time you call the Exists method and perform another operation on the file, such
              as Delete.</para>
            </remarks>
            <param name="path">The file to check.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
            <returns>
              <para>Returns <see langword="true"/> if the caller has the required permissions and
              <paramref name="path"/> contains the name of an existing file; otherwise,
              <see langword="false"/></para>
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.ExistsTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>
              [AlphaFS] Determines whether the specified file exists.
            </summary>
            <remarks>
              <para>MSDN: .NET 3.5+: Trailing spaces are removed from the end of the
              <paramref name="path"/> parameter before checking whether the directory exists.</para>
              <para>The Exists method returns <see langword="false"/> if any error occurs while trying to
              determine if the specified file exists.</para>
              <para>This can occur in situations that raise exceptions such as passing a file name with
              invalid characters or too many characters,</para>
              <para>a failing or missing disk, or if the caller does not have permission to read the
              file.</para>
              <para>The Exists method should not be used for path validation,</para>
              <para>this method merely checks if the file specified in path exists.</para>
              <para>Passing an invalid path to Exists returns false.</para>
              <para>Be aware that another process can potentially do something with the file in
              between</para>
              <para>the time you call the Exists method and perform another operation on the file, such
              as Delete.</para>
            </remarks>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to check.</param>
            <returns>
              <para>Returns <see langword="true"/> if the caller has the required permissions</para>
              <para>and <paramref name="path"/> contains the name of an existing file; otherwise,
              <see langword="false"/></para>
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.ExistsTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>
              [AlphaFS] Determines whether the specified file exists.
            </summary>
            <remarks>
              <para>MSDN: .NET 3.5+: Trailing spaces are removed from the end of the
              <paramref name="path"/> parameter before checking whether the directory exists.</para>
              <para>The Exists method returns <see langword="false"/> if any error occurs while trying to
              determine if the specified file exists.</para>
              <para>This can occur in situations that raise exceptions such as passing a file name with
              invalid characters or too many characters,</para>
              <para>a failing or missing disk, or if the caller does not have permission to read the
              file.</para>
              <para>The Exists method should not be used for path validation,</para>
              <para>this method merely checks if the file specified in path exists.</para>
              <para>Passing an invalid path to Exists returns false.</para>
              <para>Be aware that another process can potentially do something with the file in
              between</para>
              <para>the time you call the Exists method and perform another operation on the file, such
              as Delete.</para>
            </remarks>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to check.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
            <returns>
              <para>Returns <see langword="true"/> if the caller has the required permissions</para>
              <para>and <paramref name="path"/> contains the name of an existing file; otherwise,
              <see langword="false"/></para>
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.ExistsCore(System.Boolean,Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>Determines whether the specified file or directory exists.</summary>
            <remarks>
              <para>MSDN: .NET 3.5+: Trailing spaces are removed from the end of the <paramref name="path"/> parameter before checking whether
              the directory exists.</para>
              <para>The Exists method returns <see langword="false"/> if any error occurs while trying to determine if the specified file
              exists.</para>
              <para>This can occur in situations that raise exceptions such as passing a file name with invalid characters or too many characters,
              </para>
              <para>a failing or missing disk, or if the caller does not have permission to read the file.</para>
              <para>The Exists method should not be used for path validation,
              this method merely checks if the file specified in path exists.</para>
              <para>Passing an invalid path to Exists returns false.</para>
              <para>Be aware that another process can potentially do something with the file in between
              the time you call the Exists method and perform another operation on the file, such as Delete.</para>
            </remarks>
            <param name="isFolder">Specifies that <paramref name="path"/> is a file or directory.</param>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to check.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
            <returns>
              <para>Returns <see langword="true"/> if the caller has the required permissions</para>
              <para>and <paramref name="path"/> contains the name of an existing file or directory; otherwise, <see langword="false"/></para>
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetAccessControl(System.String)">
            <summary>Gets a <see cref="T:System.Security.AccessControl.FileSecurity"/> object that encapsulates the access control list (ACL) entries for a specified file.</summary>
            <returns>A <see cref="T:System.Security.AccessControl.FileSecurity"/> object that encapsulates the access control rules for the file described by the <paramref name="path"/> parameter.</returns>      
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <param name="path">The path to a file containing a <see cref="T:System.Security.AccessControl.FileSecurity"/> object that describes the file's access control list (ACL) information.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetAccessControl(System.String,System.Security.AccessControl.AccessControlSections)">
            <summary>Gets a <see cref="T:System.Security.AccessControl.FileSecurity"/> object that encapsulates the access control list (ACL) entries for a specified file.</summary>
            <returns>A <see cref="T:System.Security.AccessControl.FileSecurity"/> object that encapsulates the access control rules for the file described by the <paramref name="path"/> parameter.</returns>      
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <param name="path">The path to a file containing a <see cref="T:System.Security.AccessControl.FileSecurity"/> object that describes the file's access control list (ACL) information.</param>
            <param name="includeSections">One (or more) of the <see cref="T:System.Security.AccessControl.AccessControlSections"/> values that specifies the type of access control list (ACL) information to receive.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetAccessControl(System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Gets a <see cref="T:System.Security.AccessControl.FileSecurity"/> object that encapsulates the access control list (ACL) entries for a specified file.</summary>
            <returns>A <see cref="T:System.Security.AccessControl.FileSecurity"/> object that encapsulates the access control rules for the file described by the <paramref name="path"/> parameter.</returns>      
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <param name="path">The path to a file containing a <see cref="T:System.Security.AccessControl.FileSecurity"/> object that describes the file's access control list (ACL) information.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetAccessControl(System.String,System.Security.AccessControl.AccessControlSections,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Gets a <see cref="T:System.Security.AccessControl.FileSecurity"/> object that encapsulates the access control list (ACL) entries for a specified file.</summary>
            <returns>A <see cref="T:System.Security.AccessControl.FileSecurity"/> object that encapsulates the access control rules for the file described by the <paramref name="path"/> parameter.</returns>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <param name="path">The path to a file containing a <see cref="T:System.Security.AccessControl.FileSecurity"/> object that describes the file's access control list (ACL) information.</param>
            <param name="includeSections">One (or more) of the <see cref="T:System.Security.AccessControl.AccessControlSections"/> values that specifies the type of access control list (ACL) information to receive.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetAccessControl(Microsoft.Win32.SafeHandles.SafeFileHandle)">
            <summary>[AlphaFS] Gets a <see cref="T:System.Security.AccessControl.FileSecurity"/> object that encapsulates the access control list (ACL) entries for a specified file handle.</summary>
            <returns>A <see cref="T:System.Security.AccessControl.FileSecurity"/> object that encapsulates the access control rules for the file described by the <paramref name="handle"/> parameter.</returns>      
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <param name="handle">A <see cref="T:System.Runtime.InteropServices.SafeHandle"/> to a file containing a <see cref="T:System.Security.AccessControl.FileSecurity"/> object that describes the file's access control list (ACL) information.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetAccessControl(Microsoft.Win32.SafeHandles.SafeFileHandle,System.Security.AccessControl.AccessControlSections)">
            <summary>[AlphaFS] Gets a <see cref="T:System.Security.AccessControl.FileSecurity"/> object that encapsulates the access control list (ACL) entries for a specified file handle.</summary>
            <returns>A <see cref="T:System.Security.AccessControl.FileSecurity"/> object that encapsulates the access control rules for the file described by the <paramref name="handle"/> parameter.</returns>      
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <param name="handle">A <see cref="T:System.Runtime.InteropServices.SafeHandle"/> to a file containing a <see cref="T:System.Security.AccessControl.FileSecurity"/> object that describes the file's access control list (ACL) information.</param>
            <param name="includeSections">One (or more) of the <see cref="T:System.Security.AccessControl.AccessControlSections"/> values that specifies the type of access control list (ACL) information to receive.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetAccessControlCore``1(System.Boolean,System.String,System.Security.AccessControl.AccessControlSections,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Gets an <see cref="T:System.Security.AccessControl.ObjectSecurity"/> object for a particular file or directory.</summary>
            <returns>An <see cref="T:System.Security.AccessControl.ObjectSecurity"/> object that encapsulates the access control rules for the file or directory described by the <paramref name="path"/> parameter.</returns>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="isFolder">Specifies that <paramref name="path"/> is a file or directory.</param>
            <param name="path">The path to a file/directory containing a <see cref="T:System.Security.AccessControl.FileSecurity"/>/<see cref="T:System.Security.AccessControl.DirectorySecurity"/> object that describes the file's/directory's access control list (ACL) information.</param>
            <param name="includeSections">One (or more) of the <see cref="T:System.Security.AccessControl.AccessControlSections"/> values that specifies the type of access control list (ACL) information to receive.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetAttributes(System.String)">
            <summary>Gets the <see cref="T:System.IO.FileAttributes"/> of the file on the path.</summary>
            <param name="path">The path to the file.</param>
            <returns>The <see cref="T:System.IO.FileAttributes"/> of the file on the path.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetAttributes(System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Gets the <see cref="T:System.IO.FileAttributes"/> of the file on the path.</summary>
            <param name="path">The path to the file.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
            <returns>The <see cref="T:System.IO.FileAttributes"/> of the file on the path.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetAttributesTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>[AlphaFS] Gets the <see cref="T:System.IO.FileAttributes"/> of the file on the path.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The path to the file.</param>
            <returns>The <see cref="T:System.IO.FileAttributes"/> of the file on the path.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetAttributesTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Gets the <see cref="T:System.IO.FileAttributes"/> of the file on the path.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The path to the file.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
            <returns>The <see cref="T:System.IO.FileAttributes"/> of the file on the path.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetAttributesExCore``1(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,Alphaleonis.Win32.Filesystem.PathFormat,System.Boolean)">
            <summary>Gets the <see cref="T:System.IO.FileAttributes"/> or <see cref="T:Alphaleonis.Win32.Filesystem.NativeMethods.WIN32_FILE_ATTRIBUTE_DATA"/> of the specified file or directory.</summary>
            <returns>The <see cref="T:System.IO.FileAttributes"/> or <see cref="T:Alphaleonis.Win32.Filesystem.NativeMethods.WIN32_FILE_ATTRIBUTE_DATA"/> of the specified file or directory.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.NotSupportedException"/>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="transaction">The transaction.</param>
            <param name="path">The path to the file or directory.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
            <param name="returnErrorOnNotFound"></param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.FillAttributeInfoCore(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,Alphaleonis.Win32.Filesystem.NativeMethods.WIN32_FILE_ATTRIBUTE_DATA@,System.Boolean,System.Boolean)">
            <summary>
              Calls NativeMethods.GetFileAttributesEx to retrieve WIN32_FILE_ATTRIBUTE_DATA.
              <para>Note that classes should use -1 as the uninitialized state for dataInitialized when relying on this method.</para>
            </summary>
            <remarks>No path (null, empty string) checking or normalization is performed.</remarks>
            <param name="transaction">.</param>
            <param name="pathLp">.</param>
            <param name="win32AttrData">[in,out].</param>
            <param name="tryagain">.</param>
            <param name="returnErrorOnNotFound">.</param>
            <returns>0 on success, otherwise a Win32 error code.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetCreationTime(System.String)">
            <summary>Gets the creation date and time of the specified file.</summary>
            <param name="path">The file for which to obtain creation date and time information.</param>
            <returns>
              A <see cref="T:System.DateTime"/> structure set to the creation date and time for the specified file. This value is expressed in
              local time.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetCreationTime(System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Gets the creation date and time of the specified file.</summary>
            <param name="path">The file for which to obtain creation date and time information.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
            <returns>
              A <see cref="T:System.DateTime"/> structure set to the creation date and time for the specified file. This value is expressed in
              local time.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetCreationTimeTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>[AlphaFS] Gets the creation date and time of the specified file.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file for which to obtain creation date and time information.</param>
            <returns>
              A <see cref="T:System.DateTime"/> structure set to the creation date and time for the specified file. This value is expressed in
              local time.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetCreationTimeTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Gets the creation date and time of the specified file.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file for which to obtain creation date and time information.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
            <returns>
              A <see cref="T:System.DateTime"/> structure set to the creation date and time for the specified file. This value is expressed in
              local time.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetCreationTimeUtc(System.String)">
            <summary>Gets the creation date and time, in Coordinated Universal Time (UTC) format, of the specified file.</summary>
            <param name="path">
              The file for which to obtain creation date and time information, in Coordinated Universal Time (UTC) format.
            </param>
            <returns>
              A <see cref="T:System.DateTime"/> structure set to the creation date and time for the specified file. This value is expressed in UTC
              time.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetCreationTimeUtc(System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Gets the creation date and time, in Coordinated Universal Time (UTC) format, of the specified file.</summary>
            <param name="path">
              The file for which to obtain creation date and time information, in Coordinated Universal Time (UTC) format.
            </param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
            <returns>
              A <see cref="T:System.DateTime"/> structure set to the creation date and time for the specified file. This value is expressed in UTC
              time.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetCreationTimeUtcTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>[AlphaFS] Gets the creation date and time, in Coordinated Universal Time (UTC) format, of the specified file.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">
              The file for which to obtain creation date and time information, in Coordinated Universal Time (UTC) format.
            </param>
            <returns>
              A <see cref="T:System.DateTime"/> structure set to the creation date and time for the specified file. This value is expressed in UTC
              time.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetCreationTimeUtcTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Gets the creation date and time, in Coordinated Universal Time (UTC) format, of the specified file.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">
              The file for which to obtain creation date and time information, in Coordinated Universal Time (UTC) format.
            </param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
            <returns>
              A <see cref="T:System.DateTime"/> structure set to the creation date and time for the specified file. This value is expressed in UTC
              time.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetCreationTimeCore(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Boolean,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>
              [AlphaFS] Gets the creation date and time, in Coordinated Universal Time (UTC) or local time, of the specified file or directory.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file or directory for which to obtain creation date and time information.</param>
            <param name="returnUtc">
              <see langword="true"/> gets the Coordinated Universal Time (UTC), <see langword="false"/> gets the local time.
            </param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
            <returns>
              A <see cref="T:System.DateTime"/> structure set to the creation date and time for the specified file or directory. Depending on
              <paramref name="returnUtc"/> this value is expressed in UTC- or local time.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetLastAccessTime(System.String)">
            <summary>Gets the date and time that the specified file was last accessed.</summary>
            <param name="path">The file for which to obtain access date and time information.</param>
            <returns>
              A <see cref="T:System.DateTime"/> structure set to the date and time that the specified file was last accessed. This value is
              expressed in local time.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetLastAccessTime(System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Gets the date and time that the specified file was last accessed.</summary>
            <param name="path">The file for which to obtain access date and time information.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
            <returns>
              A <see cref="T:System.DateTime"/> structure set to the date and time that the specified file was last accessed. This value is
              expressed in local time.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetLastAccessTimeTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>[AlphaFS] Gets the date and time that the specified file was last accessed.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file for which to obtain access date and time information.</param>
            <returns>
              A <see cref="T:System.DateTime"/> structure set to the date and time that the specified file was last accessed. This value is
              expressed in local time.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetLastAccessTimeTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Gets the date and time that the specified file was last accessed.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file for which to obtain access date and time information.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
            <returns>
              A <see cref="T:System.DateTime"/> structure set to the date and time that the specified file was last accessed. This value is
              expressed in local time.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetLastAccessTimeUtc(System.String)">
            <summary>Gets the date and time, in coordinated universal time (UTC), that the specified file was last accessed.</summary>
            <param name="path">The file for which to obtain access date and time information.</param>
            <returns>
              A <see cref="T:System.DateTime"/> structure set to the date and time that the specified file was last accessed. This value is
              expressed in UTC time.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetLastAccessTimeUtc(System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Gets the date and time, in coordinated universal time (UTC), that the specified file was last accessed.</summary>
            <param name="path">The file for which to obtain access date and time information.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
            <returns>
              A <see cref="T:System.DateTime"/> structure set to the date and time that the specified file was last accessed. This value is
              expressed in UTC time.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetLastAccessTimeUtcTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>[AlphaFS] Gets the date and time, in coordinated universal time (UTC), that the specified file was last accessed.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file for which to obtain access date and time information.</param>
            <returns>
              A <see cref="T:System.DateTime"/> structure set to the date and time that the specified file was last accessed. This value is
              expressed in UTC time.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetLastAccessTimeUtcTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Gets the date and time, in coordinated universal time (UTC), that the specified file was last accessed.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file for which to obtain access date and time information.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
            <returns>
              A <see cref="T:System.DateTime"/> structure set to the date and time that the specified file was last accessed. This value is
              expressed in UTC time.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetLastAccessTimeCore(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Boolean,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>
              [AlphaFS] Gets the date and time, in coordinated universal time (UTC) or local time, that the specified file or directory was last
              accessed.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file or directory for which to obtain access date and time information.</param>
            <param name="returnUtc">
              <see langword="true"/> gets the Coordinated Universal Time (UTC), <see langword="false"/> gets the local time.
            </param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
            <returns>
              A <see cref="T:System.DateTime"/> structure set to the date and time that the specified file or directory was last accessed.
              Depending on <paramref name="returnUtc"/> this value is expressed in UTC- or local time.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetLastWriteTime(System.String)">
            <summary>Gets the date and time that the specified file was last written to.</summary>
            <param name="path">The file for which to obtain write date and time information.</param>
            <returns>
              A <see cref="T:System.DateTime"/> structure set to the date and time that the specified file was last written to. This value is
              expressed in local time.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetLastWriteTime(System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Gets the date and time that the specified file was last written to.</summary>
            <param name="path">The file for which to obtain write date and time information.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
            <returns>
              A <see cref="T:System.DateTime"/> structure set to the date and time that the specified file was last written to. This value is
              expressed in local time.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetLastWriteTimeTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>[AlphaFS] Gets the date and time that the specified file was last written to.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file for which to obtain write date and time information.</param>
            <returns>
              A <see cref="T:System.DateTime"/> structure set to the date and time that the specified file was last written to. This value is
              expressed in local time.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetLastWriteTimeTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Gets the date and time that the specified file was last written to.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file for which to obtain write date and time information.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
            <returns>
              A <see cref="T:System.DateTime"/> structure set to the date and time that the specified file was last written to. This value is
              expressed in local time.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetLastWriteTimeUtc(System.String)">
            <summary>Gets the date and time, in coordinated universal time (UTC) time, that the specified file was last written to.</summary>
            <param name="path">The file for which to obtain write date and time information.</param>
            <returns>
              A <see cref="T:System.DateTime"/> structure set to the date and time that the specified file was last written to. This value is
              expressed in UTC time.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetLastWriteTimeUtc(System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>
              [AlphaFS] Gets the date and time, in coordinated universal time (UTC) time, that the specified file was last written to.
            </summary>
            <param name="path">The file for which to obtain write date and time information.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
            <returns>
              A <see cref="T:System.DateTime"/> structure set to the date and time that the specified file was last written to. This value is
              expressed in UTC time.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetLastWriteTimeUtcTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>
              [AlphaFS] Gets the date and time, in coordinated universal time (UTC) time, that the specified file was last written to.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file for which to obtain write date and time information.</param>
            <returns>
              A <see cref="T:System.DateTime"/> structure set to the date and time that the specified file was last written to. This value is
              expressed in UTC time.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetLastWriteTimeUtcTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>
              [AlphaFS] Gets the date and time, in coordinated universal time (UTC) time, that the specified file was last written to.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file for which to obtain write date and time information.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
            <returns>
              A <see cref="T:System.DateTime"/> structure set to the date and time that the specified file was last written to. This value is
              expressed in UTC time.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetLastWriteTimeCore(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Boolean,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>
              [AlphaFS] Gets the date and time, in coordinated universal time (UTC) or local time, that the specified file or directory was last
              written to.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file or directory for which to obtain write date and time information.</param>
            <param name="getUtc">
              <see langword="true"/> gets the Coordinated Universal Time (UTC), <see langword="false"/> gets the local time.
            </param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
            <returns>
              A <see cref="T:System.DateTime"/> structure set to the date and time that the specified file or directory was last written to.
              Depending on <paramref name="getUtc"/> this value is expressed in UTC- or local time.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Open(System.String,System.IO.FileMode)">
            <summary>Opens a <see cref="T:System.IO.FileStream"/> on the specified path with read/write access.</summary>
            <param name="path">The file to open.</param>
            <param name="mode">A <see cref="T:System.IO.FileMode"/> value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten.</param>
            <returns>A <see cref="T:System.IO.FileStream"/> opened in the specified mode and path, with read/write access and not shared.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Open(System.String,System.IO.FileMode,System.IO.FileAccess)">
            <summary>Opens a <see cref="T:System.IO.FileStream"/> on the specified path, with the specified mode and access.</summary>
            <param name="path">The file to open.</param>
            <param name="mode">A <see cref="T:System.IO.FileMode"/> value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten.</param>
            <param name="access">A <see cref="T:System.IO.FileAccess"/> value that specifies the operations that can be performed on the file.</param>
            <returns>An unshared <see cref="T:System.IO.FileStream"/> that provides access to the specified file, with the specified mode and access.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Open(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <summary>Opens a <see cref="T:System.IO.FileStream"/> on the specified path, having the specified mode with read, write, or read/write access and the specified sharing option.</summary>
            <param name="path">The file to open.</param>
            <param name="mode">A <see cref="T:System.IO.FileMode"/> value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten.</param>
            <param name="access">A <see cref="T:System.IO.FileAccess"/> value that specifies the operations that can be performed on the file.</param>
            <param name="share">A <see cref="T:System.IO.FileShare"/> value specifying the type of access other threads have to the file.</param>
            <returns>A <see cref="T:System.IO.FileStream"/> on the specified path, having the specified mode with read, write, or read/write access and the specified sharing option.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Open(System.String,System.IO.FileMode,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Opens a <see cref="T:System.IO.FileStream"/> on the specified path with read/write access.</summary>
            <param name="path">The file to open.</param>
            <param name="mode">
              A <see cref="T:System.IO.FileMode"/> value that specifies whether a file is created if one does not exist, and determines whether the contents
              of existing files are retained or overwritten.
            </param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
            <returns>A <see cref="T:System.IO.FileStream"/> opened in the specified mode and path, with read/write access and not shared.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Open(System.String,System.IO.FileMode,System.IO.FileAccess,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Opens a <see cref="T:System.IO.FileStream"/> on the specified path, with the specified mode and access.</summary>
            <param name="path">The file to open.</param>
            <param name="mode">
              A <see cref="T:System.IO.FileMode"/> value that specifies whether a file is created if one does not exist, and determines whether the contents
              of existing files are retained or overwritten.
            </param>
            <param name="access">A <see cref="T:System.IO.FileAccess"/> value that specifies the operations that can be performed on the file.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
            <returns>
              An unshared <see cref="T:System.IO.FileStream"/> that provides access to the specified file, with the specified mode and access.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Open(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Opens a <see cref="T:System.IO.FileStream"/> on the specified path, having the specified mode with read, write, or read/write access and the specified sharing option.</summary>
            <param name="path">The file to open.</param>
            <param name="mode">
              A <see cref="T:System.IO.FileMode"/> value that specifies whether a file is created if one does not exist, and determines whether the contents
              of existing files are retained or overwritten.
            </param>
            <param name="access">A <see cref="T:System.IO.FileAccess"/> value that specifies the operations that can be performed on the file.</param>
            <param name="share">A <see cref="T:System.IO.FileShare"/> value specifying the type of access other threads have to the file.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
            <returns>
              A <see cref="T:System.IO.FileStream"/> on the specified path, having the specified mode with read, write, or read/write access and the
              specified sharing option.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Open(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,Alphaleonis.Win32.Filesystem.ExtendedFileAttributes,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Opens a <see cref="T:System.IO.FileStream"/> on the specified path, having the specified mode with read, write, or read/write access and the specified sharing option.</summary>
            <param name="path">The file to open.</param>
            <param name="mode">
              A <see cref="T:System.IO.FileMode"/> value that specifies whether a file is created if one does not exist, and determines whether the contents
              of existing files are retained or overwritten.
            </param>
            <param name="access">A <see cref="T:System.IO.FileAccess"/> value that specifies the operations that can be performed on the file.</param>
            <param name="share">A <see cref="T:System.IO.FileShare"/> value specifying the type of access other threads have to the file.</param>
            <param name="extendedAttributes">The extended attributes.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
            <returns>
              A <see cref="T:System.IO.FileStream"/> on the specified path, having the specified mode with read, write, or read/write access and the
              specified sharing option.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Open(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32)">
            <summary>[AlphaFS] Opens a <see cref="T:System.IO.FileStream"/> on the specified path using the specified creation mode, read/write and sharing permission, and buffer size.</summary>
            <param name="path">The file to open.</param>
            <param name="mode">A constant that determines how to open or create the file.</param>
            <param name="access">A <see cref="T:System.IO.FileAccess"/> value that specifies the operations that can be performed on the
            file.</param>
            <param name="share">A constant that determines how the file will be shared by processes.</param>
            <param name="bufferSize">A positive <see cref="T:System.Int32"/> value greater than 0 indicating the buffer size. The default buffer size is 4096. </param>
            <returns>
              A <see cref="T:System.IO.FileStream"/> on the specified path, having the specified mode with read, write, or read/write
              access and the specified sharing option.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Open(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.Boolean)">
            <summary>[AlphaFS] Opens a <see cref="T:System.IO.FileStream"/> on the specified path using the specified creation mode, read/write and sharing permission, and buffer size.</summary>
            <param name="path">The file to open.</param>
            <param name="mode">A constant that determines how to open or create the file.</param>
            <param name="access">A <see cref="T:System.IO.FileAccess"/> value that specifies the operations that can be performed on the
            file.</param>
            <param name="share">A constant that determines how the file will be shared by processes.</param>
            <param name="bufferSize">A positive <see cref="T:System.Int32"/> value greater than 0 indicating the buffer size. The
            default buffer size is 4096.</param>
            <param name="useAsync">Specifies whether to use asynchronous I/O or synchronous I/O. However, note that the
            underlying operating system might not support asynchronous I/O, so when specifying true, the handle might be
            opened synchronously depending on the platform. When opened asynchronously, the BeginRead and BeginWrite methods
            perform better on large reads or writes, but they might be much slower for small reads or writes. If the
            application is designed to take advantage of asynchronous I/O, set the useAsync parameter to true. Using
            asynchronous I/O correctly can speed up applications by as much as a factor of 10, but using it without
            redesigning the application for asynchronous I/O can decrease performance by as much as a factor of 10.</param>
            <returns>
              A <see cref="T:System.IO.FileStream"/> on the specified path, having the specified mode with read, write, or read/write
              access and the specified sharing option.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Open(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.IO.FileOptions)">
            <summary>[AlphaFS] Opens a <see cref="T:System.IO.FileStream"/> on the specified path using the specified creation mode, read/write and sharing permission, and buffer size.</summary>
            <param name="path">The file to open.</param>
            <param name="mode">A constant that determines how to open or create the file.</param>
            <param name="access">A <see cref="T:System.IO.FileAccess"/> value that specifies the operations that can be performed on the
            file.</param>
            <param name="share">A constant that determines how the file will be shared by processes.</param>
            <param name="bufferSize">A positive <see cref="T:System.Int32"/> value greater than 0 indicating the buffer size. The
            default buffer size is 4096.</param>
            <param name="options">A value that specifies additional file options.</param>
            <returns>
              A <see cref="T:System.IO.FileStream"/> on the specified path, having the specified mode with read, write, or read/write
              access and the specified sharing option.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Open(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,Alphaleonis.Win32.Filesystem.ExtendedFileAttributes)">
            <summary>[AlphaFS] Opens a <see cref="T:System.IO.FileStream"/> on the specified path using the specified creation mode, read/write and sharing permission, and buffer size.</summary>
            <param name="path">The file to open.</param>
            <param name="mode">A constant that determines how to open or create the file.</param>
            <param name="access">A <see cref="T:System.IO.FileAccess"/> value that specifies the operations that can be performed on the
            file.</param>
            <param name="share">A constant that determines how the file will be shared by processes.</param>
            <param name="bufferSize">A positive <see cref="T:System.Int32"/> value greater than 0 indicating the buffer size. The
            default buffer size is 4096.</param>
            <param name="extendedAttributes">The extended attributes specifying additional options.</param>
            <returns>
              A <see cref="T:System.IO.FileStream"/> on the specified path, having the specified mode with read, write, or read/write
              access and the specified sharing option.
            </returns>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Open(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Opens a <see cref="T:System.IO.FileStream"/> on the specified path using the specified creation mode, read/write and sharing permission, and buffer size.</summary>
            <param name="path">The file to open.</param>
            <param name="mode">A constant that determines how to open or create the file.</param>
            <param name="access">A <see cref="T:System.IO.FileAccess"/> value that specifies the operations that can be performed on the
            file.</param>
            <param name="share">A constant that determines how the file will be shared by processes.</param>
            <param name="bufferSize">A positive <see cref="T:System.Int32"/> value greater than 0 indicating the buffer size. The
            default buffer size is 4096.</param>
            <param name="pathFormat">Indicates the format of the path parameter.</param>
            <returns>
              A <see cref="T:System.IO.FileStream"/> on the specified path, having the specified mode with read, write, or read/write
              access and the specified sharing option.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Open(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.Boolean,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Opens a <see cref="T:System.IO.FileStream"/> on the specified path using the specified creation mode, read/write and sharing permission, and buffer size.</summary>
            <param name="path">The file to open.</param>
            <param name="mode">A constant that determines how to open or create the file.</param>
            <param name="access">A <see cref="T:System.IO.FileAccess"/> value that specifies the operations that can be performed on the
            file.</param>
            <param name="share">A constant that determines how the file will be shared by processes.</param>
            <param name="bufferSize">A positive <see cref="T:System.Int32"/> value greater than 0 indicating the buffer size. The
            default buffer size is 4096.</param>
            <param name="useAsync">Specifies whether to use asynchronous I/O or synchronous I/O. However, note that the
            underlying operating system might not support asynchronous I/O, so when specifying true, the handle might be
            opened synchronously depending on the platform. When opened asynchronously, the BeginRead and BeginWrite methods
            perform better on large reads or writes, but they might be much slower for small reads or writes. If the
            application is designed to take advantage of asynchronous I/O, set the useAsync parameter to true. Using
            asynchronous I/O correctly can speed up applications by as much as a factor of 10, but using it without
            redesigning the application for asynchronous I/O can decrease performance by as much as a factor of 10.</param>
            <param name="pathFormat">Indicates the format of the path parameter.</param>
            <returns>
              A <see cref="T:System.IO.FileStream"/> on the specified path, having the specified mode with read, write, or read/write
              access and the specified sharing option.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Open(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.IO.FileOptions,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Opens a <see cref="T:System.IO.FileStream"/> on the specified path using the specified creation mode, read/write and sharing permission, and buffer size.</summary>
            <param name="path">The file to open.</param>
            <param name="mode">A constant that determines how to open or create the file.</param>
            <param name="access">A <see cref="T:System.IO.FileAccess"/> value that specifies the operations that can be performed on the
            file.</param>
            <param name="share">A constant that determines how the file will be shared by processes.</param>
            <param name="bufferSize">A positive <see cref="T:System.Int32"/> value greater than 0 indicating the buffer size. The
            default buffer size is 4096.</param>
            <param name="options">A value that specifies additional file options.</param>
            <param name="pathFormat">Indicates the format of the path parameter.</param>
            <returns>
              A <see cref="T:System.IO.FileStream"/> on the specified path, having the specified mode with read, write, or read/write
              access and the specified sharing option.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Open(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,Alphaleonis.Win32.Filesystem.ExtendedFileAttributes,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Opens a <see cref="T:System.IO.FileStream"/> on the specified path using the specified creation mode, read/write and sharing permission, and buffer size.</summary>
            <param name="path">The file to open.</param>
            <param name="mode">A constant that determines how to open or create the file.</param>
            <param name="access">A <see cref="T:System.IO.FileAccess"/> value that specifies the operations that can be performed on the
            file.</param>
            <param name="share">A constant that determines how the file will be shared by processes.</param>
            <param name="bufferSize">A positive <see cref="T:System.Int32"/> value greater than 0 indicating the buffer size. The
            default buffer size is 4096.</param>
            <param name="extendedAttributes">The extended attributes specifying additional options.</param>
            <param name="pathFormat">Indicates the format of the path parameter.</param>
            <returns>
              A <see cref="T:System.IO.FileStream"/> on the specified path, having the specified mode with read, write, or read/write
              access and the specified sharing option.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Open(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions)">
            <summary>[AlphaFS] Opens a <see cref="T:System.IO.FileStream"/> on the specified path using the specified creation mode, read/write and sharing permission, and buffer size.</summary>
            <param name="path">The file to open.</param>
            <param name="mode">A constant that determines how to open or create the file.</param>
            <param name="rights">A <see cref="T:System.IO.FileAccess"/> value that specifies the operations that can be performed on the
            file.</param>
            <param name="share">A constant that determines how the file will be shared by processes.</param>
            <param name="bufferSize">A positive <see cref="T:System.Int32"/> value greater than 0 indicating the buffer size. The
            default buffer size is 4096.</param>
            <param name="options">A value that specifies additional file options.</param>
            <returns>
              A <see cref="T:System.IO.FileStream"/> on the specified path, having the specified mode with read, write, or read/write
              access and the specified sharing option.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Open(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,Alphaleonis.Win32.Filesystem.ExtendedFileAttributes)">
            <summary>[AlphaFS] Opens a <see cref="T:System.IO.FileStream"/> on the specified path using the specified creation mode, read/write and sharing permission, and buffer size.</summary>
            <param name="path">The file to open.</param>
            <param name="mode">A constant that determines how to open or create the file.</param>
            <param name="rights">A <see cref="T:System.IO.FileAccess"/> value that specifies the operations that can be performed on the
            file.</param>
            <param name="share">A constant that determines how the file will be shared by processes.</param>
            <param name="bufferSize">A positive <see cref="T:System.Int32"/> value greater than 0 indicating the buffer size. The
            default buffer size is 4096.</param>
            <param name="extendedAttributes">Extended attributes specifying additional options.</param>
            <returns>
              A <see cref="T:System.IO.FileStream"/> on the specified path, having the specified mode with read, write, or read/write
              access and the specified sharing option.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Open(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions,System.Security.AccessControl.FileSecurity)">
            <summary>[AlphaFS] Opens a <see cref="T:System.IO.FileStream"/> on the specified path using the specified creation mode, read/write and sharing permission, and buffer size.</summary>
            <param name="path">The file to open.</param>
            <param name="mode">A constant that determines how to open or create the file.</param>
            <param name="rights">A <see cref="T:System.IO.FileAccess"/> value that specifies the operations that can be performed on the
            file.</param>
            <param name="share">A constant that determines how the file will be shared by processes.</param>
            <param name="bufferSize">A positive <see cref="T:System.Int32"/> value greater than 0 indicating the buffer size. The
            default buffer size is 4096.</param>
            <param name="options">A value that specifies additional file options.</param>
            <param name="security">A value that determines the access control and audit security for the file.</param>
            <returns>
              A <see cref="T:System.IO.FileStream"/> on the specified path, having the specified mode with read, write, or read/write
              access and the specified sharing option.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Open(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,Alphaleonis.Win32.Filesystem.ExtendedFileAttributes,System.Security.AccessControl.FileSecurity)">
            <summary>[AlphaFS] Opens a <see cref="T:System.IO.FileStream"/> on the specified path using the specified creation mode, read/write and sharing permission, and buffer size.</summary>
            <param name="path">The file to open.</param>
            <param name="mode">A constant that determines how to open or create the file.</param>
            <param name="rights">A <see cref="T:System.IO.FileAccess"/> value that specifies the operations that can be performed on the
            file.</param>
            <param name="share">A constant that determines how the file will be shared by processes.</param>
            <param name="bufferSize">A positive <see cref="T:System.Int32"/> value greater than 0 indicating the buffer size. The
            default buffer size is 4096.</param>
            <param name="extendedAttributes">Extended attributes specifying additional options.</param>
            <param name="security">A value that determines the access control and audit security for the file.</param>
            <returns>
              A <see cref="T:System.IO.FileStream"/> on the specified path, having the specified mode with read, write, or read/write
              access and the specified sharing option.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Open(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Opens a <see cref="T:System.IO.FileStream"/> on the specified path using the specified creation mode, read/write and sharing permission, and buffer size.</summary>
            <param name="path">The file to open.</param>
            <param name="mode">A constant that determines how to open or create the file.</param>
            <param name="rights">A <see cref="T:System.IO.FileAccess"/> value that specifies the operations that can be performed on the
            file.</param>
            <param name="share">A constant that determines how the file will be shared by processes.</param>
            <param name="bufferSize">A positive <see cref="T:System.Int32"/> value greater than 0 indicating the buffer size. The
            default buffer size is 4096.</param>
            <param name="options">A value that specifies additional file options.</param>
            <param name="pathFormat">Indicates the format of the path parameter.</param>
            <returns>
              A <see cref="T:System.IO.FileStream"/> on the specified path, having the specified mode with read, write, or read/write
              access and the specified sharing option.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Open(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,Alphaleonis.Win32.Filesystem.ExtendedFileAttributes,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Opens a <see cref="T:System.IO.FileStream"/> on the specified path using the specified creation mode, read/write and sharing permission, and buffer size.</summary>
            <param name="path">The file to open.</param>
            <param name="mode">A constant that determines how to open or create the file.</param>
            <param name="rights">A <see cref="T:System.IO.FileAccess"/> value that specifies the operations that can be performed on the
            file.</param>
            <param name="share">A constant that determines how the file will be shared by processes.</param>
            <param name="bufferSize">A positive <see cref="T:System.Int32"/> value greater than 0 indicating the buffer size. The
            default buffer size is 4096.</param>
            <param name="extendedAttributes">Extended attributes specifying additional options.</param>
            <param name="pathFormat">Indicates the format of the path parameter.</param>
            <returns>
              A <see cref="T:System.IO.FileStream"/> on the specified path, having the specified mode with read, write, or read/write
              access and the specified sharing option.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Open(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions,System.Security.AccessControl.FileSecurity,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Opens a <see cref="T:System.IO.FileStream"/> on the specified path using the specified  creation mode, access rights and sharing permission, the buffer size, additional file options, access control and audit security.</summary>
            <param name="path">The file to open.</param>
            <param name="mode">A constant that determines how to open or create the file.</param>
            <param name="rights">A <see cref="T:System.IO.FileAccess"/> value that specifies the operations that can be performed on the
            file.</param>
            <param name="share">A constant that determines how the file will be shared by processes.</param>
            <param name="bufferSize">A positive <see cref="T:System.Int32"/> value greater than 0 indicating the buffer size. The
            default buffer size is 4096.</param>
            <param name="options">A value that specifies additional file options.</param>
            <param name="security">A value that determines the access control and audit security for the file.</param>
            <param name="pathFormat">Indicates the format of the path parameter.</param>
            <returns>
              A <see cref="T:System.IO.FileStream"/> on the specified path, having the specified mode with read, write, or read/write
              access and the specified sharing option.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Open(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,Alphaleonis.Win32.Filesystem.ExtendedFileAttributes,System.Security.AccessControl.FileSecurity,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Opens a <see cref="T:System.IO.FileStream"/> on the specified path using the specified  creation mode, access rights and sharing permission, the buffer size, additional file options, access control and audit security.</summary>
            <param name="path">The file to open.</param>
            <param name="mode">A constant that determines how to open or create the file.</param>
            <param name="rights">A <see cref="T:System.IO.FileAccess"/> value that specifies the operations that can be performed on the
            file.</param>
            <param name="share">A constant that determines how the file will be shared by processes.</param>
            <param name="bufferSize">A positive <see cref="T:System.Int32"/> value greater than 0 indicating the buffer size. The
            default buffer size is 4096.</param>
            <param name="extendedAttributes">Extended attributes specifying additional options.</param>
            <param name="security">A value that determines the access control and audit security for the file.</param>
            <param name="pathFormat">Indicates the format of the path parameter.</param>
            <returns>
              A <see cref="T:System.IO.FileStream"/> on the specified path, having the specified mode with read, write, or read/write
              access and the specified sharing option.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.OpenTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.IO.FileMode)">
            <summary>[AlphaFS] (Transacted) Opens a <see cref="T:System.IO.FileStream"/> on the specified path with read/write access.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to open.</param>
            <param name="mode">
              A <see cref="T:System.IO.FileMode"/> value that specifies whether a file is created if one does not exist, and determines whether the contents
              of existing files are retained or overwritten.
            </param>
            <returns>A <see cref="T:System.IO.FileStream"/> opened in the specified mode and path, with read/write access and not shared.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.OpenTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.IO.FileMode,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] (Transacted) Opens a <see cref="T:System.IO.FileStream"/> on the specified path with read/write access.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to open.</param>
            <param name="mode">
              A <see cref="T:System.IO.FileMode"/> value that specifies whether a file is created if one does not exist, and determines whether the contents
              of existing files are retained or overwritten.
            </param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
            <returns>A <see cref="T:System.IO.FileStream"/> opened in the specified mode and path, with read/write access and not shared.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.OpenTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.IO.FileMode,System.IO.FileAccess)">
            <summary>[AlphaFS] (Transacted) Opens a <see cref="T:System.IO.FileStream"/> on the specified path, with the specified mode and access.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to open.</param>
            <param name="mode">
              A <see cref="T:System.IO.FileMode"/> value that specifies whether a file is created if one does not exist, and determines whether the contents
              of existing files are retained or overwritten.
            </param>
            <param name="access">A <see cref="T:System.IO.FileAccess"/> value that specifies the operations that can be performed on the file.</param>
            <returns>
              An unshared <see cref="T:System.IO.FileStream"/> that provides access to the specified file, with the specified mode and access.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.OpenTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <summary>[AlphaFS] (Transacted) Opens a <see cref="T:System.IO.FileStream"/> on the specified path, having the specified mode with read, write, or read/write access and the specified sharing option.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to open.</param>
            <param name="mode">
              A <see cref="T:System.IO.FileMode"/> value that specifies whether a file is created if one does not exist, and determines whether the contents
              of existing files are retained or overwritten.
            </param>
            <param name="access">A <see cref="T:System.IO.FileAccess"/> value that specifies the operations that can be performed on the file.</param>
            <param name="share">A <see cref="T:System.IO.FileShare"/> value specifying the type of access other threads have to the file.</param>
            <returns>
              A <see cref="T:System.IO.FileStream"/> on the specified path, having the specified mode with read, write, or read/write access and the
              specified sharing option.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.OpenTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.IO.FileMode,System.IO.FileAccess,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] (Transacted) Opens a <see cref="T:System.IO.FileStream"/> on the specified path, with the specified mode and access.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to open.</param>
            <param name="mode">
              A <see cref="T:System.IO.FileMode"/> value that specifies whether a file is created if one does not exist, and determines whether the contents
              of existing files are retained or overwritten.
            </param>
            <param name="access">A <see cref="T:System.IO.FileAccess"/> value that specifies the operations that can be performed on the file.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
            <returns>
              An unshared <see cref="T:System.IO.FileStream"/> that provides access to the specified file, with the specified mode and access.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.OpenTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] (Transacted) Opens a <see cref="T:System.IO.FileStream"/> on the specified path, having the specified mode with read, write, or read/write access and the specified sharing option.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to open.</param>
            <param name="mode">A <see cref="T:System.IO.FileMode"/> value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten.</param>
            <param name="access">A <see cref="T:System.IO.FileAccess"/> value that specifies the operations that can be performed on the file.</param>
            <param name="share">A <see cref="T:System.IO.FileShare"/> value specifying the type of access other threads have to the file.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
            <returns>A <see cref="T:System.IO.FileStream"/> on the specified path, having the specified mode with read, write, or read/write access and the specified sharing option.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.OpenTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,Alphaleonis.Win32.Filesystem.ExtendedFileAttributes,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] (Transacted) Opens a <see cref="T:System.IO.FileStream"/> on the specified path, having the specified mode with read, write, or read/write access and the specified sharing option.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to open.</param>
            <param name="mode">
              A <see cref="T:System.IO.FileMode"/> value that specifies whether a file is created if one does not exist, and determines whether the contents
              of existing files are retained or overwritten.
            </param>
            <param name="access">A <see cref="T:System.IO.FileAccess"/> value that specifies the operations that can be performed on the file.</param>
            <param name="share">A <see cref="T:System.IO.FileShare"/> value specifying the type of access other threads have to the file.</param>
            <param name="extendedAttributes">The extended attributes.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
            <returns>
              A <see cref="T:System.IO.FileStream"/> on the specified path, having the specified mode with read, write, or read/write access and the
              specified sharing option.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.OpenTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32)">
            <summary>[AlphaFS] (Transacted) Opens a <see cref="T:System.IO.FileStream"/> on the specified path using the specified creation mode, read/write and sharing permission, and buffer size.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to open.</param>
            <param name="mode">A constant that determines how to open or create the file.</param>
            <param name="access">A <see cref="T:System.IO.FileAccess"/> value that specifies the operations that can be performed on the
            file.</param>
            <param name="share">A constant that determines how the file will be shared by processes.</param>
            <param name="bufferSize">A positive <see cref="T:System.Int32"/> value greater than 0 indicating the buffer size. The
            default buffer size is 4096.</param>
            <returns>
              A <see cref="T:System.IO.FileStream"/> on the specified path, having the specified mode with read, write, or read/write
              access and the specified sharing option.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.OpenTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.Boolean)">
            <summary>[AlphaFS] (Transacted) Opens a <see cref="T:System.IO.FileStream"/> on the specified path using the specified creation mode, read/write and sharing permission, and buffer size.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to open.</param>
            <param name="mode">A constant that determines how to open or create the file.</param>
            <param name="access">A <see cref="T:System.IO.FileAccess"/> value that specifies the operations that can be performed on the
            file.</param>
            <param name="share">A constant that determines how the file will be shared by processes.</param>
            <param name="bufferSize">A positive <see cref="T:System.Int32"/> value greater than 0 indicating the buffer size. The
            default buffer size is 4096.</param>
            <param name="useAsync">Specifies whether to use asynchronous I/O or synchronous I/O. However, note that the
            underlying operating system might not support asynchronous I/O, so when specifying true, the handle might be
            opened synchronously depending on the platform. When opened asynchronously, the BeginRead and BeginWrite methods
            perform better on large reads or writes, but they might be much slower for small reads or writes. If the
            application is designed to take advantage of asynchronous I/O, set the useAsync parameter to true. Using
            asynchronous I/O correctly can speed up applications by as much as a factor of 10, but using it without
            redesigning the application for asynchronous I/O can decrease performance by as much as a factor of 10.</param>
            <returns>
              A <see cref="T:System.IO.FileStream"/> on the specified path, having the specified mode with read, write, or read/write
              access and the specified sharing option.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.OpenTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.IO.FileOptions)">
            <summary>[AlphaFS] (Transacted) Opens a <see cref="T:System.IO.FileStream"/> on the specified path using the specified creation mode, read/write and sharing permission, and buffer size.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to open.</param>
            <param name="mode">A constant that determines how to open or create the file.</param>
            <param name="access">A <see cref="T:System.IO.FileAccess"/> value that specifies the operations that can be performed on the
            file.</param>
            <param name="share">A constant that determines how the file will be shared by processes.</param>
            <param name="bufferSize">A positive <see cref="T:System.Int32"/> value greater than 0 indicating the buffer size. The
            default buffer size is 4096.</param>
            <param name="options">A value that specifies additional file options.</param>
            <returns>
              A <see cref="T:System.IO.FileStream"/> on the specified path, having the specified mode with read, write, or read/write
              access and the specified sharing option.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.OpenTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,Alphaleonis.Win32.Filesystem.ExtendedFileAttributes)">
            <summary>[AlphaFS] (Transacted) Opens a <see cref="T:System.IO.FileStream"/> on the specified path using the specified creation mode, read/write and sharing permission, and buffer size.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to open.</param>
            <param name="mode">A constant that determines how to open or create the file.</param>
            <param name="access">A <see cref="T:System.IO.FileAccess"/> value that specifies the operations that can be performed on the
            file.</param>
            <param name="share">A constant that determines how the file will be shared by processes.</param>
            <param name="bufferSize">A positive <see cref="T:System.Int32"/> value greater than 0 indicating the buffer size. The
            default buffer size is 4096.</param>
            <param name="extendedAttributes">The extended attributes specifying additional options.</param>
            <returns>
              A <see cref="T:System.IO.FileStream"/> on the specified path, having the specified mode with read, write, or read/write
              access and the specified sharing option.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.OpenTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] (Transacted) Opens a <see cref="T:System.IO.FileStream"/> on the specified path using the specified creation mode, read/write and sharing permission, and buffer size.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to open.</param>
            <param name="mode">A constant that determines how to open or create the file.</param>
            <param name="access">A <see cref="T:System.IO.FileAccess"/> value that specifies the operations that can be performed on the
            file.</param>
            <param name="share">A constant that determines how the file will be shared by processes.</param>
            <param name="bufferSize">A positive <see cref="T:System.Int32"/> value greater than 0 indicating the buffer size. The
            default buffer size is 4096.</param>
            <param name="pathFormat">Indicates the format of the path parameter.</param>
            <returns>
              A <see cref="T:System.IO.FileStream"/> on the specified path, having the specified mode with read, write, or read/write
              access and the specified sharing option.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.OpenTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.Boolean,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] (Transacted) Opens a <see cref="T:System.IO.FileStream"/> on the specified path using the specified creation mode, read/write and sharing permission, and buffer size.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to open.</param>
            <param name="mode">A constant that determines how to open or create the file.</param>
            <param name="access">A <see cref="T:System.IO.FileAccess"/> value that specifies the operations that can be performed on the
            file.</param>
            <param name="share">A constant that determines how the file will be shared by processes.</param>
            <param name="bufferSize">A positive <see cref="T:System.Int32"/> value greater than 0 indicating the buffer size. The
            default buffer size is 4096.</param>
            <param name="useAsync">Specifies whether to use asynchronous I/O or synchronous I/O. However, note that the
            underlying operating system might not support asynchronous I/O, so when specifying true, the handle might be
            opened synchronously depending on the platform. When opened asynchronously, the BeginRead and BeginWrite methods
            perform better on large reads or writes, but they might be much slower for small reads or writes. If the
            application is designed to take advantage of asynchronous I/O, set the useAsync parameter to true. Using
            asynchronous I/O correctly can speed up applications by as much as a factor of 10, but using it without
            redesigning the application for asynchronous I/O can decrease performance by as much as a factor of 10.</param>
            <param name="pathFormat">Indicates the format of the path parameter.</param>
            <returns>
              A <see cref="T:System.IO.FileStream"/> on the specified path, having the specified mode with read, write, or read/write
              access and the specified sharing option.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.OpenTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.IO.FileOptions,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] (Transacted) Opens a <see cref="T:System.IO.FileStream"/> on the specified path using the specified creation mode, read/write and sharing permission, and buffer size.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to open.</param>
            <param name="mode">A constant that determines how to open or create the file.</param>
            <param name="access">A <see cref="T:System.IO.FileAccess"/> value that specifies the operations that can be performed on the
            file.</param>
            <param name="share">A constant that determines how the file will be shared by processes.</param>
            <param name="bufferSize">A positive <see cref="T:System.Int32"/> value greater than 0 indicating the buffer size. The
            default buffer size is 4096.</param>
            <param name="options">A value that specifies additional file options.</param>
            <param name="pathFormat">Indicates the format of the path parameter.</param>
            <returns>
              A <see cref="T:System.IO.FileStream"/> on the specified path, having the specified mode with read, write, or read/write
              access and the specified sharing option.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.OpenTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,Alphaleonis.Win32.Filesystem.ExtendedFileAttributes,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] (Transacted) Opens a <see cref="T:System.IO.FileStream"/> on the specified path using the specified creation mode, read/write and sharing permission, and buffer size.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to open.</param>
            <param name="mode">A constant that determines how to open or create the file.</param>
            <param name="access">A <see cref="T:System.IO.FileAccess"/> value that specifies the operations that can be performed on the
            file.</param>
            <param name="share">A constant that determines how the file will be shared by processes.</param>
            <param name="bufferSize">A positive <see cref="T:System.Int32"/> value greater than 0 indicating the buffer size. The
            default buffer size is 4096.</param>
            <param name="extendedAttributes">The extended attributes specifying additional options.</param>
            <param name="pathFormat">Indicates the format of the path parameter.</param>
            <returns>
              A <see cref="T:System.IO.FileStream"/> on the specified path, having the specified mode with read, write, or read/write
              access and the specified sharing option.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.OpenTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions)">
            <summary>[AlphaFS] (Transacted) Opens a <see cref="T:System.IO.FileStream"/> on the specified path using the specified creation mode, read/write and sharing permission, and buffer size.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to open.</param>
            <param name="mode">A constant that determines how to open or create the file.</param>
            <param name="rights">A <see cref="T:System.IO.FileAccess"/> value that specifies the operations that can be performed on the
            file.</param>
            <param name="share">A constant that determines how the file will be shared by processes.</param>
            <param name="bufferSize">A positive <see cref="T:System.Int32"/> value greater than 0 indicating the buffer size. The
            default buffer size is 4096.</param>
            <param name="options">A value that specifies additional file options.</param>
            <returns>
              A <see cref="T:System.IO.FileStream"/> on the specified path, having the specified mode with read, write, or read/write
              access and the specified sharing option.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.OpenTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,Alphaleonis.Win32.Filesystem.ExtendedFileAttributes)">
            <summary>[AlphaFS] (Transacted) Opens a <see cref="T:System.IO.FileStream"/> on the specified path using the specified creation mode, read/write and sharing permission, and buffer size.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to open.</param>
            <param name="mode">A constant that determines how to open or create the file.</param>
            <param name="rights">A <see cref="T:System.IO.FileAccess"/> value that specifies the operations that can be performed on the
            file.</param>
            <param name="share">A constant that determines how the file will be shared by processes.</param>
            <param name="bufferSize">A positive <see cref="T:System.Int32"/> value greater than 0 indicating the buffer size. The
            default buffer size is 4096.</param>
            <param name="extendedAttributes">Extended attributes specifying additional options.</param>
            <returns>
              A <see cref="T:System.IO.FileStream"/> on the specified path, having the specified mode with read, write, or read/write
              access and the specified sharing option.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.OpenTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions,System.Security.AccessControl.FileSecurity)">
            <summary>[AlphaFS] (Transacted) Opens a <see cref="T:System.IO.FileStream"/> on the specified path using the specified creation mode, read/write and sharing permission, and buffer size.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to open.</param>
            <param name="mode">A constant that determines how to open or create the file.</param>
            <param name="rights">A <see cref="T:System.IO.FileAccess"/> value that specifies the operations that can be performed on the
            file.</param>
            <param name="share">A constant that determines how the file will be shared by processes.</param>
            <param name="bufferSize">A positive <see cref="T:System.Int32"/> value greater than 0 indicating the buffer size. The
            default buffer size is 4096.</param>
            <param name="options">A value that specifies additional file options.</param>
            <param name="security">A value that determines the access control and audit security for the file.</param>
            <returns>
              A <see cref="T:System.IO.FileStream"/> on the specified path, having the specified mode with read, write, or read/write
              access and the specified sharing option.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.OpenTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,Alphaleonis.Win32.Filesystem.ExtendedFileAttributes,System.Security.AccessControl.FileSecurity)">
            <summary>[AlphaFS] (Transacted) Opens a <see cref="T:System.IO.FileStream"/> on the specified path using the specified creation mode, read/write and sharing permission, and buffer size.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to open.</param>
            <param name="mode">A constant that determines how to open or create the file.</param>
            <param name="rights">A <see cref="T:System.IO.FileAccess"/> value that specifies the operations that can be performed on the
            file.</param>
            <param name="share">A constant that determines how the file will be shared by processes.</param>
            <param name="bufferSize">A positive <see cref="T:System.Int32"/> value greater than 0 indicating the buffer size. The
            default buffer size is 4096.</param>
            <param name="extendedAttributes">Extended attributes specifying additional options.</param>
            <param name="security">A value that determines the access control and audit security for the file.</param>
            <returns>
              A <see cref="T:System.IO.FileStream"/> on the specified path, having the specified mode with read, write, or read/write
              access and the specified sharing option.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.OpenTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] (Transacted) Opens a <see cref="T:System.IO.FileStream"/> on the specified path using the specified creation mode, read/write and sharing permission, and buffer size.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to open.</param>
            <param name="mode">A constant that determines how to open or create the file.</param>
            <param name="rights">A <see cref="T:System.IO.FileAccess"/> value that specifies the operations that can be performed on the
            file.</param>
            <param name="share">A constant that determines how the file will be shared by processes.</param>
            <param name="bufferSize">A positive <see cref="T:System.Int32"/> value greater than 0 indicating the buffer size. The
            default buffer size is 4096.</param>
            <param name="options">A value that specifies additional file options.</param>
            <param name="pathFormat">Indicates the format of the path parameter.</param>
            <returns>
              A <see cref="T:System.IO.FileStream"/> on the specified path, having the specified mode with read, write, or read/write
              access and the specified sharing option.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.OpenTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,Alphaleonis.Win32.Filesystem.ExtendedFileAttributes,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] (Transacted) Opens a <see cref="T:System.IO.FileStream"/> on the specified path using the specified creation mode, read/write and sharing permission, and buffer size.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to open.</param>
            <param name="mode">A constant that determines how to open or create the file.</param>
            <param name="rights">A <see cref="T:System.IO.FileAccess"/> value that specifies the operations that can be performed on the
            file.</param>
            <param name="share">A constant that determines how the file will be shared by processes.</param>
            <param name="bufferSize">A positive <see cref="T:System.Int32"/> value greater than 0 indicating the buffer size. The
            default buffer size is 4096.</param>
            <param name="extendedAttributes">Extended attributes specifying additional options.</param>
            <param name="pathFormat">Indicates the format of the path parameter.</param>
            <returns>
              A <see cref="T:System.IO.FileStream"/> on the specified path, having the specified mode with read, write, or read/write
              access and the specified sharing option.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.OpenTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions,System.Security.AccessControl.FileSecurity,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] (Transacted) Opens a <see cref="T:System.IO.FileStream"/> on the specified path using the specified  creation mode, access rights and sharing permission, the buffer size, additional file options, access control and audit security.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to open.</param>
            <param name="mode">A constant that determines how to open or create the file.</param>
            <param name="rights">A <see cref="T:System.IO.FileAccess"/> value that specifies the operations that can be performed on the
            file.</param>
            <param name="share">A constant that determines how the file will be shared by processes.</param>
            <param name="bufferSize">A positive <see cref="T:System.Int32"/> value greater than 0 indicating the buffer size. The
            default buffer size is 4096.</param>
            <param name="options">A value that specifies additional file options.</param>
            <param name="security">A value that determines the access control and audit security for the file.</param>
            <param name="pathFormat">Indicates the format of the path parameter.</param>
            <returns>
              A <see cref="T:System.IO.FileStream"/> on the specified path, having the specified mode with read, write, or read/write
              access and the specified sharing option.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.OpenTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,Alphaleonis.Win32.Filesystem.ExtendedFileAttributes,System.Security.AccessControl.FileSecurity,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] (Transacted) Opens a <see cref="T:System.IO.FileStream"/> on the specified path using the specified  creation mode, access rights and sharing permission, the buffer size, additional file options, access control and audit security.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to open.</param>
            <param name="mode">A constant that determines how to open or create the file.</param>
            <param name="rights">A <see cref="T:System.IO.FileAccess"/> value that specifies the operations that can be performed on the
            file.</param>
            <param name="share">A constant that determines how the file will be shared by processes.</param>
            <param name="bufferSize">A positive <see cref="T:System.Int32"/> value greater than 0 indicating the buffer size. The
            default buffer size is 4096.</param>
            <param name="extendedAttributes">Extended attributes specifying additional options.</param>
            <param name="security">A value that determines the access control and audit security for the file.</param>
            <param name="pathFormat">Indicates the format of the path parameter.</param>
            <returns>
              A <see cref="T:System.IO.FileStream"/> on the specified path, having the specified mode with read, write, or read/write
              access and the specified sharing option.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.OpenCore(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,Alphaleonis.Win32.Filesystem.ExtendedFileAttributes,System.Nullable{System.Int32},System.Security.AccessControl.FileSecurity,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Opens a <see cref="T:System.IO.FileStream"/> on the specified path, having the specified mode with read, write, or read/write access, the specified sharing option and additional options specified.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to open.</param>
            <param name="mode">A <see cref="T:System.IO.FileMode"/> value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten.</param>
            <param name="access">A <see cref="T:System.IO.FileAccess"/> value that specifies the operations that can be performed on the file.</param>
            <param name="share">A <see cref="T:System.IO.FileShare"/> value specifying the type of access other threads have to the file.</param>
            <param name="attributes">Advanced <see cref="T:Alphaleonis.Win32.Filesystem.ExtendedFileAttributes"/> options for this file.</param>
            <param name="bufferSize">A positive <see cref="T:System.Int32"/> value greater than 0 indicating the buffer size. The default buffer size is 4096.</param>
            <param name="security">The security.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
            <returns>
              <para>A <see cref="T:System.IO.FileStream"/> instance on the specified path, having the specified mode with</para>
              <para>read, write, or read/write access and the specified sharing option.</para>
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.OpenCore(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,Alphaleonis.Win32.Filesystem.ExtendedFileAttributes,System.Nullable{System.Int32},System.Security.AccessControl.FileSecurity,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>Opens a <see cref="T:System.IO.FileStream"/> on the specified path, having the specified mode with read, write, or read/write access, the specified sharing option and additional options specified.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to open.</param>
            <param name="mode">A <see cref="T:System.IO.FileMode"/> value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten.</param>
            <param name="rights">A <see cref="T:System.Security.AccessControl.FileSystemRights"/> value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten along with additional options.</param>
            <param name="share">A <see cref="T:System.IO.FileShare"/> value specifying the type of access other threads have to the file.</param>
            <param name="attributes">Advanced <see cref="T:Alphaleonis.Win32.Filesystem.ExtendedFileAttributes"/> options for this file.</param>
            <param name="bufferSize">A positive <see cref="T:System.Int32"/> value greater than 0 indicating the buffer size. The default buffer size is 4096.</param>
            <param name="security">The security.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
            <returns>
              <para>A <see cref="T:System.IO.FileStream"/> instance on the specified path, having the specified mode with</para>
              <para>read, write, or read/write access and the specified sharing option.</para>
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.ReadAllBytes(System.String)">
            <summary>Opens a binary file, reads the contents of the file into a byte array, and then closes the file.</summary>
            <param name="path">The file to open for reading.</param>
            <returns>A byte array containing the contents of the file.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.ReadAllBytes(System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Opens a binary file, reads the contents of the file into a byte array, and then closes the file.</summary>
            <param name="path">The file to open for reading.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
            <returns>A byte array containing the contents of the file.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.ReadAllBytesTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>[AlphaFS] Opens a binary file, reads the contents of the file into a byte array, and then closes the file.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to open for reading.</param>
            <returns>A byte array containing the contents of the file.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.ReadAllBytesTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Opens a binary file, reads the contents of the file into a byte array, and then closes the file.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to open for reading.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
            <returns>A byte array containing the contents of the file.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.ReadAllBytesCore(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>Opens a binary file, reads the contents of the file into a byte array, and then closes the file.</summary>
            <exception cref="T:System.IO.IOException"/>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to open for reading.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
            <returns>A byte array containing the contents of the file.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.ReadAllLines(System.String)">
            <summary>Opens a text file, reads all lines of the file, and then closes the file.</summary>
            <param name="path">The file to open for reading.</param>
            <returns>All lines of the file.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.ReadAllLines(System.String,System.Text.Encoding)">
            <summary>Opens a file, reads all lines of the file with the specified encoding, and then closes the file.</summary>
            <param name="path">The file to open for reading.</param>
            <param name="encoding">The <see cref="T:System.Text.Encoding"/> applied to the contents of the file.</param>
            <returns>All lines of the file.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.ReadAllLines(System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Opens a text file, reads all lines of the file, and then closes the file.</summary>
            <param name="path">The file to open for reading.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
            <returns>All lines of the file.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.ReadAllLines(System.String,System.Text.Encoding,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Opens a file, reads all lines of the file with the specified encoding, and then closes the file.</summary>
            <param name="path">The file to open for reading.</param>
            <param name="encoding">The <see cref="T:System.Text.Encoding"/> applied to the contents of the file.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
            <returns>All lines of the file.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.ReadAllLinesTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>[AlphaFS] Opens a text file, reads all lines of the file, and then closes the file.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to open for reading.</param>
            <returns>All lines of the file.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.ReadAllLinesTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Text.Encoding)">
            <summary>[AlphaFS] Opens a file, reads all lines of the file with the specified encoding, and then closes the file.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to open for reading.</param>
            <param name="encoding">The <see cref="T:System.Text.Encoding"/> applied to the contents of the file.</param>
            <returns>All lines of the file.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.ReadAllLinesTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Opens a text file, reads all lines of the file, and then closes the file.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to open for reading.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
            <returns>All lines of the file.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.ReadAllLinesTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Text.Encoding,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Opens a file, reads all lines of the file with the specified encoding, and then closes the file.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to open for reading.</param>
            <param name="encoding">The <see cref="T:System.Text.Encoding"/> applied to the contents of the file.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
            <returns>All lines of the file.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.ReadAllLinesCore(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Text.Encoding,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>Opens a file, read all lines of the file with the specified encoding, and then close the file.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to open for reading.</param>
            <param name="encoding">The <see cref="T:System.Text.Encoding"/> applied to the contents of the file.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
            <returns>An IEnumerable string containing all lines of the file.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.ReadAllText(System.String)">
            <summary>Opens a text file, reads all lines of the file, and then closes the file.</summary>
            <param name="path">The file to open for reading.</param>
            <returns>All lines of the file.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.ReadAllText(System.String,System.Text.Encoding)">
            <summary>Opens a file, reads all lines of the file with the specified encoding, and then closes the file.</summary>
            <param name="path">The file to open for reading.</param>
            <param name="encoding">The <see cref="T:System.Text.Encoding"/> applied to the contents of the file.</param>
            <returns>All lines of the file.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.ReadAllText(System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Opens a text file, reads all lines of the file, and then closes the file.</summary>
            <param name="path">The file to open for reading.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
            <returns>All lines of the file.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.ReadAllText(System.String,System.Text.Encoding,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Opens a file, reads all lines of the file with the specified encoding, and then closes the file.</summary>
            <param name="path">The file to open for reading.</param>
            <param name="encoding">The <see cref="T:System.Text.Encoding"/> applied to the contents of the file.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
            <returns>All lines of the file.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.ReadAllTextTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>[AlphaFS] Opens a text file, reads all lines of the file, and then closes the file.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to open for reading.</param>
            <returns>All lines of the file.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.ReadAllTextTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Text.Encoding)">
            <summary>[AlphaFS] Opens a file, reads all lines of the file with the specified encoding, and then closes the file.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to open for reading.</param>
            <param name="encoding">The <see cref="T:System.Text.Encoding"/> applied to the contents of the file.</param>
            <returns>All lines of the file.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.ReadAllTextTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Opens a text file, reads all lines of the file, and then closes the file.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to open for reading.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
            <returns>All lines of the file.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.ReadAllTextTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Text.Encoding,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Opens a file, reads all lines of the file with the specified encoding, and then closes the file.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to open for reading.</param>
            <param name="encoding">The <see cref="T:System.Text.Encoding"/> applied to the contents of the file.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
            <returns>All lines of the file.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.ReadAllTextCore(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Text.Encoding,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>Open a file, read all lines of the file with the specified encoding, and then close the file.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to open for reading.</param>
            <param name="encoding">The <see cref="T:System.Text.Encoding"/> applied to the contents of the file.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
            <returns>All lines of the file.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.ReadLines(System.String)">
            <summary>Reads the lines of a file.</summary>
            <param name="path">The file to read.</param>
            <returns>All the lines of the file, or the lines that are the result of a query.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.ReadLines(System.String,System.Text.Encoding)">
            <summary>Read the lines of a file that has a specified encoding.</summary>
            <param name="path">The file to read.</param>
            <param name="encoding">The encoding that is applied to the contents of the file.</param>
            <returns>All the lines of the file, or the lines that are the result of a query.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.ReadLines(System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Reads the lines of a file.</summary>
            <param name="path">The file to read.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
            <returns>All the lines of the file, or the lines that are the result of a query.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.ReadLines(System.String,System.Text.Encoding,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Read the lines of a file that has a specified encoding.</summary>
            <param name="path">The file to read.</param>
            <param name="encoding">The encoding that is applied to the contents of the file.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
            <returns>All the lines of the file, or the lines that are the result of a query.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.ReadLinesTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>[AlphaFS] Reads the lines of a file.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to read.</param>
            <returns>All the lines of the file, or the lines that are the result of a query.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.ReadLinesTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Text.Encoding)">
            <summary>[AlphaFS] Read the lines of a file that has a specified encoding.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to read.</param>
            <param name="encoding">The encoding that is applied to the contents of the file.</param>
            <returns>All the lines of the file, or the lines that are the result of a query.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.ReadLinesTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Reads the lines of a file.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to read.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
            <returns>All the lines of the file, or the lines that are the result of a query.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.ReadLinesTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Text.Encoding,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Read the lines of a file that has a specified encoding.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to read.</param>
            <param name="encoding">The encoding that is applied to the contents of the file.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
            <returns>All the lines of the file, or the lines that are the result of a query.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.ReadLinesCore(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Text.Encoding,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>Reads the lines of a file that has a specified encoding.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to read.</param>
            <param name="encoding">The encoding that is applied to the contents of the file.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
            <returns>All the lines of the file, or the lines that are the result of a query.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Replace(System.String,System.String,System.String)">
            <summary>
              Replaces the contents of a specified file with the contents of another file, deleting the original file, and creating a backup of
              the replaced file.
            </summary>
            <remarks>
              The Replace method replaces the contents of a specified file with the contents of another file. It also creates a backup of the
              file that was replaced.
            </remarks>
            <remarks>
              If the <paramref name="sourceFileName"/> and <paramref name="destinationFileName"/> are on different volumes, this method will
              raise an exception. If the <paramref name="destinationBackupFileName"/> is on a different volume from the source file, the backup
              file will be deleted.
            </remarks>
            <remarks>
              Pass null to the <paramref name="destinationBackupFileName"/> parameter if you do not want to create a backup of the file being
              replaced.
            </remarks>
            <param name="sourceFileName">The name of a file that replaces the file specified by <paramref name="destinationFileName"/>.</param>
            <param name="destinationFileName">The name of the file being replaced.</param>
            <param name="destinationBackupFileName">The name of the backup file.</param>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Replace(System.String,System.String,System.String,System.Boolean)">
            <summary>
              Replaces the contents of a specified file with the contents of another file, deleting the original file, and creating a backup of
              the replaced file and optionally ignores merge errors.
            </summary>
            <remarks>
              The Replace method replaces the contents of a specified file with the contents of another file. It also creates a backup of the
              file that was replaced.
            </remarks>
            <remarks>
              If the <paramref name="sourceFileName"/> and <paramref name="destinationFileName"/> are on different volumes, this method will
              raise an exception. If the <paramref name="destinationBackupFileName"/> is on a different volume from the source file, the backup
              file will be deleted.
            </remarks>
            <remarks>
              Pass null to the <paramref name="destinationBackupFileName"/> parameter if you do not want to create a backup of the file being
              replaced.
            </remarks>
            <param name="sourceFileName">The name of a file that replaces the file specified by <paramref name="destinationFileName"/>.</param>
            <param name="destinationFileName">The name of the file being replaced.</param>
            <param name="destinationBackupFileName">The name of the backup file.</param>
            <param name="ignoreMetadataErrors">
              <see langword="true"/> to ignore merge errors (such as attributes and access control lists (ACLs)) from the replaced file to the
              replacement file; otherwise, <see langword="false"/>.
            </param>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.Replace(System.String,System.String,System.String,System.Boolean,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>
              [AlphaFS] Replaces the contents of a specified file with the contents of another file, deleting the original file, and creating a
              backup of the replaced file and optionally ignores merge errors.
            </summary>
            <remarks>
              The Replace method replaces the contents of a specified file with the contents of another file. It also creates a backup of the
              file that was replaced.
            </remarks>
            <remarks>
              If the <paramref name="sourceFileName"/> and <paramref name="destinationFileName"/> are on different volumes, this method will
              raise an exception. If the <paramref name="destinationBackupFileName"/> is on a different volume from the source file, the backup
              file will be deleted.
            </remarks>
            <remarks>
              Pass null to the <paramref name="destinationBackupFileName"/> parameter if you do not want to create a backup of the file being
              replaced.
            </remarks>
            <param name="sourceFileName">The name of a file that replaces the file specified by <paramref name="destinationFileName"/>.</param>
            <param name="destinationFileName">The name of the file being replaced.</param>
            <param name="destinationBackupFileName">The name of the backup file.</param>
            <param name="ignoreMetadataErrors">
              <see langword="true"/> to ignore merge errors (such as attributes and access control lists (ACLs)) from the replaced file to the
              replacement file; otherwise, <see langword="false"/>.
            </param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.ReplaceCore(System.String,System.String,System.String,System.Boolean,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>Replaces the contents of a specified file with the contents of another file, deleting
              the original file, and creating a backup of the replaced file and optionally ignores merge errors.
            </summary>
            <remarks>
              The Replace method replaces the contents of a specified file with the contents of another file. It also creates a backup of the
              file that was replaced.
            </remarks>
            <remarks>
              If the <paramref name="sourceFileName"/> and <paramref name="destinationFileName"/> are on different volumes, this method will
              raise an exception. If the <paramref name="destinationBackupFileName"/> is on a different volume from the source file, the backup
              file will be deleted.
            </remarks>
            <remarks>
              Pass null to the <paramref name="destinationBackupFileName"/> parameter if you do not want to create a backup of the file being
              replaced.
            </remarks>
            <param name="sourceFileName">The name of a file that replaces the file specified by <paramref name="destinationFileName"/>.</param>
            <param name="destinationFileName">The name of the file being replaced.</param>
            <param name="destinationBackupFileName">The name of the backup file.</param>
            <param name="ignoreMetadataErrors">
              <see langword="true"/> to ignore merge errors (such as attributes and access control lists (ACLs)) from the replaced file to the
              replacement file; otherwise, <see langword="false"/>.
            </param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetAccessControl(System.String,System.Security.AccessControl.FileSecurity)">
            <summary>Applies access control list (ACL) entries described by a <see cref="T:System.Security.AccessControl.FileSecurity"/> FileSecurity object to the specified file.</summary>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.NotSupportedException"/>
            <param name="path">A file to add or remove access control list (ACL) entries from.</param>
            <param name="fileSecurity">A <see cref="T:System.Security.AccessControl.FileSecurity"/> object that describes an ACL entry to apply to the file described by the <paramref name="path"/> parameter.</param>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetAccessControl(System.String,System.Security.AccessControl.FileSecurity,System.Security.AccessControl.AccessControlSections)">
            <summary>Applies access control list (ACL) entries described by a <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object to the specified directory.</summary>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.NotSupportedException"/>
            <param name="path">A directory to add or remove access control list (ACL) entries from.</param>
            <param name="fileSecurity">A <see cref="T:System.Security.AccessControl.FileSecurity"/> object that describes an ACL entry to apply to the directory described by the path parameter.</param>
            <param name="includeSections">One or more of the <see cref="T:System.Security.AccessControl.AccessControlSections"/> values that specifies the type of access control list (ACL) information to set.</param>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetAccessControl(System.String,System.Security.AccessControl.FileSecurity,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Applies access control list (ACL) entries described by a <see cref="T:System.Security.AccessControl.FileSecurity"/> FileSecurity object to the specified file.</summary>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.NotSupportedException"/>
            <param name="path">A file to add or remove access control list (ACL) entries from.</param>
            <param name="fileSecurity">A <see cref="T:System.Security.AccessControl.FileSecurity"/> object that describes an ACL entry to apply to the file described by the <paramref name="path"/> parameter.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetAccessControl(System.String,System.Security.AccessControl.FileSecurity,System.Security.AccessControl.AccessControlSections,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Applies access control list (ACL) entries described by a <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object to the specified directory.</summary>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.NotSupportedException"/>
            <param name="path">A directory to add or remove access control list (ACL) entries from.</param>
            <param name="fileSecurity">A <see cref="T:System.Security.AccessControl.FileSecurity"/> object that describes an ACL entry to apply to the directory described by the path parameter.</param>
            <param name="includeSections">One or more of the <see cref="T:System.Security.AccessControl.AccessControlSections"/> values that specifies the type of access control list (ACL) information to set.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetAccessControl(Microsoft.Win32.SafeHandles.SafeFileHandle,System.Security.AccessControl.FileSecurity)">
            <summary>Applies access control list (ACL) entries described by a <see cref="T:System.Security.AccessControl.FileSecurity"/> FileSecurity object to the specified file.</summary>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.NotSupportedException"/>
            <param name="handle">A <see cref="T:Microsoft.Win32.SafeHandles.SafeFileHandle"/> to a file to add or remove access control list (ACL) entries from.</param>
            <param name="fileSecurity">A <see cref="T:System.Security.AccessControl.FileSecurity"/> object that describes an ACL entry to apply to the file described by the <paramref name="handle"/> parameter.</param>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetAccessControl(Microsoft.Win32.SafeHandles.SafeFileHandle,System.Security.AccessControl.FileSecurity,System.Security.AccessControl.AccessControlSections)">
            <summary>Applies access control list (ACL) entries described by a <see cref="T:System.Security.AccessControl.FileSecurity"/> FileSecurity object to the specified file.</summary>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.NotSupportedException"/>
            <param name="handle">A <see cref="T:Microsoft.Win32.SafeHandles.SafeFileHandle"/> to a file to add or remove access control list (ACL) entries from.</param>
            <param name="fileSecurity">A <see cref="T:System.Security.AccessControl.FileSecurity"/> object that describes an ACL entry to apply to the file described by the <paramref name="handle"/> parameter.</param>      
            <param name="includeSections">One or more of the <see cref="T:System.Security.AccessControl.AccessControlSections"/> values that specifies the type of access control list (ACL) information to set.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetAccessControlCore(System.String,Microsoft.Win32.SafeHandles.SafeFileHandle,System.Security.AccessControl.ObjectSecurity,System.Security.AccessControl.AccessControlSections,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Applies access control list (ACL) entries described by a <see cref="T:System.Security.AccessControl.FileSecurity"/>/<see cref="T:System.Security.AccessControl.DirectorySecurity"/> object to the specified file or directory.</summary>
            <remarks>Use either <paramref name="path"/> or <paramref name="handle"/>, not both.</remarks>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.NotSupportedException"/>
            <param name="path">A file/directory to add or remove access control list (ACL) entries from. This parameter This parameter may be <see langword="null"/>.</param>
            <param name="handle">A <see cref="T:Microsoft.Win32.SafeHandles.SafeFileHandle"/> to add or remove access control list (ACL) entries from. This parameter This parameter may be <see langword="null"/>.</param>
            <param name="objectSecurity">A <see cref="T:System.Security.AccessControl.FileSecurity"/>/<see cref="T:System.Security.AccessControl.DirectorySecurity"/> object that describes an ACL entry to apply to the file/directory described by the <paramref name="path"/>/<paramref name="handle"/> parameter.</param>
            <param name="includeSections">One or more of the <see cref="T:System.Security.AccessControl.AccessControlSections"/> values that specifies the type of access control list (ACL) information to set.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetAttributes(System.String,System.IO.FileAttributes)">
            <summary>Sets the specified <see cref="T:System.IO.FileAttributes"/> of the file or directory on the specified path.</summary>
            <remarks>
              Certain file attributes, such as <see cref="F:System.IO.FileAttributes.Hidden"/> and <see cref="F:System.IO.FileAttributes.ReadOnly"/>, can be combined.
              Other attributes, such as <see cref="F:System.IO.FileAttributes.Normal"/>, must be used alone.
            </remarks>
            <remarks>
              It is not possible to change the <see cref="F:System.IO.FileAttributes.Compressed"/> status of a File object using this method.
            </remarks>
            <param name="path">The path to the file or directory.</param>
            <param name="fileAttributes">A bitwise combination of the enumeration values.</param>
            <overloads>Sets the specified <see cref="T:System.IO.FileAttributes"/> of the file or directory on the specified path.</overloads>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetAttributes(System.String,System.IO.FileAttributes,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Sets the specified <see cref="T:System.IO.FileAttributes"/> of the file or directory on the specified path.</summary>
            <remarks>
              Certain file attributes, such as <see cref="F:System.IO.FileAttributes.Hidden"/> and <see cref="F:System.IO.FileAttributes.ReadOnly"/>, can be combined.
              Other attributes, such as <see cref="F:System.IO.FileAttributes.Normal"/>, must be used alone.
            </remarks>
            <remarks>
              It is not possible to change the <see cref="F:System.IO.FileAttributes.Compressed"/> status of a File object using this method.
            </remarks>
            <param name="path">The path to the file or directory.</param>
            <param name="fileAttributes">A bitwise combination of the enumeration values.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetAttributesTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.IO.FileAttributes)">
            <summary>[AlphaFS] Sets the specified <see cref="T:System.IO.FileAttributes"/> of the file on the specified path.</summary>
            <remarks>
              Certain file attributes, such as <see cref="F:System.IO.FileAttributes.Hidden"/> and <see cref="F:System.IO.FileAttributes.ReadOnly"/>, can be combined.
              Other attributes, such as <see cref="F:System.IO.FileAttributes.Normal"/>, must be used alone.
            </remarks>
            <remarks>
              It is not possible to change the <see cref="F:System.IO.FileAttributes.Compressed"/> status of a File object using this method.
            </remarks>
            <param name="transaction">The transaction.</param>
            <param name="path">The path to the file.</param>
            <param name="fileAttributes">A bitwise combination of the enumeration values.</param>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetAttributesTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.IO.FileAttributes,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Sets the specified <see cref="T:System.IO.FileAttributes"/> of the file on the specified path.</summary>
            <remarks>
              Certain file attributes, such as <see cref="F:System.IO.FileAttributes.Hidden"/> and <see cref="F:System.IO.FileAttributes.ReadOnly"/>, can be combined.
              Other attributes, such as <see cref="F:System.IO.FileAttributes.Normal"/>, must be used alone.
            </remarks>
            <remarks>
              It is not possible to change the <see cref="F:System.IO.FileAttributes.Compressed"/> status of a File object using this method.
            </remarks>
            <param name="transaction">The transaction.</param>
            <param name="path">The path to the file.</param>
            <param name="fileAttributes">A bitwise combination of the enumeration values.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetAttributesCore(System.Boolean,Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.IO.FileAttributes,System.Boolean,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>Sets the attributes for a Non-/Transacted file/directory.</summary>
            <remarks>
              Certain file attributes, such as <see cref="F:System.IO.FileAttributes.Hidden"/> and <see cref="F:System.IO.FileAttributes.ReadOnly"/>, can be combined.
              Other attributes, such as <see cref="F:System.IO.FileAttributes.Normal"/>, must be used alone.
            </remarks>
            <remarks>
              It is not possible to change the <see cref="F:System.IO.FileAttributes.Compressed"/> status of a File object using the SetAttributes method.
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <param name="isFolder">Specifies that <paramref name="path"/> is a file or directory.</param>
            <param name="transaction">The transaction.</param>
            <param name="path">The name of the file or directory whose attributes are to be set.</param>
            <param name="fileAttributes">
              The attributes to set for the file or directory. Note that all other values override <see cref="F:System.IO.FileAttributes.Normal"/>.
            </param>
            <param name="continueOnNotExist">
              <see langword="true"/> does not throw an Exception when the file system object does not exist.
            </param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetCreationTime(System.String,System.DateTime)">
            <summary>Sets the date and time the file was created.</summary>
            <param name="path">The file for which to set the creation date and time information.</param>
            <param name="creationTime">
              A <see cref="T:System.DateTime"/> containing the value to set for the creation date and time of <paramref name="path"/>. This value
              is expressed in local time.
            </param>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetCreationTime(System.String,System.DateTime,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Sets the date and time the file was created.</summary>
            <param name="path">The file for which to set the creation date and time information.</param>
            <param name="creationTime">
              A <see cref="T:System.DateTime"/> containing the value to set for the creation date and time of <paramref name="path"/>. This value
              is expressed in local time.
            </param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetCreationTime(System.String,System.DateTime,System.Boolean,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Sets the date and time the file was created.</summary>
            <param name="path">The file for which to set the creation date and time information.</param>
            <param name="creationTime">
              A <see cref="T:System.DateTime"/> containing the value to set for the creation date and time of <paramref name="path"/>. This value
              is expressed in local time.
            </param>
            <param name="modifyReparsePoint">If <see langword="true"/>, the date and time information will apply to the reparse point (symlink or junction) and not the file or directory linked to. No effect if <paramref name="path"/> does not refer to a reparse point.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetCreationTimeTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.DateTime)">
            <summary>[AlphaFS] Sets the date and time the file was created.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file for which to set the creation date and time information.</param>
            <param name="creationTime">
              A <see cref="T:System.DateTime"/> containing the value to set for the creation date and time of <paramref name="path"/>. This value
              is expressed in local time.
            </param>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetCreationTimeTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.DateTime,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Sets the date and time the file was created.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file for which to set the creation date and time information.</param>
            <param name="creationTime">
              A <see cref="T:System.DateTime"/> containing the value to set for the creation date and time of <paramref name="path"/>. This value
              is expressed in local time.
            </param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetCreationTimeTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.DateTime,System.Boolean,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Sets the date and time the file was created.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file for which to set the creation date and time information.</param>
            <param name="creationTime">
              A <see cref="T:System.DateTime"/> containing the value to set for the creation date and time of <paramref name="path"/>. This value
              is expressed in local time.
            </param>
            <param name="modifyReparsePoint">If <see langword="true"/>, the date and time information will apply to the reparse point (symlink or junction) and not the file or directory linked to. No effect if <paramref name="path"/> does not refer to a reparse point.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetCreationTimeUtc(System.String,System.DateTime)">
            <summary>Sets the date and time, in coordinated universal time (UTC), that the file was created.</summary>
            <param name="path">The file for which to set the creation date and time information.</param>
            <param name="creationTimeUtc">
              A <see cref="T:System.DateTime"/> containing the value to set for the creation date and time of <paramref name="path"/>. This value
              is expressed in UTC time.
            </param>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetCreationTimeUtc(System.String,System.DateTime,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Sets the date and time, in coordinated universal time (UTC), that the file was created.</summary>
            <param name="path">The file for which to set the creation date and time information.</param>
            <param name="creationTimeUtc">
              A <see cref="T:System.DateTime"/> containing the value to set for the creation date and time of <paramref name="path"/>. This value
              is expressed in UTC time.
            </param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetCreationTimeUtc(System.String,System.DateTime,System.Boolean,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Sets the date and time, in coordinated universal time (UTC), that the file was created.</summary>
            <param name="path">The file for which to set the creation date and time information.</param>
            <param name="creationTimeUtc">
              A <see cref="T:System.DateTime"/> containing the value to set for the creation date and time of <paramref name="path"/>. This value
              is expressed in UTC time.
            </param>
            <param name="modifyReparsePoint">If <see langword="true"/>, the date and time information will apply to the reparse point (symlink or junction) and not the file or directory linked to. No effect if <paramref name="path"/> does not refer to a reparse point.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetCreationTimeUtcTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.DateTime)">
            <summary>[AlphaFS] Sets the date and time, in coordinated universal time (UTC), that the file was created.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file for which to set the creation date and time information.</param>
            <param name="creationTimeUtc">
              A <see cref="T:System.DateTime"/> containing the value to set for the creation date and time of <paramref name="path"/>. This value
              is expressed in UTC time.
            </param>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetCreationTimeUtcTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.DateTime,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Sets the date and time, in coordinated universal time (UTC), that the file was created.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file for which to set the creation date and time information.</param>
            <param name="creationTimeUtc">
              A <see cref="T:System.DateTime"/> containing the value to set for the creation date and time of <paramref name="path"/>. This value
              is expressed in UTC time.
            </param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetCreationTimeUtcTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.DateTime,System.Boolean,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Sets the date and time, in coordinated universal time (UTC), that the file was created.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file for which to set the creation date and time information.</param>
            <param name="creationTimeUtc">
              A <see cref="T:System.DateTime"/> containing the value to set for the creation date and time of <paramref name="path"/>. This value
              is expressed in UTC time.
            </param>
            <param name="modifyReparsePoint">If <see langword="true"/>, the date and time information will apply to the reparse point (symlink or junction) and not the file or directory linked to. No effect if <paramref name="path"/> does not refer to a reparse point.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetLastAccessTime(System.String,System.DateTime)">
            <summary>Sets the date and time that the specified file was last accessed.</summary>
            <param name="path">The file for which to set the access date and time information.</param>
            <param name="lastAccessTime">
              A <see cref="T:System.DateTime"/> containing the value to set for the last access date and time of <paramref name="path"/>. This
              value is expressed in local time.
            </param>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetLastAccessTime(System.String,System.DateTime,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Sets the date and time that the specified file was last accessed.</summary>
            <param name="path">The file for which to set the access date and time information.</param>
            <param name="lastAccessTime">
              A <see cref="T:System.DateTime"/> containing the value to set for the last access date and time of <paramref name="path"/>. This
              value is expressed in local time.
            </param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetLastAccessTime(System.String,System.DateTime,System.Boolean,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Sets the date and time that the specified file was last accessed.</summary>
            <param name="path">The file for which to set the access date and time information.</param>
            <param name="lastAccessTime">
              A <see cref="T:System.DateTime"/> containing the value to set for the last access date and time of <paramref name="path"/>. This
              value is expressed in local time.
            </param>
            <param name="modifyReparsePoint">If <see langword="true"/>, the date and time information will apply to the reparse point (symlink or junction) and not the file or directory linked to. No effect if <paramref name="path"/> does not refer to a reparse point.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetLastAccessTimeTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.DateTime)">
            <summary>[AlphaFS] Sets the date and time that the specified file was last accessed.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file for which to set the access date and time information.</param>
            <param name="lastAccessTime">
              A <see cref="T:System.DateTime"/> containing the value to set for the last access date and time of <paramref name="path"/>. This
              value is expressed in local time.
            </param>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetLastAccessTimeTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.DateTime,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Sets the date and time that the specified file was last accessed.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file for which to set the access date and time information.</param>
            <param name="lastAccessTime">
              A <see cref="T:System.DateTime"/> containing the value to set for the last access date and time of <paramref name="path"/>. This
              value is expressed in local time.
            </param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetLastAccessTimeTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.DateTime,System.Boolean,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Sets the date and time that the specified file was last accessed.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file for which to set the access date and time information.</param>
            <param name="lastAccessTime">
              A <see cref="T:System.DateTime"/> containing the value to set for the last access date and time of <paramref name="path"/>. This
              value is expressed in local time.
            </param>
            <param name="modifyReparsePoint">If <see langword="true"/>, the date and time information will apply to the reparse point (symlink or junction) and not the file or directory linked to. No effect if <paramref name="path"/> does not refer to a reparse point.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetLastAccessTimeUtc(System.String,System.DateTime)">
            <summary>Sets the date and time, in coordinated universal time (UTC), that the specified file was last accessed.</summary>
            <param name="path">The file for which to set the access date and time information.</param>
            <param name="lastAccessTimeUtc">
              A <see cref="T:System.DateTime"/> containing the value to set for the last access date and time of <paramref name="path"/>. This
              value is expressed in UTC time.
            </param>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetLastAccessTimeUtc(System.String,System.DateTime,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Sets the date and time, in coordinated universal time (UTC), that the specified file was last accessed.</summary>
            <param name="path">The file for which to set the access date and time information.</param>
            <param name="lastAccessTimeUtc">
              A <see cref="T:System.DateTime"/> containing the value to set for the last access date and time of <paramref name="path"/>. This
              value is expressed in UTC time.
            </param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetLastAccessTimeUtc(System.String,System.DateTime,System.Boolean,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Sets the date and time, in coordinated universal time (UTC), that the specified file was last accessed.</summary>
            <param name="path">The file for which to set the access date and time information.</param>
            <param name="lastAccessTimeUtc">
              A <see cref="T:System.DateTime"/> containing the value to set for the last access date and time of <paramref name="path"/>. This
              value is expressed in UTC time.
            </param>
            <param name="modifyReparsePoint">If <see langword="true"/>, the date and time information will apply to the reparse point (symlink or junction) and not the file or directory linked to. No effect if <paramref name="path"/> does not refer to a reparse point.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetLastAccessTimeUtcTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.DateTime)">
            <summary>[AlphaFS] Sets the date and time, in coordinated universal time (UTC), that the specified file was last accessed.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file for which to set the access date and time information.</param>
            <param name="lastAccessTimeUtc">
              A <see cref="T:System.DateTime"/> containing the value to set for the last access date and time of <paramref name="path"/>. This
              value is expressed in UTC time.
            </param>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetLastAccessTimeUtcTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.DateTime,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Sets the date and time, in coordinated universal time (UTC), that the specified file was last accessed.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file for which to set the access date and time information.</param>
            <param name="lastAccessTimeUtc">
              A <see cref="T:System.DateTime"/> containing the value to set for the last access date and time of <paramref name="path"/>. This
              value is expressed in UTC time.
            </param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetLastAccessTimeUtcTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.DateTime,System.Boolean,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Sets the date and time, in coordinated universal time (UTC), that the specified file was last accessed.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file for which to set the access date and time information.</param>
            <param name="lastAccessTimeUtc">
              A <see cref="T:System.DateTime"/> containing the value to set for the last access date and time of <paramref name="path"/>. This
              value is expressed in UTC time.
            </param>
            <param name="modifyReparsePoint">If <see langword="true"/>, the date and time information will apply to the reparse point (symlink or junction) and not the file or directory linked to. No effect if <paramref name="path"/> does not refer to a reparse point.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetLastWriteTime(System.String,System.DateTime)">
            <summary>Sets the date and time that the specified file was last written to.</summary>
            <param name="path">The file for which to set the date and time information.</param>
            <param name="lastWriteTime">
              A <see cref="T:System.DateTime"/> containing the value to set for the last write date and time of <paramref name="path"/>. This value
              is expressed in local time.
            </param>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetLastWriteTime(System.String,System.DateTime,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Sets the date and time that the specified file was last written to.</summary>
            <param name="path">The file for which to set the date and time information.</param>
            <param name="lastWriteTime">
              A <see cref="T:System.DateTime"/> containing the value to set for the last write date and time of <paramref name="path"/>. This value
              is expressed in local time.
            </param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetLastWriteTime(System.String,System.DateTime,System.Boolean,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Sets the date and time that the specified file was last written to.</summary>
            <param name="path">The file for which to set the date and time information.</param>
            <param name="lastWriteTime">
              A <see cref="T:System.DateTime"/> containing the value to set for the last write date and time of <paramref name="path"/>. This value
              is expressed in local time.
            </param>
            <param name="modifyReparsePoint">If <see langword="true"/>, the date and time information will apply to the reparse point (symlink or junction) and not the file or directory linked to. No effect if <paramref name="path"/> does not refer to a reparse point.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetLastWriteTimeTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.DateTime)">
            <summary>[AlphaFS] Sets the date and time that the specified file was last written to.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file for which to set the date and time information.</param>
            <param name="lastWriteTime">
              A <see cref="T:System.DateTime"/> containing the value to set for the last write date and time of <paramref name="path"/>. This value
              is expressed in local time.
            </param>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetLastWriteTimeTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.DateTime,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Sets the date and time that the specified file was last written to.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file for which to set the date and time information.</param>
            <param name="lastWriteTime">
              A <see cref="T:System.DateTime"/> containing the value to set for the last write date and time of <paramref name="path"/>. This value
              is expressed in local time.
            </param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetLastWriteTimeTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.DateTime,System.Boolean,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Sets the date and time that the specified file was last written to.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file for which to set the date and time information.</param>
            <param name="lastWriteTime">
              A <see cref="T:System.DateTime"/> containing the value to set for the last write date and time of <paramref name="path"/>. This value
              is expressed in local time.
            </param>
            <param name="modifyReparsePoint">If <see langword="true"/>, the date and time information will apply to the reparse point (symlink or junction) and not the file or directory linked to. No effect if <paramref name="path"/> does not refer to a reparse point.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetLastWriteTimeUtc(System.String,System.DateTime)">
            <summary>Sets the date and time, in coordinated universal time (UTC), that the specified file was last written to.</summary>
            <param name="path">The file for which to set the date and time information.</param>
            <param name="lastWriteTimeUtc">
              A <see cref="T:System.DateTime"/> containing the value to set for the last write date and time of <paramref name="path"/>. This value
              is expressed in UTC time.
            </param>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetLastWriteTimeUtc(System.String,System.DateTime,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>
              [AlphaFS] Sets the date and time, in coordinated universal time (UTC), that the specified file was last written to.
            </summary>
            <param name="path">The file for which to set the date and time information.</param>
            <param name="lastWriteTimeUtc">
              A <see cref="T:System.DateTime"/> containing the value to set for the last write date and time of <paramref name="path"/>. This value
              is expressed in UTC time.
            </param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetLastWriteTimeUtc(System.String,System.DateTime,System.Boolean,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>
              [AlphaFS] Sets the date and time, in coordinated universal time (UTC), that the specified file was last written to.
            </summary>
            <param name="path">The file for which to set the date and time information.</param>
            <param name="lastWriteTimeUtc">
              A <see cref="T:System.DateTime"/> containing the value to set for the last write date and time of <paramref name="path"/>. This value
              is expressed in UTC time.
            </param>
            <param name="modifyReparsePoint">If <see langword="true"/>, the date and time information will apply to the reparse point (symlink or junction) and not the file or directory linked to. No effect if <paramref name="path"/> does not refer to a reparse point.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetLastWriteTimeUtcTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.DateTime)">
            <summary>
              [AlphaFS] Sets the date and time, in coordinated universal time (UTC), that the specified file was last written to.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file for which to set the date and time information.</param>
            <param name="lastWriteTimeUtc">
              A <see cref="T:System.DateTime"/> containing the value to set for the last write date and time of <paramref name="path"/>. This value
              is expressed in UTC time.
            </param>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetLastWriteTimeUtcTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.DateTime,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>
              [AlphaFS] Sets the date and time, in coordinated universal time (UTC), that the specified file was last written to.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file for which to set the date and time information.</param>
            <param name="lastWriteTimeUtc">
              A <see cref="T:System.DateTime"/> containing the value to set for the last write date and time of <paramref name="path"/>. This value
              is expressed in UTC time.
            </param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetLastWriteTimeUtcTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.DateTime,System.Boolean,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>
              [AlphaFS] Sets the date and time, in coordinated universal time (UTC), that the specified file was last written to.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file for which to set the date and time information.</param>
            <param name="lastWriteTimeUtc">
              A <see cref="T:System.DateTime"/> containing the value to set for the last write date and time of <paramref name="path"/>. This value
              is expressed in UTC time.
            </param>
            <param name="modifyReparsePoint">If <see langword="true"/>, the date and time information will apply to the reparse point (symlink or junction) and not the file or directory linked to. No effect if <paramref name="path"/> does not refer to a reparse point.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetTimestamps(System.String,System.DateTime,System.DateTime,System.DateTime,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Sets all the date and time stamps for the specified file, at once.</summary>
            <param name="path">The file for which to set the dates and times information.</param>
            <param name="creationTime">
              A <see cref="T:System.DateTime"/> containing the value to set for the creation date and time of <paramref name="path"/>. This value
              is expressed in local time.
            </param>
            <param name="lastAccessTime">
              A <see cref="T:System.DateTime"/> containing the value to set for the last access date and time of <paramref name="path"/>. This
              value is expressed in local time.
            </param>
            <param name="lastWriteTime">
              A <see cref="T:System.DateTime"/> containing the value to set for the last write date and time of <paramref name="path"/>. This value
              is expressed in local time.
            </param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetTimestamps(System.String,System.DateTime,System.DateTime,System.DateTime)">
            <summary>[AlphaFS] Sets all the date and time stamps for the specified file, at once.</summary>
            <param name="path">The file for which to set the dates and times information.</param>
            <param name="creationTime">
              A <see cref="T:System.DateTime"/> containing the value to set for the creation date and time of <paramref name="path"/>. This value
              is expressed in local time.
            </param>
            <param name="lastAccessTime">
              A <see cref="T:System.DateTime"/> containing the value to set for the last access date and time of <paramref name="path"/>. This
              value is expressed in local time.
            </param>
            <param name="lastWriteTime">
              A <see cref="T:System.DateTime"/> containing the value to set for the last write date and time of <paramref name="path"/>. This value
              is expressed in local time.
            </param>     
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetTimestamps(System.String,System.DateTime,System.DateTime,System.DateTime,System.Boolean,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Sets all the date and time stamps for the specified file, at once.</summary>
            <param name="path">The file for which to set the dates and times information.</param>
            <param name="creationTime">
              A <see cref="T:System.DateTime"/> containing the value to set for the creation date and time of <paramref name="path"/>. This value
              is expressed in local time.
            </param>
            <param name="lastAccessTime">
              A <see cref="T:System.DateTime"/> containing the value to set for the last access date and time of <paramref name="path"/>. This
              value is expressed in local time.
            </param>
            <param name="lastWriteTime">
              A <see cref="T:System.DateTime"/> containing the value to set for the last write date and time of <paramref name="path"/>. This value
              is expressed in local time.
            </param>
            <param name="modifyReparsePoint">If <see langword="true"/>, the date and time information will apply to the reparse point (symlink or junction) and not the file or directory linked to. No effect if <paramref name="path"/> does not refer to a reparse point.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetTimestampsTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.DateTime,System.DateTime,System.DateTime,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Sets all the date and time stamps for the specified file, at once.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file for which to set the dates and times information.</param>
            <param name="creationTime">
              A <see cref="T:System.DateTime"/> containing the value to set for the creation date and time of <paramref name="path"/>. This value
              is expressed in local time.
            </param>
            <param name="lastAccessTime">
              A <see cref="T:System.DateTime"/> containing the value to set for the last access date and time of <paramref name="path"/>. This
              value is expressed in local time.
            </param>
            <param name="lastWriteTime">
              A <see cref="T:System.DateTime"/> containing the value to set for the last write date and time of <paramref name="path"/>. This value
              is expressed in local time.
            </param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetTimestampsTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.DateTime,System.DateTime,System.DateTime)">
            <summary>[AlphaFS] Sets all the date and time stamps for the specified file, at once.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file for which to set the dates and times information.</param>
            <param name="creationTime">
              A <see cref="T:System.DateTime"/> containing the value to set for the creation date and time of <paramref name="path"/>. This value
              is expressed in local time.
            </param>
            <param name="lastAccessTime">
              A <see cref="T:System.DateTime"/> containing the value to set for the last access date and time of <paramref name="path"/>. This
              value is expressed in local time.
            </param>
            <param name="lastWriteTime">
              A <see cref="T:System.DateTime"/> containing the value to set for the last write date and time of <paramref name="path"/>. This value
              is expressed in local time.
            </param>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetTimestampsTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.DateTime,System.DateTime,System.DateTime,System.Boolean,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Sets all the date and time stamps for the specified file, at once.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file for which to set the dates and times information.</param>
            <param name="creationTime">
              A <see cref="T:System.DateTime"/> containing the value to set for the creation date and time of <paramref name="path"/>. This value
              is expressed in local time.
            </param>
            <param name="lastAccessTime">
              A <see cref="T:System.DateTime"/> containing the value to set for the last access date and time of <paramref name="path"/>. This
              value is expressed in local time.
            </param>
            <param name="lastWriteTime">
              A <see cref="T:System.DateTime"/> containing the value to set for the last write date and time of <paramref name="path"/>. This value
              is expressed in local time.
            </param>
            <param name="modifyReparsePoint">If <see langword="true"/>, the date and time information will apply to the reparse point (symlink or junction) and not the file or directory linked to. No effect if <paramref name="path"/> does not refer to a reparse point.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetTimestampsUtc(System.String,System.DateTime,System.DateTime,System.DateTime,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Sets all the date and time stamps, in coordinated universal time (UTC), for the specified file, at once.</summary>
            <param name="path">The file for which to set the dates and times information.</param>
            <param name="creationTimeUtc">
              A <see cref="T:System.DateTime"/> containing the value to set for the creation date and time of <paramref name="path"/>. This value
              is expressed in UTC time.
            </param>
            <param name="lastAccessTimeUtc">
              A <see cref="T:System.DateTime"/> containing the value to set for the last access date and time of <paramref name="path"/>. This
              value is expressed in UTC time.
            </param>
            <param name="lastWriteTimeUtc">
              A <see cref="T:System.DateTime"/> containing the value to set for the last write date and time of <paramref name="path"/>. This value
              is expressed in UTC time.
            </param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetTimestampsUtc(System.String,System.DateTime,System.DateTime,System.DateTime)">
            <summary>[AlphaFS] Sets all the date and time stamps, in coordinated universal time (UTC), for the specified file, at once.</summary>
            <param name="path">The file for which to set the dates and times information.</param>
            <param name="creationTimeUtc">
              A <see cref="T:System.DateTime"/> containing the value to set for the creation date and time of <paramref name="path"/>. This value
              is expressed in UTC time.
            </param>
            <param name="lastAccessTimeUtc">
              A <see cref="T:System.DateTime"/> containing the value to set for the last access date and time of <paramref name="path"/>. This
              value is expressed in UTC time.
            </param>
            <param name="lastWriteTimeUtc">
              A <see cref="T:System.DateTime"/> containing the value to set for the last write date and time of <paramref name="path"/>. This value
              is expressed in UTC time.
            </param>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetTimestampsUtc(System.String,System.DateTime,System.DateTime,System.DateTime,System.Boolean,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Sets all the date and time stamps, in coordinated universal time (UTC), for the specified file, at once.</summary>
            <param name="path">The file for which to set the dates and times information.</param>
            <param name="creationTimeUtc">
              A <see cref="T:System.DateTime"/> containing the value to set for the creation date and time of <paramref name="path"/>. This value
              is expressed in UTC time.
            </param>
            <param name="lastAccessTimeUtc">
              A <see cref="T:System.DateTime"/> containing the value to set for the last access date and time of <paramref name="path"/>. This
              value is expressed in UTC time.
            </param>
            <param name="lastWriteTimeUtc">
              A <see cref="T:System.DateTime"/> containing the value to set for the last write date and time of <paramref name="path"/>. This value
              is expressed in UTC time.
            </param>
            <param name="modifyReparsePoint">If <see langword="true"/>, the date and time information will apply to the reparse point (symlink or junction) and not the file or directory linked to. No effect if <paramref name="path"/> does not refer to a reparse point.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetTimestampsUtcTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.DateTime,System.DateTime,System.DateTime,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Sets all the date and time stamps, in coordinated universal time (UTC), for the specified file, at once.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file for which to set the dates and times information.</param>
            <param name="creationTimeUtc">
              A <see cref="T:System.DateTime"/> containing the value to set for the creation date and time of <paramref name="path"/>. This value
              is expressed in UTC time.
            </param>
            <param name="lastAccessTimeUtc">
              A <see cref="T:System.DateTime"/> containing the value to set for the last access date and time of <paramref name="path"/>. This
              value is expressed in UTC time.
            </param>
            <param name="lastWriteTimeUtc">
              A <see cref="T:System.DateTime"/> containing the value to set for the last write date and time of <paramref name="path"/>. This value
              is expressed in UTC time.
            </param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetTimestampsUtcTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.DateTime,System.DateTime,System.DateTime)">
            <summary>[AlphaFS] Sets all the date and time stamps, in coordinated universal time (UTC), for the specified file, at once.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file for which to set the dates and times information.</param>
            <param name="creationTimeUtc">
              A <see cref="T:System.DateTime"/> containing the value to set for the creation date and time of <paramref name="path"/>. This value
              is expressed in UTC time.
            </param>
            <param name="lastAccessTimeUtc">
              A <see cref="T:System.DateTime"/> containing the value to set for the last access date and time of <paramref name="path"/>. This
              value is expressed in UTC time.
            </param>
            <param name="lastWriteTimeUtc">
              A <see cref="T:System.DateTime"/> containing the value to set for the last write date and time of <paramref name="path"/>. This value
              is expressed in UTC time.
            </param>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetTimestampsUtcTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.DateTime,System.DateTime,System.DateTime,System.Boolean,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Sets all the date and time stamps, in coordinated universal time (UTC), for the specified file, at once.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file for which to set the dates and times information.</param>
            <param name="creationTimeUtc">
              A <see cref="T:System.DateTime"/> containing the value to set for the creation date and time of <paramref name="path"/>. This value
              is expressed in UTC time.
            </param>
            <param name="lastAccessTimeUtc">
              A <see cref="T:System.DateTime"/> containing the value to set for the last access date and time of <paramref name="path"/>. This
              value is expressed in UTC time.
            </param>
            <param name="lastWriteTimeUtc">
              A <see cref="T:System.DateTime"/> containing the value to set for the last write date and time of <paramref name="path"/>. This value
              is expressed in UTC time.
            </param>
            <param name="modifyReparsePoint">If <see langword="true"/>, the date and time information will apply to the reparse point (symlink or junction) and not the file or directory linked to. No effect if <paramref name="path"/> does not refer to a reparse point.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.SetFsoDateTimeCore(System.Boolean,Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Boolean,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>Set the date and time, in coordinated universal time (UTC), that the file or directory was created and/or last accessed and/or written to.</summary>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.NotSupportedException"/>
            <param name="isFolder">Specifies that <paramref name="path"/> is a file or directory.</param>
            <param name="transaction">The transaction.</param>
            <param name="path">The file or directory for which to set the date and time information.</param>
            <param name="creationTimeUtc">A <see cref="T:System.DateTime"/> containing the value to set for the creation date and time of <paramref name="path"/>. This value is expressed in UTC time.</param>
            <param name="lastAccessTimeUtc">A <see cref="T:System.DateTime"/> containing the value to set for the last access date and time of <paramref name="path"/>. This value is expressed in UTC time.</param>
            <param name="lastWriteTimeUtc">A <see cref="T:System.DateTime"/> containing the value to set for the last write date and time of <paramref name="path"/>. This value is expressed in UTC time.</param>
            <param name="modifyReparsePoint">If <see langword="true"/>, the date and time information will apply to the reparse point (symlink or junction) and not the file or directory linked to. No effect if <paramref name="path"/> does not refer to a reparse point.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.WriteAllBytes(System.String,System.Byte[])">
            <summary>
              Creates a new file, writes the specified byte array to the file, and then closes the file. If the target file already exists, it is
              overwritten.
            </summary>
            <param name="path">The file to write to.</param>
            <param name="bytes">The bytes to write to the file.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.WriteAllBytes(System.String,System.Byte[],Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>
              [AlphaFS] Creates a new file, writes the specified byte array to the file, and then closes the file. If the target file already
              exists, it is overwritten.
            </summary>
            <param name="path">The file to write to.</param>
            <param name="bytes">The bytes to write to the file.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.WriteAllBytesTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Byte[])">
            <summary>
              [AlphaFS] Creates a new file, writes the specified byte array to the file, and then closes the file. If the target file already
              exists, it is overwritten.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to write to.</param>
            <param name="bytes">The bytes to write to the file.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.WriteAllBytesTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Byte[],Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>
              [AlphaFS] Creates a new file, writes the specified byte array to the file, and then closes the file. If the target file already
              exists, it is overwritten.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to write to.</param>
            <param name="bytes">The bytes to write to the file.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.WriteAllBytesCore(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Byte[],Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>Creates a new file as part of a transaction, writes the specified byte array to
              the file, and then closes the file. If the target file already exists, it is overwritten.
            </summary>
            <exception cref="T:System.ArgumentNullException"/>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to write to.</param>
            <param name="bytes">The bytes to write to the file.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetChangeTime(System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Gets the change date and time of the specified file.</summary>
            <returns>A <see cref="T:System.DateTime"/> structure set to the change date and time for the specified file. This value is expressed in local time.</returns>
            <param name="path">The file for which to obtain creation date and time information.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetChangeTime(System.String)">
            <summary>[AlphaFS] Gets the change date and time of the specified file.</summary>
            <returns>A <see cref="T:System.DateTime"/> structure set to the change date and time for the specified file. This value is expressed in local time.</returns>
            <param name="path">The file for which to obtain creation date and time information.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetChangeTime(Microsoft.Win32.SafeHandles.SafeFileHandle)">
            <summary>[AlphaFS] Gets the change date and time of the specified file.</summary>
            <returns>A <see cref="T:System.DateTime"/> structure set to the change date and time for the specified file. This value is expressed in local time.</returns>
            <param name="safeHandle">An open handle to the file or directory from which to retrieve information.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetChangeTimeTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Gets the change date and time of the specified file.</summary>
            <returns>A <see cref="T:System.DateTime"/> structure set to the change date and time for the specified file. This value is expressed in local time.</returns>
            <param name="transaction">The transaction.</param>
            <param name="path">The file for which to obtain creation date and time information.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetChangeTimeTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>[AlphaFS] Gets the change date and time of the specified file.</summary>
            <returns>A <see cref="T:System.DateTime"/> structure set to the change date and time for the specified file. This value is expressed in local time.</returns>
            <param name="transaction">The transaction.</param>
            <param name="path">The file for which to obtain creation date and time information.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetChangeTimeUtc(System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Gets the change date and time, in Coordinated Universal Time (UTC) format, of the specified file.</summary>
            <returns>A <see cref="T:System.DateTime"/> structure set to the change date and time for the specified file. This value is expressed in UTC time.</returns>
            <param name="path">The file for which to obtain change date and time information, in Coordinated Universal Time (UTC) format.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetChangeTimeUtc(System.String)">
            <summary>[AlphaFS] Gets the change date and time, in Coordinated Universal Time (UTC) format, of the specified file.</summary>
            <returns>A <see cref="T:System.DateTime"/> structure set to the change date and time for the specified file. This value is expressed in UTC time.</returns>
            <param name="path">The file for which to obtain change date and time information, in Coordinated Universal Time (UTC) format.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetChangeTimeUtc(Microsoft.Win32.SafeHandles.SafeFileHandle)">
            <summary>[AlphaFS] Gets the change date and time, in Coordinated Universal Time (UTC) format, of the specified file.</summary>
            <returns>A <see cref="T:System.DateTime"/> structure set to the change date and time for the specified file. This value is expressed in UTC time.</returns>
            <param name="safeHandle">An open handle to the file or directory from which to retrieve information.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetChangeTimeUtcTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Gets the change date and time, in Coordinated Universal Time (UTC) format, of the specified file.</summary>
            <returns>A <see cref="T:System.DateTime"/> structure set to the change date and time for the specified file. This value is expressed in UTC time.</returns>
            <param name="transaction">The transaction.</param>
            <param name="path">The file for which to obtain change date and time information, in Coordinated Universal Time (UTC) format.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetChangeTimeUtcTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>[AlphaFS] Gets the change date and time, in Coordinated Universal Time (UTC) format, of the specified file.</summary>
            <returns>A <see cref="T:System.DateTime"/> structure set to the change date and time for the specified file. This value is expressed in UTC time.</returns>
            <param name="transaction">The transaction.</param>
            <param name="path">The file for which to obtain change date and time information, in Coordinated Universal Time (UTC) format.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetChangeTimeCore(System.Boolean,Alphaleonis.Win32.Filesystem.KernelTransaction,Microsoft.Win32.SafeHandles.SafeFileHandle,System.String,System.Boolean,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>Gets the change date and time of the specified file.</summary>
            <returns>A <see cref="T:System.DateTime"/> structure set to the change date and time for the specified file. This value is expressed in local time.</returns>
            <remarks><para>Use either <paramref name="path"/> or <paramref name="safeHandle"/>, not both.</para></remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.PlatformNotSupportedException"/>
            <param name="isFolder">Specifies that <paramref name="path"/> is a file or directory.</param>
            <param name="transaction">The transaction.</param>
            <param name="safeHandle">An open handle to the file or directory from which to retrieve information.</param>
            <param name="path">The file or directory for which to obtain creation date and time information.</param>
            <param name="getUtc"><see langword="true"/> gets the Coordinated Universal Time (UTC), <see langword="false"/> gets the local time.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetCompressedSize(System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Retrieves the actual number of bytes of disk storage used to store a specified file.</summary>
            <remarks>
              If the file is located on a volume that supports compression and the file is compressed, the value obtained is the compressed size
              of the specified file. If the file is located on a volume that supports sparse files and the file is a sparse file, the value
              obtained is the sparse size of the specified file.
            </remarks>
            <param name="path"><para>The name of the file.</para></param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
            <returns>The actual number of bytes of disk storage used to store the specified file.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetCompressedSize(System.String)">
            <summary>[AlphaFS] Retrieves the actual number of bytes of disk storage used to store a specified file.</summary>
            <remarks>
              If the file is located on a volume that supports compression and the file is compressed, the value obtained is the compressed size
              of the specified file. If the file is located on a volume that supports sparse files and the file is a sparse file, the value
              obtained is the sparse size of the specified file.
            </remarks>
            <param name="path"><para>The name of the file.</para></param>
            <returns>The actual number of bytes of disk storage used to store the specified file.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetCompressedSizeTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>
              [AlphaFS] Retrieves the actual number of bytes of disk storage used to store a specified file as part of a transaction. If the file
              is located on a volume that supports compression and the file is compressed, the value obtained is the compressed size of the
              specified file. If the file is located on a volume that supports sparse files and the file is a sparse file, the value obtained is
              the sparse size of the specified file.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path"><para>The name of the file.</para></param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
            <returns>The actual number of bytes of disk storage used to store the specified file.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetCompressedSizeTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>
              [AlphaFS] Retrieves the actual number of bytes of disk storage used to store a specified file as part of a transaction. If the file
              is located on a volume that supports compression and the file is compressed, the value obtained is the compressed size of the
              specified file. If the file is located on a volume that supports sparse files and the file is a sparse file, the value obtained is
              the sparse size of the specified file.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="path"><para>The name of the file.</para></param>
            <returns>The actual number of bytes of disk storage used to store the specified file.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetCompressedSizeCore(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>Retrieves the actual number of bytes of disk storage used to store a
              specified file as part of a transaction. If the file is located on a volume that supports compression and the file is compressed,
              the value obtained is the compressed size of the specified file. If the file is located on a volume that supports sparse files and
              the file is a sparse file, the value obtained is the sparse size of the specified file.
            </summary>
            <exception cref="T:System.ArgumentNullException"/>
            <param name="transaction">The transaction.</param>
            <param name="path"><para>The name of the file.</para></param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
            <returns>The actual number of bytes of disk storage used to store the specified file.</returns>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetEncryptionStatus(System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Retrieves the encryption status of the specified file.</summary>
            <param name="path">The name of the file.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
            <returns>The <see cref="T:Alphaleonis.Win32.Filesystem.FileEncryptionStatus"/> of the specified <paramref name="path"/>.</returns>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetEncryptionStatus(System.String)">
            <summary>[AlphaFS] Retrieves the encryption status of the specified file.</summary>
            <param name="path">The name of the file.</param>
            <returns>The <see cref="T:Alphaleonis.Win32.Filesystem.FileEncryptionStatus"/> of the specified <paramref name="path"/>.</returns>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetEncryptionStatusCore(System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>Retrieves the encryption status of the specified file.</summary>
            <param name="path">The name of the file.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
            <returns>The <see cref="T:Alphaleonis.Win32.Filesystem.FileEncryptionStatus"/> of the specified <paramref name="path"/>.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetFileInfoByHandle(Microsoft.Win32.SafeHandles.SafeFileHandle)">
            <summary>[AlphaFS] Retrieves file information for the specified <see cref="T:Microsoft.Win32.SafeHandles.SafeFileHandle"/>.</summary>
            <param name="handle">A <see cref="T:Microsoft.Win32.SafeHandles.SafeFileHandle"/> connected to the open file from which to retrieve the information.</param>
            <returns>A <see cref="T:Alphaleonis.Win32.Filesystem.ByHandleFileInfo"/> object containing the requested information.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetFileSystemEntryInfo(System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Gets the <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo"/> of the file on the path.</summary>
            <returns>The <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo"/> instance of the file or directory.</returns>
            <param name="path">The path to the file or directory.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetFileSystemEntryInfo(System.String)">
            <summary>[AlphaFS] Gets the <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo"/> of the file on the path.</summary>
            <returns>The <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo"/> instance of the file or directory.</returns>
            <param name="path">The path to the file or directory.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetFileSystemEntryInfoTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Gets the <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo"/> of the file on the path.</summary>
            <returns>The <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo"/> instance of the file or directory.</returns>
            <param name="transaction">The transaction.</param>
            <param name="path">The path to the file or directory.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetFileSystemEntryInfoTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>[AlphaFS] Gets the <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo"/> of the file on the path.</summary>
            <returns>The <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo"/> instance of the file or directory.</returns>
            <param name="transaction">The transaction.</param>
            <param name="path">The path to the file or directory.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetFileSystemEntryInfoCore(System.Boolean,Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Boolean,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>Gets a FileSystemEntryInfo from a Non-/Transacted directory/file.</summary>
            <returns>The <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo"/> instance of the file or directory, or <c>null</c> on Exception when <paramref name="continueOnException"/> is <c>true</c>.</returns>
            <remarks>BasicSearch <see cref="F:Alphaleonis.Win32.Filesystem.NativeMethods.FINDEX_INFO_LEVELS.Basic"/> and LargeCache <see cref="F:Alphaleonis.Win32.Filesystem.NativeMethods.FindExAdditionalFlags.LargeFetch"/> are used by default, if possible.</remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <param name="isFolder">Specifies that <paramref name="path"/> is a file or directory.</param>
            <param name="transaction">The transaction.</param>
            <param name="path">The path to the file or directory.</param>
            <param name="continueOnException">
               <para><c>true</c> suppress any Exception that might be thrown as a result from a failure,</para>
               <para>such as ACLs protected directories or non-accessible reparse points.</para>
            </param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetLinkTargetInfo(System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Gets information about the target of a mount point or symbolic link on an NTFS file system.</summary>
            <param name="path">The path to the reparse point.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
            <returns>
              An instance of <see cref="T:Alphaleonis.Win32.Filesystem.LinkTargetInfo"/> or <see cref="T:Alphaleonis.Win32.Filesystem.SymbolicLinkTargetInfo"/> containing information about the symbolic link
              or mount point pointed to by <paramref name="path"/>.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetLinkTargetInfo(System.String)">
            <summary>[AlphaFS] Gets information about the target of a mount point or symbolic link on an NTFS file system.</summary>
            <param name="path">The path to the reparse point.</param>
            <returns>
              An instance of <see cref="T:Alphaleonis.Win32.Filesystem.LinkTargetInfo"/> or <see cref="T:Alphaleonis.Win32.Filesystem.SymbolicLinkTargetInfo"/> containing information about the symbolic link
              or mount point pointed to by <paramref name="path"/>.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetLinkTargetInfoTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Gets information about the target of a mount point or symbolic link on an NTFS file system.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The path to the reparse point.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
            <returns>
              An instance of <see cref="T:Alphaleonis.Win32.Filesystem.LinkTargetInfo"/> or <see cref="T:Alphaleonis.Win32.Filesystem.SymbolicLinkTargetInfo"/> containing information about the symbolic link
              or mount point pointed to by <paramref name="path"/>.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetLinkTargetInfoTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>[AlphaFS] Gets information about the target of a mount point or symbolic link on an NTFS file system.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The path to the reparse point.</param>
            <returns>
              An instance of <see cref="T:Alphaleonis.Win32.Filesystem.LinkTargetInfo"/> or <see cref="T:Alphaleonis.Win32.Filesystem.SymbolicLinkTargetInfo"/> containing information about the symbolic link
              or mount point pointed to by <paramref name="path"/>.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetLinkTargetInfoCore(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>Gets information about the target of a mount point or symbolic link on an NTFS file system.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The path to the reparse point.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
            <returns>
              An instance of <see cref="T:Alphaleonis.Win32.Filesystem.LinkTargetInfo"/> or <see cref="T:Alphaleonis.Win32.Filesystem.SymbolicLinkTargetInfo"/> containing information about the symbolic link
              or mount point pointed to by <paramref name="path"/>.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetSize(System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Retrieves the file size, in bytes to store a specified file.</summary>
            <param name="path">The path to the file.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
            <returns>The file size, in bytes.</returns>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetSize(System.String)">
            <summary>[AlphaFS] Retrieves the file size, in bytes to store a specified file.</summary>
            <param name="path">The path to the file.</param>
            <returns>The file size, in bytes.</returns>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetSize(Microsoft.Win32.SafeHandles.SafeFileHandle)">
            <summary>[AlphaFS] Retrieves the file size, in bytes to store a specified file.</summary>
            <param name="handle">The <see cref="T:Microsoft.Win32.SafeHandles.SafeFileHandle"/> to the file.</param>
            <returns>The file size, in bytes.</returns>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetSizeTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Retrieves the file size, in bytes to store a specified file.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The path to the file.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
            <returns>The number of bytes of disk storage used to store the specified file.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetSizeTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>[AlphaFS] Retrieves the file size, in bytes to store a specified file.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The path to the file.</param>
            <returns>The number of bytes of disk storage used to store the specified file.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.GetSizeCore(Alphaleonis.Win32.Filesystem.KernelTransaction,Microsoft.Win32.SafeHandles.SafeFileHandle,System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>Retrieves the file size, in bytes to store a specified file.</summary>
            <remarks>Use either <paramref name="path"/> or <paramref name="safeHandle"/>, not both.</remarks>
            <param name="transaction">The transaction.</param>
            <param name="safeHandle">The <see cref="T:Microsoft.Win32.SafeHandles.SafeFileHandle"/> to the file.</param>
            <param name="path">The path to the file.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
            <returns>The number of bytes of disk storage used to store the specified file.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.TransferTimestamps(System.String,System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Transfers the date and time stamps for the specified files.</summary>
            <remarks>This method does not change last access time for the source file.</remarks>
            <param name="sourcePath">The source file to get the date and time stamps from.</param>
            <param name="destinationPath">The destination file to set the date and time stamps.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.TransferTimestamps(System.String,System.String)">
            <summary>[AlphaFS] Transfers the date and time stamps for the specified files.</summary>
            <remarks>This method does not change last access time for the source file.</remarks>
            <param name="sourcePath">The source file to get the date and time stamps from.</param>
            <param name="destinationPath">The destination file to set the date and time stamps.</param>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.TransferTimestampsTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Transfers the date and time stamps for the specified files.</summary>
            <remarks>This method does not change last access time for the source file.</remarks>
            <param name="transaction">The transaction.</param>
            <param name="sourcePath">The source file to get the date and time stamps from.</param>
            <param name="destinationPath">The destination file to set the date and time stamps.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.TransferTimestampsTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String)">
            <summary>[AlphaFS] Transfers the date and time stamps for the specified files.</summary>
            <remarks>This method does not change last access time for the source file.</remarks>
            <param name="transaction">The transaction.</param>
            <param name="sourcePath">The source file to get the date and time stamps from.</param>
            <param name="destinationPath">The destination file to set the date and time stamps.</param>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.TransferTimestampsCore(System.Boolean,Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>Transfer the date and time stamps for the specified files and directories.</summary>
            <remarks>
              <para>This method does not change last access time for the source file.</para>
              <para>This method uses BackupSemantics flag to get Timestamp changed for directories.</para>
            </remarks>
            <param name="isFolder">Specifies that <paramref name="sourcePath"/> and <paramref name="destinationPath"/> are a file or directory.</param>
            <param name="transaction">The transaction.</param>
            <param name="sourcePath">The source path.</param>
            <param name="destinationPath">The destination path.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.OpenRead(System.String)">
            <summary>Opens an existing file for reading.</summary>
            <param name="path">The file to be opened for reading.</param>
            <returns>A read-only <see cref="T:System.IO.FileStream"/> on the specified path.</returns>
            <remarks>
              This method is equivalent to the <see cref="T:System.IO.FileStream"/>(string, FileMode, FileAccess, FileShare) constructor overload with a
              <see cref="T:System.IO.FileMode"/> value of Open, a <see cref="T:System.IO.FileAccess"/> value of Read and a <see cref="T:System.IO.FileShare"/> value of Read.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.OpenRead(System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Opens an existing file for reading.</summary>
            <param name="path">The file to be opened for reading.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
            <returns>A read-only <see cref="T:System.IO.FileStream"/> on the specified path.</returns>
            <remarks>
              This method is equivalent to the <see cref="T:System.IO.FileStream"/>(string, FileMode, FileAccess, FileShare) constructor overload with a
              <see cref="T:System.IO.FileMode"/> value of Open, a <see cref="T:System.IO.FileAccess"/> value of Read and a <see cref="T:System.IO.FileShare"/> value of Read.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.OpenReadTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>[AlphaFS] Opens an existing file for reading.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to be opened for reading.</param>
            <returns>A read-only <see cref="T:System.IO.FileStream"/> on the specified path.</returns>
            <remarks>
              This method is equivalent to the <see cref="T:System.IO.FileStream"/>(string, FileMode, FileAccess, FileShare) constructor overload with a
              <see cref="T:System.IO.FileMode"/> value of Open, a <see cref="T:System.IO.FileAccess"/> value of Read and a <see cref="T:System.IO.FileShare"/> value of Read.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.OpenReadTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Opens an existing file for reading.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to be opened for reading.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
            <returns>A read-only <see cref="T:System.IO.FileStream"/> on the specified path.</returns>
            <remarks>
              This method is equivalent to the <see cref="T:System.IO.FileStream"/>(string, FileMode, FileAccess, FileShare) constructor overload with a
              <see cref="T:System.IO.FileMode"/> value of Open, a <see cref="T:System.IO.FileAccess"/> value of Read and a <see cref="T:System.IO.FileShare"/> value of Read.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.OpenText(System.String)">
            <summary>Opens an existing UTF-8 encoded text file for reading.</summary>
            <param name="path">The file to be opened for reading.</param>
            <returns>A <see cref="T:System.IO.StreamReader"/> on the specified path.</returns>
            <remarks>This method is equivalent to the <see cref="T:System.IO.StreamReader"/>(String) constructor overload.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.OpenText(System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Opens an existing UTF-8 encoded text file for reading.</summary>
            <param name="path">The file to be opened for reading.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
            <returns>A <see cref="T:System.IO.StreamReader"/> on the specified path.</returns>
            <remarks>This method is equivalent to the <see cref="T:System.IO.StreamReader"/>(String) constructor overload.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.OpenText(System.String,System.Text.Encoding,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Opens an existing <see cref="T:System.Text.Encoding"/> encoded text file for reading.</summary>
            <param name="path">The file to be opened for reading.</param>
            <param name="encoding">The <see cref="T:System.Text.Encoding"/> applied to the contents of the file.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
            <returns>A <see cref="T:System.IO.StreamReader"/> on the specified path.</returns>
            <remarks>This method is equivalent to the <see cref="T:System.IO.StreamReader"/>(String) constructor overload.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.OpenText(System.String,System.Text.Encoding)">
            <summary>[AlphaFS] Opens an existing <see cref="T:System.Text.Encoding"/> encoded text file for reading.</summary>
            <param name="path">The file to be opened for reading.</param>
            <param name="encoding">The <see cref="T:System.Text.Encoding"/> applied to the contents of the file.</param>
            <returns>A <see cref="T:System.IO.StreamReader"/> on the specified path.</returns>
            <remarks>This method is equivalent to the <see cref="T:System.IO.StreamReader"/>(String) constructor overload.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.OpenTextTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>[AlphaFS] Opens an existing UTF-8 encoded text file for reading.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to be opened for reading.</param>
            <returns>A <see cref="T:System.IO.StreamReader"/> on the specified path.</returns>
            <remarks>This method is equivalent to the <see cref="T:System.IO.StreamReader"/>(String) constructor overload.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.OpenTextTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Opens an existing UTF-8 encoded text file for reading.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to be opened for reading.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
            <returns>A <see cref="T:System.IO.StreamReader"/> on the specified path.</returns>
            <remarks>This method is equivalent to the <see cref="T:System.IO.StreamReader"/>(String) constructor overload.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.OpenTextTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Text.Encoding,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Opens an existing <see cref="T:System.Text.Encoding"/> encoded text file for reading.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to be opened for reading.</param>
            <param name="encoding">The <see cref="T:System.Text.Encoding"/> applied to the contents of the file.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
            <returns>A <see cref="T:System.IO.StreamReader"/> on the specified path.</returns>
            <remarks>This method is equivalent to the <see cref="T:System.IO.StreamReader"/>(String) constructor overload.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.OpenTextTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Text.Encoding)">
            <summary>[AlphaFS] Opens an existing <see cref="T:System.Text.Encoding"/> encoded text file for reading.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to be opened for reading.</param>
            <param name="encoding">The <see cref="T:System.Text.Encoding"/> applied to the contents of the file.</param>
            <returns>A <see cref="T:System.IO.StreamReader"/> on the specified path.</returns>
            <remarks>This method is equivalent to the <see cref="T:System.IO.StreamReader"/>(String) constructor overload.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.OpenWrite(System.String)">
            <summary>Opens an existing file or creates a new file for writing.</summary>
            <param name="path">The file to be opened for writing.</param>
            <returns>An unshared <see cref="T:System.IO.FileStream"/> object on the specified path with <see cref="F:System.IO.FileAccess.Write"/> access.</returns>
            <remarks>This method is equivalent to the <see cref="T:System.IO.FileStream"/>(String, FileMode, FileAccess, FileShare) constructor overload with file mode set to OpenOrCreate, the access set to Write, and the share mode set to None.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.OpenWrite(System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Opens an existing file or creates a new file for writing.</summary>
            <param name="path">The file to be opened for writing.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
            <returns>An unshared <see cref="T:System.IO.FileStream"/> object on the specified path with <see cref="F:System.IO.FileAccess.Write"/> access.</returns>
            <remarks>This method is equivalent to the <see cref="T:System.IO.FileStream"/>(String, FileMode, FileAccess, FileShare) constructor overload with file mode set to OpenOrCreate, the access set to Write, and the share mode set to None.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.OpenWriteTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>[AlphaFS] Opens an existing file or creates a new file for writing.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to be opened for writing.</param>
            <returns>An unshared <see cref="T:System.IO.FileStream"/> object on the specified path with <see cref="F:System.IO.FileAccess.Write"/> access.</returns>
            <remarks>This method is equivalent to the <see cref="T:System.IO.FileStream"/>(String, FileMode, FileAccess, FileShare) constructor overload with file mode set to OpenOrCreate, the access set to Write, and the share mode set to None.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.OpenWriteTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Opens an existing file or creates a new file for writing.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file to be opened for writing.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
            <returns>An unshared <see cref="T:System.IO.FileStream"/> object on the specified path with <see cref="F:System.IO.FileAccess.Write"/> access.</returns>
            <remarks>This method is equivalent to the <see cref="T:System.IO.FileStream"/>(String, FileMode, FileAccess, FileShare) constructor overload with file mode set to OpenOrCreate, the access set to Write, and the share mode set to None.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.OpenBackupRead(System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Opens the specified file for reading purposes bypassing security attributes.</summary>
            <param name="path">The file path to open.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
            <returns>A <see cref="T:System.IO.FileStream"/> on the specified path, having the read-only mode and sharing options.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.OpenBackupRead(System.String)">
            <summary>[AlphaFS] Opens the specified file for reading purposes bypassing security attributes. This method is simpler to use then BackupFileStream to read only file's data stream.</summary>
            <param name="path">The file path to open.</param>
            <returns>A <see cref="T:System.IO.FileStream"/> on the specified path, having the read-only mode and sharing options.</returns>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.OpenBackupReadTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Opens the specified file for reading purposes bypassing security attributes.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file path to open.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
            <returns>A <see cref="T:System.IO.FileStream"/> on the specified path, having the read-only mode and sharing options.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.File.OpenBackupReadTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>[AlphaFS] Opens the specified file for reading purposes bypassing security attributes.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">The file path to open.</param>
            <returns>A <see cref="T:System.IO.FileStream"/> on the specified path, having the read-only mode and sharing options.</returns>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.DeviceInfo">
            <summary>Provides access to information of a device, on a local or remote host.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DeviceInfo.#ctor">
            <summary>Initializes a DeviceInfo class.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DeviceInfo.#ctor(System.String)">
            <summary>Initializes a DeviceInfo class.</summary>
            <param name="host">The DNS or NetBIOS name of the remote server. <see langword="null"/> refers to the local host.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DeviceInfo.EnumerateDevices(Alphaleonis.Win32.Filesystem.DeviceGuid)">
            <summary>Enumerates all available devices on the local host.</summary>
            <param name="deviceGuid">One of the <see cref="T:Alphaleonis.Win32.Filesystem.DeviceGuid"/> devices.</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/> instances of type <see cref="T:Alphaleonis.Win32.Filesystem.DeviceGuid"/> from the local host.</returns>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DeviceInfo.BaseContainerId">
            <summary>Represents the <see cref="T:System.Guid"/> value of the base container identifier (ID) .The Windows Plug and Play (PnP) manager assigns this value to the device node (devnode).</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DeviceInfo.Class">
            <summary>Represents the name of the device setup class that a device instance belongs to.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DeviceInfo.ClassGuid">
            <summary>Represents the <see cref="T:System.Guid"/> of the device setup class that a device instance belongs to.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DeviceInfo.CompatibleIds">
            <summary>Represents the list of compatible identifiers for a device instance.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DeviceInfo.DeviceDescription">
            <summary>Represents a description of a device instance.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DeviceInfo.DevicePath">
            <summary>The device interface path.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DeviceInfo.Driver">
            <summary>Represents the registry entry name of the driver key for a device instance.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DeviceInfo.EnumeratorName">
            <summary>Represents the name of the enumerator for a device instance.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DeviceInfo.FriendlyName">
            <summary>Represents the friendly name of a device instance.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DeviceInfo.HardwareId">
            <summary>Represents the list of hardware identifiers for a device instance.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DeviceInfo.HostName">
            <summary>The host name that was passed to the class constructor.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DeviceInfo.InstanceId">
            <summary>Gets the instance Id of the device.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DeviceInfo.LocationInformation">
            <summary>Represents the bus-specific physical location of a device instance.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DeviceInfo.LocationPaths">
            <summary>Represents the location of a device instance in the device tree.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DeviceInfo.Manufacturer">
            <summary>Represents the name of the manufacturer of a device instance.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DeviceInfo.PhysicalDeviceObjectName">
            <summary>Encapsulates the physical device location information provided by a device's firmware to Windows.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DeviceInfo.Service">
            <summary>Represents the name of the service that is installed for a device instance.</summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.DiskSpaceInfo">
            <summary>Retrieves information about the amount of space that is available on a disk volume, which is the total amount of space,
            the total amount of free space, and the total amount of free space available to the user that is associated with the calling thread.
            <para>This class cannot be inherited.</para>
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DiskSpaceInfo.#ctor(System.String)">
            <summary>Initializes a DiskSpaceInfo instance.</summary>
            <param name="drivePath">A valid drive path or drive letter. This can be either uppercase or lowercase, 'a' to 'z' or a network share in the format: \\server\share</param>
            <Remark>This is a Lazyloading object; call <see cref="M:Alphaleonis.Win32.Filesystem.DiskSpaceInfo.Refresh"/> to populate all properties first before accessing.</Remark>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DiskSpaceInfo.#ctor(System.String,System.Nullable{System.Boolean},System.Boolean,System.Boolean)">
            <summary>Initializes a DiskSpaceInfo instance.</summary>
            <param name="drivePath">A valid drive path or drive letter. This can be either uppercase or lowercase, 'a' to 'z' or a network share in the format: \\server\share</param>
            <param name="spaceInfoType"><see langword="null"/> gets both size- and disk cluster information. <see langword="true"/> Get only disk cluster information, <see langword="false"/> Get only size information.</param>
            <param name="refresh">Refreshes the state of the object.</param>
            <param name="continueOnException"><see langword="true"/> suppress any Exception that might be thrown as a result from a failure, such as unavailable resources.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DiskSpaceInfo.Refresh">
            <summary>Refreshes the state of the object.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DiskSpaceInfo.Reset">
            <summary>Initializes all <see ref="Alphaleonis.Win32.Filesystem.DiskSpaceInfo"/> properties to 0.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DiskSpaceInfo.ToString">
            <summary>Returns the drive name.</summary>
            <returns>A string that represents this object.</returns>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DiskSpaceInfo.AvailableFreeSpacePercent">
            <summary>Indicates the amount of available free space on a drive, formatted as percentage.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DiskSpaceInfo.AvailableFreeSpaceUnitSize">
            <summary>Indicates the amount of available free space on a drive, formatted as a unit size.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DiskSpaceInfo.ClusterSize">
            <summary>Returns the Clusters size.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DiskSpaceInfo.DriveName">
            <summary>Gets the name of a drive.</summary>
            <returns>The name of the drive.</returns>
            <remarks>This property is the name assigned to the drive, such as C:\ or E:\</remarks>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DiskSpaceInfo.TotalSizeUnitSize">
            <summary>The total number of bytes on a disk that are available to the user who is associated with the calling thread, formatted as a unit size.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DiskSpaceInfo.UsedSpacePercent">
            <summary>Indicates the amount of used space on a drive, formatted as percentage.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DiskSpaceInfo.UsedSpaceUnitSize">
            <summary>Indicates the amount of used space on a drive, formatted as a unit size.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DiskSpaceInfo.FreeBytesAvailable">
            <summary>The total number of free bytes on a disk that are available to the user who is associated with the calling thread.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DiskSpaceInfo.TotalNumberOfBytes">
            <summary>The total number of bytes on a disk that are available to the user who is associated with the calling thread.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DiskSpaceInfo.TotalNumberOfFreeBytes">
            <summary>The total number of free bytes on a disk.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DiskSpaceInfo.BytesPerSector">
            <summary>The number of bytes per sector.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DiskSpaceInfo.NumberOfFreeClusters">
            <summary>The total number of free clusters on the disk that are available to the user who is associated with the calling thread.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DiskSpaceInfo.SectorsPerCluster">
            <summary>The number of sectors per cluster.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DiskSpaceInfo.TotalNumberOfClusters">
            <summary>The total number of clusters on the disk that are available to the user who is associated with the calling thread.
            If per-user disk quotas are in use, this value may be less than the total number of clusters on the disk.
            </summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.DriveInfo">
            <summary>Provides access to information on a local or remote drive.</summary>
            <remarks>
            This class models a drive and provides methods and properties to query for drive information.
            Use DriveInfo to determine what drives are available, and what type of drives they are.
            You can also query to determine the capacity and available free space on the drive.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DriveInfo.#ctor(System.String)">
            <summary>Provides access to information on the specified drive.</summary>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentException"/>
            <param name="driveName">
              A valid drive path or drive letter.
              <para>This can be either uppercase or lowercase,</para>
              <para>'a' to 'z' or a network share in the format: \\server\share</para>
            </param>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DriveInfo.AvailableFreeSpace">
            <summary>Indicates the amount of available free space on a drive.</summary>
            <returns>The amount of free space available on the drive, in bytes.</returns>
            <remarks>This property indicates the amount of free space available on the drive. Note that this number may be different from the <see cref="P:Alphaleonis.Win32.Filesystem.DriveInfo.TotalFreeSpace"/> number because this property takes into account disk quotas.</remarks>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DriveInfo.DriveFormat">
            <summary>Gets the name of the file system, such as NTFS or FAT32.</summary>
            <remarks>Use DriveFormat to determine what formatting a drive uses.</remarks>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DriveInfo.DriveType">
            <summary>Gets the drive type.</summary>
            <returns>One of the <see cref="T:System.IO.DriveType"/> values.</returns>
            <remarks>
            The DriveType property indicates whether a drive is any of: CDRom, Fixed, Unknown, Network, NoRootDirectory,
            Ram, Removable, or Unknown. Values are listed in the <see cref="T:System.IO.DriveType"/> enumeration.
            </remarks>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DriveInfo.IsReady">
            <summary>Gets a value indicating whether a drive is ready.</summary>
            <returns><see langword="true"/> if the drive is ready; otherwise, <see langword="false"/>.</returns>
            <remarks>
            IsReady indicates whether a drive is ready. For example, it indicates whether a CD is in a CD drive or whether
            a removable storage device is ready for read/write operations. If you do not test whether a drive is ready, and
            it is not ready, querying the drive using DriveInfo will raise an IOException.
            
            Do not rely on IsReady() to avoid catching exceptions from other members such as TotalSize, TotalFreeSpace, and DriveFormat.
            Between the time that your code checks IsReady and then accesses one of the other properties
            (even if the access occurs immediately after the check), a drive may have been disconnected or a disk may have been removed.
            </remarks>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DriveInfo.Name">
            <summary>Gets the name of the drive.</summary>
            <returns>The name of the drive.</returns>
            <remarks>This property is the name assigned to the drive, such as C:\ or E:\</remarks>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DriveInfo.RootDirectory">
            <summary>Gets the root directory of a drive.</summary>
            <returns>A DirectoryInfo object that contains the root directory of the drive.</returns>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DriveInfo.TotalFreeSpace">
            <summary>Gets the total amount of free space available on a drive.</summary>
            <returns>The total free space available on a drive, in bytes.</returns>
            <remarks>This property indicates the total amount of free space available on the drive, not just what is available to the current user.</remarks>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DriveInfo.TotalSize">
            <summary>Gets the total size of storage space on a drive.</summary>
            <returns>The total size of the drive, in bytes.</returns>
            <remarks>This property indicates the total size of the drive in bytes, not just what is available to the current user.</remarks>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DriveInfo.VolumeLabel">
            <summary>Gets or sets the volume label of a drive.</summary>
            <returns>The volume label.</returns>
            <remarks>
            The label length is determined by the operating system. For example, NTFS allows a volume label
            to be up to 32 characters long. Note that <see langword="null"/> is a valid VolumeLabel.
            </remarks>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DriveInfo.DiskSpaceInfo">
            <summary>[AlphaFS] Returns the <see ref="Alphaleonis.Win32.Filesystem.DiskSpaceInfo"/> instance.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DriveInfo.DosDeviceName">
            <summary>[AlphaFS] The MS-DOS device name.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DriveInfo.IsDosDeviceSubstitute">
            <summary>[AlphaFS] Indicates if this drive is a SUBST.EXE / DefineDosDevice drive mapping.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DriveInfo.IsUnc">
            <summary>[AlphaFS] Indicates if this drive is a UNC path.</summary>
            <remarks>Only retrieve this information if we're dealing with a real network share mapping: http://alphafs.codeplex.com/discussions/316583</remarks>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DriveInfo.IsVolume">
            <summary>[AlphaFS] Determines whether the specified volume name is a defined volume on the current computer.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.DriveInfo.VolumeInfo">
            <summary>[AlphaFS] Contains information about a file-system volume.</summary>
            <returns>A VolumeInfo object that contains file-system volume information of the drive.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DriveInfo.GetDrives">
            <summary>Retrieves the drive names of all logical drives on a computer.</summary>
            <returns>An array of type <see cref="T:Alphaleonis.Win32.Filesystem.DriveInfo"/> that represents the logical drives on a computer.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DriveInfo.ToString">
            <summary>Returns a drive name as a string.</summary>
            <returns>The name of the drive.</returns>
            <remarks>This method returns the Name property.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DriveInfo.EnumerateDrives(System.Boolean,System.Boolean)">
            <summary>[AlphaFS] Enumerates the drive names of all logical drives on a computer.</summary>
            <param name="fromEnvironment">Retrieve logical drives as known by the Environment.</param>
            <param name="isReady">Retrieve only when accessible (IsReady) logical drives.</param>
            <returns>
              An IEnumerable of type <see cref="T:Alphaleonis.Win32.Filesystem.DriveInfo"/> that represents
              the logical drives on a computer.
            </returns>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DriveInfo.GetFreeDriveLetter">
            <summary>[AlphaFS] Gets the first available drive letter on the local system.</summary>
            <returns>A drive letter as <see cref="T:System.Char"/>. When no drive letters are available, an exception is thrown.</returns>
            <remarks>The letters "A" and "B" are reserved for floppy drives and will never be returned by this function.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DriveInfo.GetFreeDriveLetter(System.Boolean)">
            <summary>Gets an available drive letter on the local system.</summary>
            <param name="getLastAvailable">When <see langword="true"/> get the last available drive letter. When <see langword="false"/> gets the first available drive letter.</param>
            <returns>A drive letter as <see cref="T:System.Char"/>. When no drive letters are available, an exception is thrown.</returns>
            <remarks>The letters "A" and "B" are reserved for floppy drives and will never be returned by this function.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.DriveInfo.GetDeviceInfo(System.Int32,System.Int32)">
            <summary>Retrieves information about the file system and volume associated with the specified root file or directorystream.</summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.CopyMoveProgressResult">
            <summary>Used by CopyFileXxx and MoveFileXxx. The <see cref="T:Alphaleonis.Win32.Filesystem.CopyMoveProgressRoutine"/> function should return one of the following values.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.CopyMoveProgressResult.Continue">
            <summary>PROGRESS_CONTINUE
            <para>Continue the copy operation.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.CopyMoveProgressResult.Cancel">
            <summary>PROGRESS_CANCEL
            <para>Cancel the copy operation and delete the destination file.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.CopyMoveProgressResult.Stop">
            <summary>PROGRESS_STOP
            <para>Stop the copy operation. It can be restarted at a later time.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.CopyMoveProgressResult.Quiet">
            <summary>PROGRESS_QUIET
            <para>Continue the copy operation, but stop invoking <see cref="T:Alphaleonis.Win32.Filesystem.CopyMoveProgressRoutine"/> to report progress.</para>
            </summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions">
            <summary>[AlphaFS] Directory enumeration options, flags that specify how a directory is to be enumerated.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions.None">
            <summary>None (do not use).</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions.Files">
            <summary>Enumerate files only.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions.Folders">
            <summary>Enumerate directories only.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions.FilesAndFolders">
            <summary>Enumerate files and directories.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions.AsLongPath">
            <summary>Return full path as long full path (Unicode format), only valid when return type is <see cref="T:System.String"/>.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions.SkipReparsePoints">
            <summary>Skip reparse points during directory enumeration.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions.ContinueOnException">
            <summary>Suppress any Exception that might be thrown as a result from a failure, such as ACLs protected directories or non-accessible reparse points.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions.Recursive">
            <summary>Specifies whether to search the current directory, or the current directory and all subdirectories.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions.BasicSearch">
            <summary>Enumerates the directory without querying the short file name, improving overall enumeration speed.</summary>
            <remarks>This option is enabled by default if supported. This value is not supported until Windows Server 2008 R2 and Windows 7.</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions.LargeCache">
            <summary>Enumerates the directory using a larger buffer for directory queries, which can increase performance of the find operation.</summary>
            <remarks>This option is enabled by default if supported. This value is not supported until Windows Server 2008 R2 and Windows 7.</remarks>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.DeviceGuid">
            <summary>System-Defined Device Interface Classes</summary>
            <remarks>http://msdn.microsoft.com/en-us/library/windows/hardware/ff541389%28v=vs.85%29.aspx</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.DeviceGuid.Bus1394">
            <summary>The BUS1394_CLASS_GUID device interface class is defined for 1394 bus devices.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.DeviceGuid.Guid61883">
            <summary>The GUID_61883_CLASS device interface class is defined for devices in the 61883 device setup class.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.DeviceGuid.ApplicationLaunchButton">
            <summary>The GUID_DEVICE_APPLICATIONLAUNCH_BUTTON device interface class is defined for Advanced Configuration and Power Interface (ACPI) application start buttons.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.DeviceGuid.Battery">
            <summary>The GUID_DEVICE_BATTERY device interface class is defined for battery devices.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.DeviceGuid.Lid">
            <summary>The GUID_DEVICE_LID device interface class is defined for Advanced Configuration and Power Interface (ACPI) lid devices.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.DeviceGuid.Memory">
            <summary>The GUID_DEVICE_MEMORY device interface class is defined for Advanced Configuration and Power Interface (ACPI) memory devices.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.DeviceGuid.MessageIndicator">
            <summary>The GUID_DEVICE_MESSAGE_INDICATOR device interface class is defined for Advanced Configuration and Power Interface (ACPI) message indicator devices.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.DeviceGuid.Processor">
            <summary>The GUID_DEVICE_PROCESSOR device interface class is defined for Advanced Configuration and Power Interface (ACPI) processor devices.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.DeviceGuid.SysButton">
            <summary>The GUID_DEVICE_SYS_BUTTON device interface classis defined for Advanced Configuration and Power Interface (ACPI) system power button devices.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.DeviceGuid.ThermalZone">
            <summary>The GUID_DEVICE_THERMAL_ZONE device interface class is defined for Advanced Configuration and Power Interface (ACPI) thermal zone devices.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.DeviceGuid.Bluetooth">
            <summary>The GUID_BTHPORT_DEVICE_INTERFACE device interface class is defined for Bluetooth radios.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.DeviceGuid.Brightness">
            <summary>The GUID_DEVINTERFACE_BRIGHTNESS device interface class is defined for display adapter drivers that operate in the context of the Windows Vista Display Driver Model and support brightness control of monitor child devices.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.DeviceGuid.DisplayAdapter">
            <summary>The GUID_DEVINTERFACE_DISPLAY_ADAPTER device interface class is defined for display views that are supported by display adapters.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.DeviceGuid.I2C">
            <summary>The GUID_DEVINTERFACE_I2C device interface class is defined for display adapter drivers that operate in the context of the Windows Vista Display Driver Model and perform I2C transactions with monitor child devices.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.DeviceGuid.StillImage">
            <summary>The GUID_DEVINTERFACE_IMAGE device interface class is defined for WIA devices and Still Image (STI) devices, including digital cameras and scanners.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.DeviceGuid.Monitor">
            <summary>The GUID_DEVINTERFACE_MONITOR device interface class is defined for monitor devices.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.DeviceGuid.OutputProtectionManagement">
            <summary>The GUID_DEVINTERFACE_OPM device interface class is defined for display adapter drivers that operate in the context of the Windows Vista Display Driver Model and support output protection management (OPM) for monitor child devices.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.DeviceGuid.VideoOutputArrival">
            <summary>The GUID_DEVINTERFACE_VIDEO_OUTPUT_ARRIVAL device interface class is defined for child devices of display devices.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.DeviceGuid.DisplayDeviceArrival">
            <summary>The GUID_DISPLAY_DEVICE_ARRIVAL device interface class is defined for display adapters.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.DeviceGuid.Hid">
            <summary>The GUID_DEVINTERFACE_HID device interface class is defined for HID collections.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.DeviceGuid.Keyboard">
            <summary>The GUID_DEVINTERFACE_KEYBOARD device interface class is defined for keyboard devices.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.DeviceGuid.Mouse">
            <summary>The GUID_DEVINTERFACE_MOUSE device interface class is defined for mouse devices.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.DeviceGuid.Modem">
            <summary>The GUID_DEVINTERFACE_MODEM device interface class is defined for modem devices.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.DeviceGuid.Network">
            <summary>The GUID_DEVINTERFACE_NET device interface class is defined for network devices.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.DeviceGuid.ComPort">
            <summary>The GUID_DEVINTERFACE_COMPORT device interface class is defined for COM ports.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.DeviceGuid.Parallel">
            <summary>The GUID_DEVINTERFACE_PARALLEL device interface class is defined for parallel ports that support an IEEE 1284-compatible hardware interface.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.DeviceGuid.ParallelClass">
            <summary>The GUID_DEVINTERFACE_PARCLASS device interface class is defined for devices that are attached to a parallel port.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.DeviceGuid.SerialEnumBusEnumerator">
            <summary>The GUID_DEVINTERFACE_SERENUM_BUS_ENUMERATOR device interface class is defined for Plug and Play (PnP) serial ports.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.DeviceGuid.CdromChanger">
            <summary>The GUID_DEVINTERFACE_CDCHANGER device interface class is defined for CD-ROM changer devices.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.DeviceGuid.Cdrom">
            <summary>The GUID_DEVINTERFACE_CDROM device interface class is defined for CD-ROM storage devices.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.DeviceGuid.Disk">
            <summary>The GUID_DEVINTERFACE_DISK device interface class is defined for hard disk storage devices.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.DeviceGuid.Floppy">
            <summary>The GUID_DEVINTERFACE_FLOPPY device interface class is defined for floppy disk storage devices.</summary> 
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.DeviceGuid.MediumChanger">
            <summary>The GUID_DEVINTERFACE_MEDIUMCHANGER device interface class is defined for medium changer devices.</summary> 
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.DeviceGuid.Partition">
            <summary>The GUID_DEVINTERFACE_PARTITION device interface class is defined for partition devices.</summary> 
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.DeviceGuid.StoragePort">
            <summary>The GUID_DEVINTERFACE_STORAGEPORT device interface class is defined for storage port devices.</summary> 
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.DeviceGuid.Tape">
            <summary>The GUID_DEVINTERFACE_TAPE device interface class is defined for tape storage devices.</summary> 
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.DeviceGuid.Volume">
            <summary>The GUID_DEVINTERFACE_VOLUME device interface class is defined for volume devices.</summary> 
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.DeviceGuid.WriteOnceDisk">
            <summary>The GUID_DEVINTERFACE_WRITEONCEDISK device interface class is defined for write-once disk devices.</summary> 
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.DeviceGuid.UsbDevice">
            <summary>The GUID_DEVINTERFACE_USB_DEVICE device interface class is defined for USB devices that are attached to a USB hub.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.DeviceGuid.UsbHostController">
            <summary>The GUID_DEVINTERFACE_USB_HOST_CONTROLLER device interface class is defined for USB host controller devices.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.DeviceGuid.UsbHub">
            <summary>The GUID_DEVINTERFACE_USB_HUB device interface class is defined for USB hub devices.</summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.DosDeviceAttributes">
            <summary>Defines the controllable aspects of the Volume.DefineDosDevice() method.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.DosDeviceAttributes.None">
            <summary>DDD_EXACT_MATCH_ON_REMOVE
            <para>Default.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.DosDeviceAttributes.RawTargetPath">
            <summary>DDD_RAW_TARGET_PATH
            <para>Uses the targetPath string as is. Otherwise, it is converted from an MS-DOS path to a path.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.DosDeviceAttributes.RemoveDefinition">
            <summary>DDD_REMOVE_DEFINITION
            <para>Removes the specified definition for the specified device.</para>
            <para>To determine which definition to remove, the function walks the list of mappings for the device, looking for a match of targetPath against a prefix of each mapping associated with this device.</para>
            <para>The first mapping that matches is the one removed, and then the function returns.</para>
            <para>If targetPath is null or a pointer to a null string, the function will remove the first mapping associated with the device and pop the most recent one pushed.If there is nothing left to pop, the device name will be removed.</para>
            <para>If this value is not specified, the string pointed to by the targetPath parameter will become the new mapping for this device.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.DosDeviceAttributes.ExactMatchOnRemove">
            <summary>DDD_EXACT_MATCH_ON_REMOVE
            <para>If this value is specified along with <see cref="F:Alphaleonis.Win32.Filesystem.DosDeviceAttributes.RemoveDefinition"/>, the function will use an exact match to determine which mapping to remove.</para>
            <para>Use this value to ensure that you do not delete something that you did not define.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.DosDeviceAttributes.NoBroadcastSystem">
            <summary>DDD_NO_BROADCAST_SYSTEM
            <para>Do not broadcast the WM_SETTINGCHANGE message.</para>
            <para>By default, this message is broadcast to notify the shell and applications of the change.</para>
            </summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.FinalPathFormats">
            <summary>Determines the format to convert a path to using <see cref="M:Alphaleonis.Win32.Filesystem.Path.GetFinalPathNameByHandle(Microsoft.Win32.SafeHandles.SafeFileHandle)"/></summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FinalPathFormats.None">
            <summary>(FileNameNormalized / VolumeNameDos) Return the normalized drive name. This is the default.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FinalPathFormats.VolumeNameGuid">
            <summary>Return the path with a volume GUID path instead of the drive name.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FinalPathFormats.VolumeNameNT">
            <summary>Return the path with the volume device path.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FinalPathFormats.VolumeNameNone">
            <summary>Return the path with no drive information.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FinalPathFormats.FileNameOpened">
            <summary>Return the opened file name (not normalized).</summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.ReparsePointTag">
            <summary>Enumeration specifying the different reparse point tags.</summary>
            <remarks>
              <para>Reparse tags, with the exception of IO_REPARSE_TAG_SYMLINK, are processed on the server and are not processed by a client after transmission over the wire.</para>
              <para>Clients should treat associated reparse data as opaque data.</para>
            </remarks>   
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.ReparsePointTag.None">
            <summary>The entry is not a reparse point.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.ReparsePointTag.AppXStream">
            <summary>IO_REPARSE_APPXSTREAM</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.ReparsePointTag.Csv">
            <summary>IO_REPARSE_TAG_CSV</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.ReparsePointTag.DriverExtender">
            <summary>IO_REPARSE_TAG_DRIVER_EXTENDER
            <para>Used by Home server drive extender.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.ReparsePointTag.Dedup">
            <summary>IO_REPARSE_TAG_DEDUP</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.ReparsePointTag.Dfs">
            <summary>IO_REPARSE_TAG_DFS
            <para>Used by the DFS filter.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.ReparsePointTag.Dfsr">
            <summary>IO_REPARSE_TAG_DFSR
            <para>Used by the DFS filter.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.ReparsePointTag.FilterManager">
            <summary>IO_REPARSE_TAG_FILTER_MANAGER
            <para>Used by filter manager test harness.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.ReparsePointTag.Hsm">
            <summary>IO_REPARSE_TAG_HSM
            <para>(Obsolete) Used by legacy Hierarchical Storage Manager Product.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.ReparsePointTag.Hsm2">
            <summary>IO_REPARSE_TAG_HSM2
            <para>(Obsolete) Used by legacy Hierarchical Storage Manager Product.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.ReparsePointTag.Nfs">
            <summary>IO_REPARSE_TAG_NFS
            <para>NFS symlinks, Windows 8 / SMB3 and later.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.ReparsePointTag.MountPoint">
            <summary>IO_REPARSE_TAG_MOUNT_POINT
            <para>Used for mount point support.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.ReparsePointTag.Sis">
            <summary>IO_REPARSE_TAG_SIS
            <para>Used by single-instance storage (SIS) filter driver.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.ReparsePointTag.SymLink">
            <summary>IO_REPARSE_TAG_SYMLINK
            <para>Used for symbolic link support.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.ReparsePointTag.Wim">
            <summary>IO_REPARSE_TAG_WIM</summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.StreamAttributes">
            <summary>WIN32_STREAM_ID Attributes of data to facilitate cross-operating system transfer.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.StreamAttributes.None">
            <summary>STREAM_NORMAL_ATTRIBUTE
            <para>This backup stream has no special attributes.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.StreamAttributes.ModifiedWhenRead">
            <summary>STREAM_MODIFIED_WHEN_READ
            <para>Attribute set if the stream contains data that is modified when read.</para>
            <para>Allows the backup application to know that verification of data will fail.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.StreamAttributes.ContainsSecurity">
            <summary>STREAM_CONTAINS_SECURITY
            <para>The backup stream contains security information.</para>
            <para>This attribute applies only to backup stream of type <see cref="F:Alphaleonis.Win32.Filesystem.BackupStreamType.SecurityData"/>.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.StreamAttributes.ContainsProperties">
            <summary>Reserved.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.StreamAttributes.Sparse">
            <summary>STREAM_SPARSE_ATTRIBUTE
            <para>The backup stream is part of a sparse file stream.</para>
            <para>This attribute applies only to backup stream of type <see cref="F:Alphaleonis.Win32.Filesystem.BackupStreamType.Data"/>, <see cref="F:Alphaleonis.Win32.Filesystem.BackupStreamType.AlternateData"/>, and <see cref="F:Alphaleonis.Win32.Filesystem.BackupStreamType.SparseBlock"/>.</para>
            </summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.BackupStreamType">
            <summary>The type of the data contained in the backup stream.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.BackupStreamType.None">
            <summary>This indicates an error.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.BackupStreamType.Data">
            <summary>BACKUP_DATA
            <para>Standard data. This corresponds to the NTFS $DATA stream type on the default (unnamed) data stream.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.BackupStreamType.ExtendedAttributesData">
            <summary>BACKUP_EA_DATA
            <para>Extended attribute data. This corresponds to the NTFS $EA stream type.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.BackupStreamType.SecurityData">
            <summary>BACKUP_SECURITY_DATA
            <para>Security descriptor data.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.BackupStreamType.AlternateData">
            <summary>BACKUP_ALTERNATE_DATA
            <para>Alternative data streams. This corresponds to the NTFS $DATA stream type on a named data stream.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.BackupStreamType.Link">
            <summary>BACKUP_LINK
            <para>Hard link information. This corresponds to the NTFS $FILE_NAME stream type.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.BackupStreamType.PropertyData">
            <summary>BACKUP_PROPERTY_DATA
            <para>Property data.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.BackupStreamType.ObjectId">
            <summary>BACKUP_OBJECT_ID
            <para>Objects identifiers. This corresponds to the NTFS $OBJECT_ID stream type.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.BackupStreamType.ReparseData">
            <summary>BACKUP_REPARSE_DATA
            <para>Reparse points. This corresponds to the NTFS $REPARSE_POINT stream type.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.BackupStreamType.SparseBlock">
            <summary>BACKUP_SPARSE_BLOCK
            <para>Sparse file. This corresponds to the NTFS $DATA stream type for a sparse file.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.BackupStreamType.TxfsData">
            <summary>BACKUP_TXFS_DATA
            <para>Transactional NTFS (TxF) data stream.</para>
            </summary>
            <remarks>Windows Server 2003 and Windows XP:  This value is not supported.</remarks>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.CopyOptions">
            <summary>Flags that specify how a file or directory is to be copied.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.CopyOptions.None">
            <summary>No CopyOptions used, this allows overwriting the file.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.CopyOptions.FailIfExists">
            <summary>COPY_FILE_FAIL_IF_EXISTS
            <para>The copy operation fails immediately if the target file already exists.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.CopyOptions.Restartable">
            <summary>COPY_FILE_RESTARTABLE
            <para>
            Progress of the copy is tracked in the target file in case the copy fails. The failed copy can be restarted at a later time by specifying the same values
            forexisting file name and new file name as those used in the call that failed. This can significantly slow down the copy operation as the new file may be
            flushed multiple times during the copy operation.
            </para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.CopyOptions.OpenSourceForWrite">
            <summary>COPY_FILE_OPEN_SOURCE_FOR_WRITE
            <para>The file is copied and the original file is opened for write access.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.CopyOptions.AllowDecryptedDestination">
            <summary>COPY_FILE_ALLOW_DECRYPTED_DESTINATION
            <para>An attempt to copy an encrypted file will succeed even if the destination copy cannot be encrypted.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.CopyOptions.CopySymbolicLink">
            <summary>COPY_FILE_COPY_SYMLINK
            <para>If the source file is a symbolic link, the destination file is also a symbolic link pointing to the same file that the source symbolic link is pointing to.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.CopyOptions.NoBuffering">
            <summary>COPY_FILE_NO_BUFFERING
            <para>The copy operation is performed using unbuffered I/O, bypassing system I/O cache resources. Recommended for very large file transfers.</para>
            </summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.CopyMoveProgressCallbackReason">
            <summary>Used by CopyFileXxx and MoveFileXxx. The reason that <see cref="T:Alphaleonis.Win32.Filesystem.CopyMoveProgressRoutine"/> was called.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.CopyMoveProgressCallbackReason.ChunkFinished">
            <summary>CALLBACK_CHUNK_FINISHED
            <para>Another part of the data file was copied.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.CopyMoveProgressCallbackReason.StreamSwitch">
            <summary>CALLBACK_STREAM_SWITCH
            <para>Another stream was created and is about to be copied. This is the callback reason given when the callback routine is first invoked.</para>
            </summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.Device">
            <summary>Provides static methods to retrieve device resource information from a local or remote host.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Device.EnumerateDevices(Alphaleonis.Win32.Filesystem.DeviceGuid)">
            <summary>Enumerates all available devices on the local host.</summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/> instances of type <see cref="T:Alphaleonis.Win32.Filesystem.DeviceGuid"/> from the local host.</returns>
            <param name="deviceGuid">One of the <see cref="T:Alphaleonis.Win32.Filesystem.DeviceGuid"/> devices.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Device.EnumerateDevices(System.String,Alphaleonis.Win32.Filesystem.DeviceGuid)">
            <summary>Enumerates all available devices of type <see cref="T:Alphaleonis.Win32.Filesystem.DeviceGuid"/> on the local or remote host.</summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/> instances of type <see cref="T:Alphaleonis.Win32.Filesystem.DeviceGuid"/> for the specified <paramref name="hostName"/>.</returns>
            <param name="hostName">The name of the local or remote host on which the device resides. <see langword="null"/> refers to the local host.</param>
            <param name="deviceGuid">One of the <see cref="T:Alphaleonis.Win32.Filesystem.DeviceGuid"/> devices.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Device.EnumerateDevicesCore(System.Runtime.InteropServices.SafeHandle,System.String,Alphaleonis.Win32.Filesystem.DeviceGuid)">
            <summary>Enumerates all available devices on the local or remote host.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Device.GetLinkTargetInfoCore(Microsoft.Win32.SafeHandles.SafeFileHandle)">
            <summary>Get information about the target of a mount point or symbolic link on an NTFS file system.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Device.ToggleCompressionCore(System.Boolean,Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Boolean,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>Sets the NTFS compression state of a file or directory on a volume whose file system supports per-file and per-directory compression.</summary>
            <param name="isFolder">Specifies that <paramref name="path"/> is a file or directory.</param>
            <param name="transaction">The transaction.</param>
            <param name="path">A path that describes a folder or file to compress or decompress.</param>
            <param name="compress"><see langword="true"/> = compress, <see langword="false"/> = decompress</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Device.CreateDeviceInfoDataInstance">
            <summary>Builds a DeviceInfo Data structure.</summary>
            <returns>An initialized NativeMethods.SP_DEVINFO_DATA instance.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Device.CreateDeviceInterfaceDataInstance">
            <summary>Builds a Device Interface Data structure.</summary>
            <returns>An initialized NativeMethods.SP_DEVICE_INTERFACE_DATA instance.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Device.GetDeviceInterfaceDetailDataInstance(System.Runtime.InteropServices.SafeHandle,Alphaleonis.Win32.Filesystem.NativeMethods.SP_DEVICE_INTERFACE_DATA,Alphaleonis.Win32.Filesystem.NativeMethods.SP_DEVINFO_DATA)">
            <summary>Builds a Device Interface Detail Data structure.</summary>
            <returns>An initialized NativeMethods.SP_DEVICE_INTERFACE_DETAIL_DATA instance.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Device.InvokeIoControlUnknownSize``1(Microsoft.Win32.SafeHandles.SafeFileHandle,System.UInt32,``0,System.UInt32)">
            <summary>Repeatedly invokes InvokeIoControl with the specified input until enough memory has been allocated.</summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.BackupFileStream">
            <summary>The <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> provides access to data associated with a specific file or directory, including security information and alternative data streams, for backup and restore operations.</summary>
            <remarks>This class uses the <see href="http://msdn.microsoft.com/en-us/library/aa362509(VS.85).aspx">BackupRead</see>, 
            <see href="http://msdn.microsoft.com/en-us/library/aa362510(VS.85).aspx">BackupSeek</see> and 
            <see href="http://msdn.microsoft.com/en-us/library/aa362511(VS.85).aspx">BackupWrite</see> functions from the Win32 API to provide access to the file or directory.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.BackupFileStream.#ctor(System.String,System.IO.FileMode)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> class with the specified path and creation mode.</summary>
            <param name="path">A relative or absolute path for the file that the current <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> object will encapsulate.</param>
            <param name="mode">A <see cref="T:System.IO.FileMode"/> constant that determines how to open or create the file.</param>
            <remarks>The file will be opened for exclusive access for both reading and writing.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.BackupFileStream.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> class with the specified path, creation mode and access rights.</summary>
            <param name="path">A relative or absolute path for the file that the current <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> object will encapsulate.</param>
            <param name="mode">A <see cref="T:System.IO.FileMode"/> constant that determines how to open or create the file.</param>
            <param name="access">A <see cref="T:System.Security.AccessControl.FileSystemRights"/> constant that determines the access rights to use when creating access and audit rules for the file.</param>
            <remarks>The file will be opened for exclusive access.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.BackupFileStream.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> class with the specified path, creation mode, access rights and sharing permission.</summary>
            <param name="path">A relative or absolute path for the file that the current <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> object will encapsulate.</param>
            <param name="mode">A <see cref="T:System.IO.FileMode"/> constant that determines how to open or create the file.</param>
            <param name="access">A <see cref="T:System.Security.AccessControl.FileSystemRights"/> constant that determines the access rights to use when creating access and audit rules for the file.</param>
            <param name="share">A <see cref="T:System.IO.FileShare"/> constant that determines how the file will be shared by processes.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.BackupFileStream.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,Alphaleonis.Win32.Filesystem.ExtendedFileAttributes)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> class with the specified path, creation mode, access rights and sharing permission, and additional file attributes.</summary>
            <param name="path">A relative or absolute path for the file that the current <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> object will encapsulate.</param>
            <param name="mode">A <see cref="T:System.IO.FileMode"/> constant that determines how to open or create the file.</param>
            <param name="access">A <see cref="T:System.Security.AccessControl.FileSystemRights"/> constant that determines the access rights to use when creating access and audit rules for the file.</param>
            <param name="share">A <see cref="T:System.IO.FileShare"/> constant that determines how the file will be shared by processes.</param>
            <param name="attributes">A <see cref="T:Alphaleonis.Win32.Filesystem.ExtendedFileAttributes"/> constant that specifies additional file attributes.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.BackupFileStream.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,Alphaleonis.Win32.Filesystem.ExtendedFileAttributes,System.Security.AccessControl.FileSecurity)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> class with the specified path, creation mode, access rights and sharing permission, additional file attributes, access control and audit security.</summary>
            <param name="path">A relative or absolute path for the file that the current <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> object will encapsulate.</param>
            <param name="mode">A <see cref="T:System.IO.FileMode"/> constant that determines how to open or create the file.</param>
            <param name="access">A <see cref="T:System.Security.AccessControl.FileSystemRights"/> constant that determines the access rights to use when creating access and audit rules for the file.</param>
            <param name="share">A <see cref="T:System.IO.FileShare"/> constant that determines how the file will be shared by processes.</param>
            <param name="attributes">A <see cref="T:Alphaleonis.Win32.Filesystem.ExtendedFileAttributes"/> constant that specifies additional file attributes.</param>
            <param name="security">A <see cref="T:System.Security.AccessControl.FileSecurity"/> constant that determines the access control and audit security for the file. This parameter This parameter may be <see langword="null"/>.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.BackupFileStream.#ctor(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.IO.FileMode)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> class with the specified path and creation mode.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">A relative or absolute path for the file that the current <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> object will encapsulate.</param>
            <param name="mode">A <see cref="T:System.IO.FileMode"/> constant that determines how to open or create the file.</param>
            <remarks>The file will be opened for exclusive access for both reading and writing.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.BackupFileStream.#ctor(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> class with the specified path, creation mode and access rights.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">A relative or absolute path for the file that the current <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> object will encapsulate.</param>
            <param name="mode">A <see cref="T:System.IO.FileMode"/> constant that determines how to open or create the file.</param>
            <param name="access">A <see cref="T:System.Security.AccessControl.FileSystemRights"/> constant that determines the access rights to use when creating access and audit rules for the file.</param>
            <remarks>The file will be opened for exclusive access.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.BackupFileStream.#ctor(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> class with the specified path, creation mode, access rights and sharing permission.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">A relative or absolute path for the file that the current <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> object will encapsulate.</param>
            <param name="mode">A <see cref="T:System.IO.FileMode"/> constant that determines how to open or create the file.</param>
            <param name="access">A <see cref="T:System.Security.AccessControl.FileSystemRights"/> constant that determines the access rights to use when creating access and audit rules for the file.</param>
            <param name="share">A <see cref="T:System.IO.FileShare"/> constant that determines how the file will be shared by processes.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.BackupFileStream.#ctor(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,Alphaleonis.Win32.Filesystem.ExtendedFileAttributes)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> class with the specified path, creation mode, access rights and sharing permission, and additional file attributes.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">A relative or absolute path for the file that the current <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> object will encapsulate.</param>
            <param name="mode">A <see cref="T:System.IO.FileMode"/> constant that determines how to open or create the file.</param>
            <param name="access">A <see cref="T:System.Security.AccessControl.FileSystemRights"/> constant that determines the access rights to use when creating access and audit rules for the file.</param>
            <param name="share">A <see cref="T:System.IO.FileShare"/> constant that determines how the file will be shared by processes.</param>
            <param name="attributes">A <see cref="T:Alphaleonis.Win32.Filesystem.ExtendedFileAttributes"/> constant that specifies additional file attributes.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.BackupFileStream.#ctor(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,Alphaleonis.Win32.Filesystem.ExtendedFileAttributes,System.Security.AccessControl.FileSecurity)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> class with the specified path, creation mode, access rights and sharing permission, additional file attributes, access control and audit security.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">A relative or absolute path for the file that the current <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> object will encapsulate.</param>
            <param name="mode">A <see cref="T:System.IO.FileMode"/> constant that determines how to open or create the file.</param>
            <param name="access">A <see cref="T:System.Security.AccessControl.FileSystemRights"/> constant that determines the access rights to use when creating access and audit rules for the file.</param>
            <param name="share">A <see cref="T:System.IO.FileShare"/> constant that determines how the file will be shared by processes.</param>
            <param name="attributes">A <see cref="T:Alphaleonis.Win32.Filesystem.ExtendedFileAttributes"/> constant that specifies additional file attributes.</param>
            <param name="security">A <see cref="T:System.Security.AccessControl.FileSecurity"/> constant that determines the access control and audit security for the file. This parameter This parameter may be <see langword="null"/>.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.BackupFileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.Security.AccessControl.FileSystemRights)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> class for the specified file handle, with the specified read/write permission.</summary>
            <param name="handle">A file handle for the file that this <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> object will encapsulate.</param>
            <param name="access">A <see cref="T:System.Security.AccessControl.FileSystemRights"/> constant that gets the <see cref="P:Alphaleonis.Win32.Filesystem.BackupFileStream.CanRead"/> and <see cref="P:Alphaleonis.Win32.Filesystem.BackupFileStream.CanWrite"/> properties of the <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> object.</param>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.BackupFileStream.Length">
            <summary>When overridden in a derived class, gets the length in bytes of the stream.</summary>
            <value>This method always throws an exception.</value>
            <exception cref="T:System.NotSupportedException"/>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.BackupFileStream.Position">
            <summary>When overridden in a derived class, gets or sets the position within the current stream.</summary>
            <value>This method always throws an exception.</value>
            <exception cref="T:System.NotSupportedException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.BackupFileStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>When overridden in a derived class, sets the position within the current stream.</summary>
            <param name="offset">A byte offset relative to the <paramref name="origin"/> parameter.</param>
            <param name="origin">A value of type <see cref="T:System.IO.SeekOrigin"/> indicating the reference point used to obtain the new position.</param>
            <returns>The new position within the current stream.</returns>
            <remarks><para><note><para>This stream does not support seeking using this method, and calling this method will always throw <see cref="T:System.NotSupportedException"/>. See <see cref="M:Alphaleonis.Win32.Filesystem.BackupFileStream.Skip(System.Int64)"/> for an alternative way of seeking forward.</para></note></para></remarks>
            <exception cref="T:System.NotSupportedException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.BackupFileStream.SetLength(System.Int64)">
            <summary>When overridden in a derived class, sets the length of the current stream.</summary>
            <param name="value">The desired length of the current stream in bytes.</param>
            <remarks>This method is not supported by the <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> class, and calling it will always generate a <see cref="T:System.NotSupportedException"/>.</remarks>
            <exception cref="T:System.NotSupportedException"/>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.BackupFileStream.CanRead">
            <summary>Gets a value indicating whether the current stream supports reading.</summary>
            <returns><see langword="true"/> if the stream supports reading, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.BackupFileStream.CanSeek">
            <summary>Gets a value indicating whether the current stream supports seeking.</summary>        
            <returns>This method always returns <see langword="false"/>.</returns>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.BackupFileStream.CanWrite">
            <summary>Gets a value indicating whether the current stream supports writing.</summary>
            <returns><see langword="true"/> if the stream supports writing, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.BackupFileStream.SafeFileHandle">
            <summary>Gets a <see cref="P:Alphaleonis.Win32.Filesystem.BackupFileStream.SafeFileHandle"/> object that represents the operating system file handle for the file that the current <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> object encapsulates.</summary>
            <value>A <see cref="P:Alphaleonis.Win32.Filesystem.BackupFileStream.SafeFileHandle"/> object that represents the operating system file handle for the file that 
            the current <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> object encapsulates.</value>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.BackupFileStream.Read(System.Byte[],System.Int32,System.Int32)">
             <summary>Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.</summary>
             <remarks>This method will not backup the access-control list (ACL) data for the file or directory.</remarks>
             <param name="buffer">
               An array of bytes. When this method returns, the buffer contains the specified byte array with the values between
               <paramref name="offset"/> and (<paramref name="offset"/> + <paramref name="count"/> - 1) replaced by the bytes read from the
               current source.
             </param>
             <param name="offset">
               The zero-based byte offset in <paramref name="buffer"/> at which to begin storing the data read from the current stream.
             </param>
             <param name="count">The maximum number of bytes to be read from the current stream.</param>
             <returns>
               The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not
               currently available, or zero (0) if the end of the stream has been reached.
             </returns>
            
             <exception cref="T:System.ArgumentException"/>
             <exception cref="T:System.ArgumentNullException"/>
             <exception cref="T:System.ArgumentOutOfRangeException"/>
             <exception cref="T:System.NotSupportedException"/>
             <exception cref="T:System.ObjectDisposedException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.BackupFileStream.Read(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.</summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values
            between <paramref name="offset"/> and (<paramref name="offset"/> + <paramref name="count"/> - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <param name="processSecurity">Indicates whether the function will backup the access-control list (ACL) data for the file or directory.</param>
            <returns>
            The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not
            currently available, or zero (0) if the end of the stream has been reached.
            </returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.ObjectDisposedException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.BackupFileStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>Writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.</summary>
            <overloads>
            Writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </overloads>
            <param name="buffer">An array of bytes. This method copies <paramref name="count"/> bytes from <paramref name="buffer"/> to the current stream.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.ObjectDisposedException"/>
            <remarks>This method will not process the access-control list (ACL) data for the file or directory.</remarks>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.BackupFileStream.Write(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.</summary>
            <param name="buffer">An array of bytes. This method copies <paramref name="count"/> bytes from <paramref name="buffer"/> to the current stream.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <param name="processSecurity">Specifies whether the function will restore the access-control list (ACL) data for the file or directory. 
            If this is <see langword="true"/> you need to specify <see cref="F:System.Security.AccessControl.FileSystemRights.TakeOwnership"/> and <see cref="F:System.Security.AccessControl.FileSystemRights.ChangePermissions"/> access when 
            opening the file or directory handle. If the handle does not have those access rights, the operating system denies 
            access to the ACL data, and ACL data restoration will not occur.</param>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.ObjectDisposedException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.BackupFileStream.Flush">
            <summary>Clears all buffers for this stream and causes any buffered data to be written to the underlying device.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.BackupFileStream.Skip(System.Int64)">
            <summary>Skips ahead the specified number of bytes from the current stream.</summary>
            <remarks><para>This method represents the Win32 API implementation of <see href="http://msdn.microsoft.com/en-us/library/aa362509(VS.85).aspx">BackupSeek</see>.</para>
            <para>
            Applications use the <see cref="M:Alphaleonis.Win32.Filesystem.BackupFileStream.Skip(System.Int64)"/> method to skip portions of a data stream that cause errors. This function does not 
            seek across stream headers. For example, this function cannot be used to skip the stream name. If an application 
            attempts to seek past the end of a substream, the function fails, the return value indicates the actual number of bytes 
            the function seeks, and the file position is placed at the start of the next stream header.
            </para>
            </remarks>
            <param name="bytes">The number of bytes to skip.</param>
            <returns>The number of bytes actually skipped.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.BackupFileStream.GetAccessControl">
            <summary>Gets a <see cref="T:System.Security.AccessControl.FileSecurity"/> object that encapsulates the access control list (ACL) entries for the file described by the current <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> object.</summary>
            <exception cref="T:System.IO.IOException"/>
            <returns>
              A <see cref="T:System.Security.AccessControl.FileSecurity"/> object that encapsulates the access control list (ACL) entries for the file described by the current
              <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> object.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.BackupFileStream.SetAccessControl(System.Security.AccessControl.ObjectSecurity)">
            <summary>Applies access control list (ACL) entries described by a <see cref="T:System.Security.AccessControl.FileSecurity"/> object to the file described by the current <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> object.</summary>
            <param name="fileSecurity">A <see cref="T:System.Security.AccessControl.FileSecurity"/> object that describes an ACL entry to apply to the current file.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.BackupFileStream.Lock(System.Int64,System.Int64)">
            <summary>Prevents other processes from changing the <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> while permitting read access.</summary>
            <param name="position">The beginning of the range to lock. The value of this parameter must be equal to or greater than zero (0).</param>
            <param name="length">The range to be locked.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <exception cref="T:System.ObjectDisposedException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.BackupFileStream.Unlock(System.Int64,System.Int64)">
            <summary>Allows access by other processes to all or part of a file that was previously locked.</summary>
            <param name="position">The beginning of the range to unlock.</param>
            <param name="length">The range to be unlocked.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <exception cref="T:System.ObjectDisposedException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.BackupFileStream.ReadStreamInfo">
            <summary>Reads a stream header from the current <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/>.</summary>
            <returns>The stream header read from the current <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/>, or <see langword="null"/> if the end-of-file 
            was reached before the required number of bytes of a header could be read.</returns>
            <exception cref="T:System.IO.IOException"/>
            <remarks>The stream must be positioned at where an actual header starts for the returned object to represent valid 
            information.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.BackupFileStream.Dispose(System.Boolean)">
            <summary>Releases the unmanaged resources used by the <see cref="T:System.IO.Stream"/> and optionally releases the managed resources.</summary>
            <param name="disposing"><see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only unmanaged resources.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.BackupFileStream.Finalize">
            <summary>Releases unmanaged resources and performs other cleanup operations before the <see cref="T:Alphaleonis.Win32.Filesystem.BackupFileStream"/> is reclaimed by garbage collection.</summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.FileEncryptionStatus">
            <summary>Represents the encryption status of the specified file.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileEncryptionStatus.Encryptable">
            <summary>The file can be encrypted.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileEncryptionStatus.Encrypted">
            <summary>The file is encrypted.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileEncryptionStatus.SystemFile">
            <summary>The file is a system file. System files cannot be encrypted.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileEncryptionStatus.RootDirectory">
            <summary>The file is a root directory. Root directories cannot be encrypted.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileEncryptionStatus.SystemDirectory">
            <summary>The file is a system directory. System directories cannot be encrypted.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileEncryptionStatus.Unknown">
            <summary>The encryption status is unknown. The file may be encrypted.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileEncryptionStatus.NoFilesystemSupport">
            <summary>The file system does not support file encryption.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileEncryptionStatus.UserDisallowed">
            <summary>Reserved for future use.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileEncryptionStatus.ReadOnly">
            <summary>The file is a read-only file.</summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.ByHandleFileInfo">
            <summary>Contains information that the GetFileInformationByHandle function retrieves.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.ByHandleFileInfo.Attributes">
            <summary>Gets the file attributes.</summary>
            <value>The file attributes.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.ByHandleFileInfo.CreationTime">
            <summary>Gets the time this entry was created.</summary>
            <value>The time this entry was created.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.ByHandleFileInfo.CreationTimeUtc">
            <summary>Gets the time, in coordinated universal time (UTC), this entry was created.</summary>
            <value>The time, in coordinated universal time (UTC), this entry was created.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.ByHandleFileInfo.LastAccessTime">
            <summary>Gets the time this entry was last accessed.
            For a file, the structure specifies the last time that a file is read from or written to. 
            For a directory, the structure specifies when the directory is created. 
            For both files and directories, the specified date is correct, but the time of day is always set to midnight. 
            If the underlying file system does not support the last access time, this member is zero (0).
            </summary>
            <value>The time this entry was last accessed.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.ByHandleFileInfo.LastAccessTimeUtc">
            <summary>Gets the time, in coordinated universal time (UTC), this entry was last accessed.
            For a file, the structure specifies the last time that a file is read from or written to. 
            For a directory, the structure specifies when the directory is created. 
            For both files and directories, the specified date is correct, but the time of day is always set to midnight. 
            If the underlying file system does not support the last access time, this member is zero (0).
            </summary>
            <value>The time, in coordinated universal time (UTC), this entry was last accessed.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.ByHandleFileInfo.LastWriteTime">
            <summary>Gets the time this entry was last modified.
            For a file, the structure specifies the last time that a file is written to. 
            For a directory, the structure specifies when the directory is created. 
            If the underlying file system does not support the last access time, this member is zero (0).
            </summary>
            <value>The time this entry was last modified.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.ByHandleFileInfo.LastWriteTimeUtc">
            <summary>Gets the time, in coordinated universal time (UTC), this entry was last modified.
            For a file, the structure specifies the last time that a file is written to. 
            For a directory, the structure specifies when the directory is created. 
            If the underlying file system does not support the last access time, this member is zero (0).
            </summary>
            <value>The time, in coordinated universal time (UTC), this entry was last modified.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.ByHandleFileInfo.VolumeSerialNumber">
            <summary>Gets the serial number of the volume that contains a file.</summary>
            <value>The serial number of the volume that contains a file.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.ByHandleFileInfo.FileSize">
            <summary>Gets the size of the file.</summary>
            <value>The size of the file.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.ByHandleFileInfo.NumberOfLinks">
            <summary>Gets the number of links to this file. For the FAT file system this member is always 1. For the NTFS file system, it can be more than 1.</summary>
            <value>The number of links to this file. </value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.ByHandleFileInfo.FileIndex">
            <summary>
            Gets the unique identifier associated with the file. The identifier and the volume serial number uniquely identify a 
            file on a single computer. To determine whether two open handles represent the same file, combine the identifier 
            and the volume serial number for each file and compare them.
            </summary>
            <value>The unique identifier of the file.</value>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.FileIdBothDirectoryInfo">
            <summary>Contains information about files in the specified directory. Used for directory handles.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileIdBothDirectoryInfo.AllocationSize">
            <summary>The number of bytes that are allocated for the file. This value is usually a multiple of the sector or cluster size of the underlying physical device.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileIdBothDirectoryInfo.ChangeTime">
            <summary>Gets the time this entry was changed.</summary>
            <value>The time this entry was changed.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileIdBothDirectoryInfo.ChangeTimeUtc">
            <summary>Gets the time, in coordinated universal time (UTC), this entry was changed.</summary>
            <value>The time, in coordinated universal time (UTC), this entry was changed.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileIdBothDirectoryInfo.CreationTime">
            <summary>Gets the time this entry was created.</summary>
            <value>The time this entry was created.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileIdBothDirectoryInfo.CreationTimeUtc">
            <summary>Gets the time, in coordinated universal time (UTC), this entry was created.</summary>
            <value>The time, in coordinated universal time (UTC), this entry was created.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileIdBothDirectoryInfo.ExtendedAttributesSize">
            <summary>The size of the extended attributes for the file.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileIdBothDirectoryInfo.EndOfFile">
            <summary>The absolute new end-of-file position as a byte offset from the start of the file to the end of the file. 
            Because this value is zero-based, it actually refers to the first free byte in the file. In other words, <b>EndOfFile</b> is the offset to 
            the byte that immediately follows the last valid byte in the file.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileIdBothDirectoryInfo.FileAttributes">
            <summary>The file attributes.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileIdBothDirectoryInfo.FileId">
            <summary>The file ID.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileIdBothDirectoryInfo.FileIndex">
            <summary>The byte offset of the file within the parent directory. This member is undefined for file systems, such as NTFS,
            in which the position of a file within the parent directory is not fixed and can be changed at any time to maintain sort order.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileIdBothDirectoryInfo.FileName">
            <summary>The name of the file.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileIdBothDirectoryInfo.LastAccessTime">
            <summary>Gets the time this entry was last accessed.</summary>
            <value>The time this entry was last accessed.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileIdBothDirectoryInfo.LastAccessTimeUtc">
            <summary>Gets the time, in coordinated universal time (UTC), this entry was last accessed.</summary>
            <value>The time, in coordinated universal time (UTC), this entry was last accessed.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileIdBothDirectoryInfo.LastWriteTime">
            <summary>Gets the time this entry was last modified.</summary>
            <value>The time this entry was last modified.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileIdBothDirectoryInfo.LastWriteTimeUtc">
            <summary>Gets the time, in coordinated universal time (UTC), this entry was last modified.</summary>
            <value>The time, in coordinated universal time (UTC), this entry was last modified.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileIdBothDirectoryInfo.ShortName">
            <summary>The short 8.3 file naming convention (for example, FILENAME.TXT) name of the file.</summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.FileInfo">
            <summary>Provides properties and instance methods for the creation, copying, deletion, moving, and opening of files, and aids in the creation of <see cref="T:System.IO.FileStream"/> objects. This class cannot be inherited.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.GetHash(Alphaleonis.Win32.Security.HashType)">
            <summary>[AlphaFS] Calculates the hash/checksum.</summary>
            <param name="hashType">One of the <see cref="T:Alphaleonis.Win32.Security.HashType"/> values.</param>
            <returns>The hash/checksum of the file represented by this <see cref="T:Alphaleonis.Win32.Filesystem.FileInfo"/>.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.RefreshEntryInfo">
            <summary>Refreshes the state of the <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo"/> EntryInfo instance.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.EnumerateAlternateDataStreams">
            <summary>[AlphaFS] Returns an enumerable collection of <see cref="T:Alphaleonis.Win32.Filesystem.AlternateDataStreamInfo"/> instances for the file.</summary>
            <returns>An enumerable collection of <see cref="T:Alphaleonis.Win32.Filesystem.AlternateDataStreamInfo"/> instances for the file.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.Decompress">
            <summary>[AlphaFS] Decompresses an NTFS compressed file.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.Compress">
            <summary>[AlphaFS] Compresses a file using NTFS compression.</summary>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.ToString">
            <summary>Returns the path as a string.</summary>
            <returns>The path.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.SetAccessControl(System.Security.AccessControl.FileSecurity)">
            <summary>Applies access control list (ACL) entries described by a FileSecurity object to the file described by the current FileInfo object.</summary>
            <remarks>
              The SetAccessControl method applies access control list (ACL) entries to the current file that represents the noninherited ACL
              list. Use the SetAccessControl method whenever you need to add or remove ACL entries from a file.
            </remarks>
            <param name="fileSecurity">A <see cref="T:System.Security.AccessControl.FileSecurity"/> object that describes an access control list (ACL) entry to apply to the current file.</param>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.SetAccessControl(System.Security.AccessControl.FileSecurity,System.Security.AccessControl.AccessControlSections)">
            <summary>Applies access control list (ACL) entries described by a FileSecurity object to the file described by the current FileInfo object.</summary>
            <remarks>
              The SetAccessControl method applies access control list (ACL) entries to the current file that represents the noninherited ACL
              list. Use the SetAccessControl method whenever you need to add or remove ACL entries from a file.
            </remarks>
            <param name="fileSecurity">A <see cref="T:System.Security.AccessControl.FileSecurity"/> object that describes an access control list (ACL) entry to apply to the current file.</param>
            <param name="includeSections">One or more of the <see cref="T:System.Security.AccessControl.AccessControlSections"/> values that specifies the type of access control list (ACL) information to set.</param>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.Replace(System.String,System.String)">
            <summary>Replaces the contents of a specified file with the file described by the current <see cref="T:Alphaleonis.Win32.Filesystem.FileInfo"/> object, deleting the original file, and creating a backup of the replaced file.</summary>
            <returns>A <see cref="T:Alphaleonis.Win32.Filesystem.FileInfo"/> object that encapsulates information about the file described by the <paramref name="destinationFileName"/> parameter.</returns>
            <remarks>
              The Replace method replaces the contents of a specified file with the contents of the file described by the current
              <see cref="T:Alphaleonis.Win32.Filesystem.FileInfo"/> object. It also creates a backup of the file that was replaced. Finally, it returns a new
               <see cref="T:Alphaleonis.Win32.Filesystem.FileInfo"/> object that describes the overwritten file.
            </remarks>
            <remarks>Pass null to the <paramref name="destinationBackupFileName"/> parameter if you do not want to create a backup of the file being replaced.</remarks>
            <param name="destinationFileName">The name of a file to replace with the current file.</param>
            <param name="destinationBackupFileName">The name of a file with which to create a backup of the file described by the <paramref name="destinationFileName"/> parameter.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.Replace(System.String,System.String,System.Boolean)">
            <summary>Replaces the contents of a specified file with the file described by the current <see cref="T:Alphaleonis.Win32.Filesystem.FileInfo"/> object, deleting the original file, and creating a backup of the replaced file. Also specifies whether to ignore merge errors.</summary>
            <returns>A <see cref="T:Alphaleonis.Win32.Filesystem.FileInfo"/> object that encapsulates information about the file described by the <paramref name="destinationFileName"/> parameter.</returns>
            <remarks>
              The Replace method replaces the contents of a specified file with the contents of the file described by the current
              <see cref="T:Alphaleonis.Win32.Filesystem.FileInfo"/> object. It also creates a backup of the file that was replaced. Finally, it returns a new
              <see cref="T:Alphaleonis.Win32.Filesystem.FileInfo"/> object that describes the overwritten file.
            </remarks>
            <remarks>Pass null to the <paramref name="destinationBackupFileName"/> parameter if you do not want to create a backup of the file being replaced.</remarks>
            <param name="destinationFileName">The name of a file to replace with the current file.</param>
            <param name="destinationBackupFileName">The name of a file with which to create a backup of the file described by the <paramref name="destinationFileName"/> parameter.</param>
            <param name="ignoreMetadataErrors"><see langword="true"/> to ignore merge errors (such as attributes and ACLs) from the replaced file to the replacement file; otherwise, <see langword="false"/>.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.Replace(System.String,System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Replaces the contents of a specified file with the file described by the current <see cref="T:Alphaleonis.Win32.Filesystem.FileInfo"/> object, deleting the original file, and creating a backup of the replaced file. Also specifies whether to ignore merge errors.</summary>
            <returns>A <see cref="T:Alphaleonis.Win32.Filesystem.FileInfo"/> object that encapsulates information about the file described by the <paramref name="destinationFileName"/> parameter.</returns>
            <remarks>
              The Replace method replaces the contents of a specified file with the contents of the file described by the current
              <see cref="T:Alphaleonis.Win32.Filesystem.FileInfo"/> object. It also creates a backup of the file that was replaced. Finally, it returns a new
              <see cref="T:Alphaleonis.Win32.Filesystem.FileInfo"/> object that describes the overwritten file.
            </remarks>
            <remarks>Pass null to the <paramref name="destinationBackupFileName"/> parameter if you do not want to create a backup of the file being replaced.</remarks>
            <param name="destinationFileName">The name of a file to replace with the current file.</param>
            <param name="destinationBackupFileName">The name of a file with which to create a backup of the file described by the <paramref name="destinationFileName"/> parameter.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.Replace(System.String,System.String,System.Boolean,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Replaces the contents of a specified file with the file described by the current <see cref="T:Alphaleonis.Win32.Filesystem.FileInfo"/> object, deleting the original file, and creating a backup of the replaced file. Also specifies whether to ignore merge errors.</summary>
            <returns>A <see cref="T:Alphaleonis.Win32.Filesystem.FileInfo"/> object that encapsulates information about the file described by the <paramref name="destinationFileName"/> parameter.</returns>
            <remarks>
              The Replace method replaces the contents of a specified file with the contents of the file described by the current
              <see cref="T:Alphaleonis.Win32.Filesystem.FileInfo"/> object. It also creates a backup of the file that was replaced. Finally, it returns a new
              <see cref="T:Alphaleonis.Win32.Filesystem.FileInfo"/> object that describes the overwritten file.
            </remarks>
            <remarks>Pass null to the <paramref name="destinationBackupFileName"/> parameter if you do not want to create a backup of the file being replaced.</remarks>
            <param name="destinationFileName">The name of a file to replace with the current file.</param>
            <param name="destinationBackupFileName">The name of a file with which to create a backup of the file described by the <paramref name="destinationFileName"/> parameter.</param>
            <param name="ignoreMetadataErrors"><see langword="true"/> to ignore merge errors (such as attributes and ACLs) from the replaced file to the replacement file; otherwise, <see langword="false"/>.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.Refresh">
            <summary>Refreshes the state of the object.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.OpenWrite">
            <summary>Creates a write-only <see cref="T:System.IO.FileStream"/>.</summary>
            <returns>A write-only unshared <see cref="T:System.IO.FileStream"/> object for a new or existing file.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.OpenText">
            <summary>Creates a <see cref="T:System.IO.StreamReader"/> with NativeMethods.DefaultFileEncoding encoding that reads from an existing text file.</summary>
            <returns>A new <see cref="T:System.IO.StreamReader"/> with NativeMethods.DefaultFileEncoding encoding.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.OpenText(System.Text.Encoding)">
            <summary>[AlphaFS] Creates a <see cref="T:System.IO.StreamReader"/> with <see cref="T:System.Text.Encoding"/> that reads from an existing text file.</summary>
            <returns>A new <see cref="T:System.IO.StreamReader"/> with the specified <see cref="T:System.Text.Encoding"/>.</returns>
            <param name="encoding">The <see cref="T:System.Text.Encoding"/> applied to the contents of the file.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.OpenRead">
            <summary>Creates a read-only <see cref="T:System.IO.FileStream"/>.</summary>
            <returns>A new read-only <see cref="T:System.IO.FileStream"/> object.</returns>
            <remarks>This method returns a read-only <see cref="T:System.IO.FileStream"/> object with the <see cref="T:System.IO.FileShare"/> mode set to Read.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.Open(System.IO.FileMode)">
            <summary>Opens a file in the specified mode.</summary>
            <returns>A <see cref="T:System.IO.FileStream"/> file opened in the specified mode, with read/write access and unshared.</returns>
            <param name="mode">A <see cref="T:System.IO.FileMode"/> constant specifying the mode (for example, Open or Append) in which to open the file.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.Open(System.IO.FileMode,System.IO.FileAccess)">
            <summary>Opens a file in the specified mode with read, write, or read/write access.</summary>
            <returns>A <see cref="T:System.IO.FileStream"/> object opened in the specified mode and access, and unshared.</returns>
            <param name="mode">A <see cref="T:System.IO.FileMode"/> constant specifying the mode (for example, Open or Append) in which to open the file.</param>
            <param name="access">A <see cref="T:System.IO.FileAccess"/> constant specifying whether to open the file with Read, Write, or ReadWrite file access.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.Open(System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <summary>Opens a file in the specified mode with read, write, or read/write access and the specified sharing option.</summary>
            <returns>A <see cref="T:System.IO.FileStream"/> object opened with the specified mode, access, and sharing options.</returns>
            <param name="mode">A <see cref="T:System.IO.FileMode"/> constant specifying the mode (for example, Open or Append) in which to open the file.</param>
            <param name="access">A <see cref="T:System.IO.FileAccess"/> constant specifying whether to open the file with Read, Write, or ReadWrite file access.</param>
            <param name="share">A <see cref="T:System.IO.FileShare"/> constant specifying the type of access other <see cref="T:System.IO.FileStream"/> objects have to this file.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.Open(System.IO.FileMode,System.Security.AccessControl.FileSystemRights)">
            <summary>[AlphaFS] Opens a file in the specified mode with read, write, or read/write access.</summary>
            <returns>A <see cref="T:System.IO.FileStream"/> object opened in the specified mode and access, and unshared.</returns>
            <param name="mode">A <see cref="T:System.IO.FileMode"/> constant specifying the mode (for example, Open or Append) in which to open the file.</param>
            <param name="rights">A <see cref="T:System.Security.AccessControl.FileSystemRights"/> value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten along with additional options.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.Open(System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare)">
            <summary>[AlphaFS] Opens a file in the specified mode with read, write, or read/write access and the specified sharing option.</summary>
            <returns>A <see cref="T:System.IO.FileStream"/> object opened with the specified mode, access, and sharing options.</returns>
            <param name="mode">A <see cref="T:System.IO.FileMode"/> constant specifying the mode (for example, Open or Append) in which to open the file.</param>
            <param name="rights">A <see cref="T:System.Security.AccessControl.FileSystemRights"/> value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten along with additional options.</param>
            <param name="share">A <see cref="T:System.IO.FileShare"/> constant specifying the type of access other <see cref="T:System.IO.FileStream"/> objects have to this file.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.GetAccessControl">
            <summary>Gets a <see cref="T:System.Security.AccessControl.FileSecurity"/> object that encapsulates the access control list (ACL) entries for the file described by the current <see cref="T:Alphaleonis.Win32.Filesystem.FileInfo"/> object.</summary>
            <returns><see cref="T:System.Security.AccessControl.FileSecurity"/>A FileSecurity object that encapsulates the access control rules for the current file.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.GetAccessControl(System.Security.AccessControl.AccessControlSections)">
            <summary>Gets a <see cref="T:System.Security.AccessControl.FileSecurity"/> object that encapsulates the specified type of access control list (ACL) entries for the file described by the current FileInfo object.</summary>
            <returns><see cref="T:System.Security.AccessControl.FileSecurity"/> object that encapsulates the specified type of access control list (ACL) entries for the file described by the current FileInfo object.</returns>
            <param name="includeSections">One of the <see cref="N:System.Security"/> values that specifies which group of access control entries to retrieve.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.Encrypt">
            <summary>Encrypts a file so that only the account used to encrypt the file can decrypt it.</summary>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.Delete">
             <summary>Permanently deletes a file.</summary>
             <remarks>If the file does not exist, this method does nothing.</remarks>
            
             <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.Delete(System.Boolean)">
            <summary>[AlphaFS] Permanently deletes a file.</summary>
            <remarks>If the file does not exist, this method does nothing.</remarks>
            <param name="ignoreReadOnly"><see langword="true"/> overrides the read only <see cref="T:System.IO.FileAttributes"/> of the file.</param>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.Decrypt">
            <summary>Decrypts a file that was encrypted by the current account using the Encrypt method.</summary>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.CreateText">
            <summary>Creates a <see crefe="StreamWriter"/> instance that writes a new text file.</summary>
            <returns>A new <see cref="T:System.IO.StreamWriter"/></returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.Create">
            <summary>Creates a file.</summary>
            <returns><see cref="T:System.IO.FileStream"/>A new file.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.CopyTo(System.String)">
            <summary>Copies an existing file to a new file, disallowing the overwriting of an existing file.</summary>
            <returns>A new <see cref="T:Alphaleonis.Win32.Filesystem.FileInfo"/> instance with a fully qualified path.</returns>
            <remarks>
              <para>Use this method to prevent overwriting of an existing file by default.</para>
              <para>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method.</para>
              <para>If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior.</para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="destinationPath">The name of the new file to copy to.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.CopyTo(System.String,System.Boolean)">
            <summary>Copies an existing file to a new file, allowing the overwriting of an existing file.</summary>
            <returns>
              <para>Returns a new file, or an overwrite of an existing file if <paramref name="overwrite"/> is <see langword="true"/>.</para>
              <para>If the file exists and <paramref name="overwrite"/> is <see langword="false"/>, an <see cref="T:System.IO.IOException"/> is thrown.</para>
            </returns>
            <remarks>
              <para>Use this method to allow or prevent overwriting of an existing file.</para>
              <para>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method.</para>
              <para>If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior.</para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="destinationPath">The name of the new file to copy to.</param>
            <param name="overwrite"><see langword="true"/> to allow an existing file to be overwritten; otherwise, <see langword="false"/>.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.CopyTo(System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Copies an existing file to a new file, disallowing the overwriting of an existing file.</summary>
            <returns>A new <see cref="T:Alphaleonis.Win32.Filesystem.FileInfo"/> instance with a fully qualified path.</returns>
            <remarks>
              <para>Use this method to prevent overwriting of an existing file by default.</para>
              <para>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method.</para>
              <para>If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior.</para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="destinationPath">The name of the new file to copy to.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.CopyTo(System.String,System.Boolean,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Copies an existing file to a new file, allowing the overwriting of an existing file.</summary>
            <returns>
              <para>Returns a new file, or an overwrite of an existing file if <paramref name="overwrite"/> is <see langword="true"/>.</para>
              <para>If the file exists and <paramref name="overwrite"/> is <see langword="false"/>, an <see cref="T:System.IO.IOException"/> is thrown.</para>
            </returns>
            <remarks>
              <para>Use this method to allow or prevent overwriting of an existing file.</para>
              <para>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method.</para>
              <para>If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior.</para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="destinationPath">The name of the new file to copy to.</param>
            <param name="overwrite"><see langword="true"/> to allow an existing file to be overwritten; otherwise, <see langword="false"/>.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.CopyTo(System.String,Alphaleonis.Win32.Filesystem.CopyOptions)">
            <summary>[AlphaFS] Copies an existing file to a new file, allowing the overwriting of an existing file, <see cref="T:Alphaleonis.Win32.Filesystem.CopyOptions"/> can be specified.</summary>
            <returns>
              <para>Returns a new file, or an overwrite of an existing file if <paramref name="copyOptions"/> is not <see cref="F:Alphaleonis.Win32.Filesystem.CopyOptions.FailIfExists"/>.</para>
              <para>If the file exists and <paramref name="copyOptions"/> contains <see cref="F:Alphaleonis.Win32.Filesystem.CopyOptions.FailIfExists"/>, an <see cref="T:System.IO.IOException"/> is thrown.</para>
            </returns>
            <remarks>
              <para>Option <see cref="F:Alphaleonis.Win32.Filesystem.CopyOptions.NoBuffering"/> is recommended for very large file transfers.</para>
              <para>Use this method to allow or prevent overwriting of an existing file.</para>
              <para>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method.</para>
              <para>If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior.</para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="destinationPath">The name of the new file to copy to.</param>
            <param name="copyOptions"><see cref="T:Alphaleonis.Win32.Filesystem.CopyOptions"/> that specify how the file is to be copied.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.CopyTo(System.String,Alphaleonis.Win32.Filesystem.CopyOptions,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Copies an existing file to a new file, allowing the overwriting of an existing file, <see cref="T:Alphaleonis.Win32.Filesystem.CopyOptions"/> can be specified.</summary>
            <returns>
              <para>Returns a new file, or an overwrite of an existing file if <paramref name="copyOptions"/> is not <see cref="F:Alphaleonis.Win32.Filesystem.CopyOptions.FailIfExists"/>.</para>
              <para>If the file exists and <paramref name="copyOptions"/> contains <see cref="F:Alphaleonis.Win32.Filesystem.CopyOptions.FailIfExists"/>, an <see cref="T:System.IO.IOException"/> is thrown.</para>
            </returns>
            <remarks>
              <para>Option <see cref="F:Alphaleonis.Win32.Filesystem.CopyOptions.NoBuffering"/> is recommended for very large file transfers.</para>
              <para>Use this method to allow or prevent overwriting of an existing file.</para>
              <para>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method.</para>
              <para>If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior.</para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="destinationPath">The name of the new file to copy to.</param>
            <param name="copyOptions"><see cref="T:Alphaleonis.Win32.Filesystem.CopyOptions"/> that specify how the file is to be copied.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.CopyTo(System.String,Alphaleonis.Win32.Filesystem.CopyOptions,System.Boolean)">
            <summary>[AlphaFS] Copies an existing file to a new file, allowing the overwriting of an existing file, <see cref="T:Alphaleonis.Win32.Filesystem.CopyOptions"/> can be specified.</summary>
            <returns>
              <para>Returns a new file, or an overwrite of an existing file if <paramref name="copyOptions"/> is not <see cref="F:Alphaleonis.Win32.Filesystem.CopyOptions.FailIfExists"/>.</para>
              <para>If the file exists and <paramref name="copyOptions"/> contains <see cref="F:Alphaleonis.Win32.Filesystem.CopyOptions.FailIfExists"/>, an <see cref="T:System.IO.IOException"/> is thrown.</para>
            </returns>
            <remarks>
              <para>Option <see cref="F:Alphaleonis.Win32.Filesystem.CopyOptions.NoBuffering"/> is recommended for very large file transfers.</para>
              <para>Use this method to allow or prevent overwriting of an existing file.</para>
              <para>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method.</para>
              <para>If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior.</para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="destinationPath">The name of the new file to copy to.</param>
            <param name="copyOptions"><see cref="T:Alphaleonis.Win32.Filesystem.CopyOptions"/> that specify how the file is to be copied.</param>
            <param name="preserveDates"><see langword="true"/> if original Timestamps must be preserved, <see langword="false"/> otherwise.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.CopyTo(System.String,Alphaleonis.Win32.Filesystem.CopyOptions,System.Boolean,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Copies an existing file to a new file, allowing the overwriting of an existing file, <see cref="T:Alphaleonis.Win32.Filesystem.CopyOptions"/> can be specified.</summary>
            <returns>
              <para>Returns a new file, or an overwrite of an existing file if <paramref name="copyOptions"/> is not <see cref="F:Alphaleonis.Win32.Filesystem.CopyOptions.FailIfExists"/>.</para>
              <para>If the file exists and <paramref name="copyOptions"/> contains <see cref="F:Alphaleonis.Win32.Filesystem.CopyOptions.FailIfExists"/>, an <see cref="T:System.IO.IOException"/> is thrown.</para>
            </returns>
            <remarks>
              <para>Option <see cref="F:Alphaleonis.Win32.Filesystem.CopyOptions.NoBuffering"/> is recommended for very large file transfers.</para>
              <para>Use this method to allow or prevent overwriting of an existing file.</para>
              <para>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method.</para>
              <para>If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior.</para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="destinationPath">The name of the new file to copy to.</param>
            <param name="copyOptions"><see cref="T:Alphaleonis.Win32.Filesystem.CopyOptions"/> that specify how the file is to be copied.</param>
            <param name="preserveDates"><see langword="true"/> if original Timestamps must be preserved, <see langword="false"/> otherwise.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.CopyTo(System.String,Alphaleonis.Win32.Filesystem.CopyOptions,Alphaleonis.Win32.Filesystem.CopyMoveProgressRoutine,System.Object)">
            <summary>[AlphaFS] Copies an existing file to a new file, allowing the overwriting of an existing file, <see cref="T:Alphaleonis.Win32.Filesystem.CopyOptions"/> can be specified.
              <para>and the possibility of notifying the application of its progress through a callback function.</para>
            </summary>
            <returns>
              <para>Returns a <see cref="T:Alphaleonis.Win32.Filesystem.CopyMoveResult"/> class with the status of the Copy action.</para>
              <para>Returns a new file, or an overwrite of an existing file if <paramref name="copyOptions"/> is not <see cref="F:Alphaleonis.Win32.Filesystem.CopyOptions.FailIfExists"/>.</para>
              <para>If the file exists and <paramref name="copyOptions"/> contains <see cref="F:Alphaleonis.Win32.Filesystem.CopyOptions.FailIfExists"/>, an <see cref="T:System.IO.IOException"/> is thrown.</para>
            </returns>
            <remarks>
              <para>Option <see cref="F:Alphaleonis.Win32.Filesystem.CopyOptions.NoBuffering"/> is recommended for very large file transfers.</para>
              <para>Use this method to allow or prevent overwriting of an existing file.</para>
              <para>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method.</para>
              <para>If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior.</para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="destinationPath">The name of the new file to copy to.</param>
            <param name="copyOptions"><see cref="T:Alphaleonis.Win32.Filesystem.CopyOptions"/> that specify how the file is to be copied.</param>
            <param name="progressHandler">A callback function that is called each time another portion of the file has been copied. This parameter can be <see langword="null"/>.</param>
            <param name="userProgressData">The argument to be passed to the callback function. This parameter can be <see langword="null"/>.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.CopyTo(System.String,Alphaleonis.Win32.Filesystem.CopyOptions,Alphaleonis.Win32.Filesystem.CopyMoveProgressRoutine,System.Object,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Copies an existing file to a new file, allowing the overwriting of an existing file, <see cref="T:Alphaleonis.Win32.Filesystem.CopyOptions"/> can be specified.</summary>
            <returns>
              <para>Returns a <see cref="T:Alphaleonis.Win32.Filesystem.CopyMoveResult"/> class with the status of the Copy action.</para>
              <para>Returns a new file, or an overwrite of an existing file if <paramref name="copyOptions"/> is not <see cref="F:Alphaleonis.Win32.Filesystem.CopyOptions.FailIfExists"/>.</para>
              <para>If the file exists and <paramref name="copyOptions"/> contains <see cref="F:Alphaleonis.Win32.Filesystem.CopyOptions.FailIfExists"/>, an <see cref="T:System.IO.IOException"/> is thrown.</para>
            </returns>
            <remarks>
              <para>Option <see cref="F:Alphaleonis.Win32.Filesystem.CopyOptions.NoBuffering"/> is recommended for very large file transfers.</para>
              <para>Use this method to allow or prevent overwriting of an existing file.</para>
              <para>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method.</para>
              <para>If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior.</para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="destinationPath">The name of the new file to copy to.</param>
            <param name="copyOptions"><see cref="T:Alphaleonis.Win32.Filesystem.CopyOptions"/> that specify how the file is to be copied.</param>
            <param name="progressHandler">A callback function that is called each time another portion of the file has been copied. This parameter can be <see langword="null"/>.</param>
            <param name="userProgressData">The argument to be passed to the callback function. This parameter can be <see langword="null"/>.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.CopyTo(System.String,Alphaleonis.Win32.Filesystem.CopyOptions,System.Boolean,Alphaleonis.Win32.Filesystem.CopyMoveProgressRoutine,System.Object)">
            <summary>[AlphaFS] Copies an existing file to a new file, allowing the overwriting of an existing file, <see cref="T:Alphaleonis.Win32.Filesystem.CopyOptions"/> can be specified.
              <para>and the possibility of notifying the application of its progress through a callback function.</para>
            </summary>
            <returns>
              <para>Returns a <see cref="T:Alphaleonis.Win32.Filesystem.CopyMoveResult"/> class with the status of the Copy action.</para>
              <para>Returns a new file, or an overwrite of an existing file if <paramref name="copyOptions"/> is not <see cref="F:Alphaleonis.Win32.Filesystem.CopyOptions.FailIfExists"/>.</para>
              <para>If the file exists and <paramref name="copyOptions"/> contains <see cref="F:Alphaleonis.Win32.Filesystem.CopyOptions.FailIfExists"/>, an <see cref="T:System.IO.IOException"/> is thrown.</para>
            </returns>
            <remarks>
              <para>Option <see cref="F:Alphaleonis.Win32.Filesystem.CopyOptions.NoBuffering"/> is recommended for very large file transfers.</para>
              <para>Use this method to allow or prevent overwriting of an existing file.</para>
              <para>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method.</para>
              <para>If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior.</para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="destinationPath">The name of the new file to copy to.</param>
            <param name="copyOptions"><see cref="T:Alphaleonis.Win32.Filesystem.CopyOptions"/> that specify how the file is to be copied.</param>
            <param name="preserveDates"><see langword="true"/> if original Timestamps must be preserved, <see langword="false"/> otherwise.</param>
            <param name="progressHandler">A callback function that is called each time another portion of the file has been copied. This parameter can be <see langword="null"/>.</param>
            <param name="userProgressData">The argument to be passed to the callback function. This parameter can be <see langword="null"/>.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.CopyTo(System.String,Alphaleonis.Win32.Filesystem.CopyOptions,System.Boolean,Alphaleonis.Win32.Filesystem.CopyMoveProgressRoutine,System.Object,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Copies an existing file to a new file, allowing the overwriting of an existing file, <see cref="T:Alphaleonis.Win32.Filesystem.CopyOptions"/> can be specified.
              <para>and the possibility of notifying the application of its progress through a callback function.</para>
            </summary>
            <returns>
              <para>Returns a <see cref="T:Alphaleonis.Win32.Filesystem.CopyMoveResult"/> class with the status of the Copy action.</para>
              <para>Returns a new file, or an overwrite of an existing file if <paramref name="copyOptions"/> is not <see cref="F:Alphaleonis.Win32.Filesystem.CopyOptions.FailIfExists"/>.</para>
              <para>If the file exists and <paramref name="copyOptions"/> contains <see cref="F:Alphaleonis.Win32.Filesystem.CopyOptions.FailIfExists"/>, an <see cref="T:System.IO.IOException"/> is thrown.</para>
            </returns>
            <remarks>
              <para>Option <see cref="F:Alphaleonis.Win32.Filesystem.CopyOptions.NoBuffering"/> is recommended for very large file transfers.</para>
              <para>Use this method to allow or prevent overwriting of an existing file.</para>
              <para>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method.</para>
              <para>If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior.</para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="destinationPath">The name of the new file to copy to.</param>
            <param name="copyOptions"><see cref="T:Alphaleonis.Win32.Filesystem.CopyOptions"/> that specify how the file is to be copied.</param>
            <param name="preserveDates"><see langword="true"/> if original Timestamps must be preserved, <see langword="false"/> otherwise.</param>
            <param name="progressHandler">A callback function that is called each time another portion of the file has been copied. This parameter can be <see langword="null"/>.</param>
            <param name="userProgressData">The argument to be passed to the callback function. This parameter can be <see langword="null"/>.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.MoveTo(System.String)">
            <summary>Moves a specified file to a new location, providing the option to specify a new file name.</summary>
            <remarks>
              <para>Use this method to prevent overwriting of an existing file by default.</para>
              <para>This method works across disk volumes.</para>
              <para>For example, the file c:\MyFile.txt can be moved to d:\public and renamed NewFile.txt.</para>
              <para>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method.</para>
              <para>If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior.</para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="destinationPath">The path to move the file to, which can specify a different file name.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.MoveTo(System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Moves a specified file to a new location, providing the option to specify a new file name.</summary>
            <returns><para>Returns a new <see cref="T:Alphaleonis.Win32.Filesystem.FileInfo"/> instance with a fully qualified path when successfully moved,</para></returns>
            <remarks>
              <para>Use this method to prevent overwriting of an existing file by default.</para>
              <para>This method works across disk volumes.</para>
              <para>For example, the file c:\MyFile.txt can be moved to d:\public and renamed NewFile.txt.</para>
              <para>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method.</para>
              <para>If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable
              behavior.</para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="destinationPath">The path to move the file to, which can specify a different file name.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.MoveTo(System.String,Alphaleonis.Win32.Filesystem.MoveOptions)">
            <summary>[AlphaFS] Moves a specified file to a new location, providing the option to specify a new file name, <see cref="T:Alphaleonis.Win32.Filesystem.MoveOptions"/> can be specified.</summary>
            <returns><para>Returns a new <see cref="T:Alphaleonis.Win32.Filesystem.FileInfo"/> instance with a fully qualified path when successfully moved,</para></returns>
            <remarks>
              <para>Use this method to allow or prevent overwriting of an existing file.</para>
              <para>This method works across disk volumes.</para>
              <para>For example, the file c:\MyFile.txt can be moved to d:\public and renamed NewFile.txt.</para>
              <para>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method.</para>
              <para>If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable
              behavior.</para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="destinationPath">The path to move the file to, which can specify a different file name.</param>
            <param name="moveOptions"><see cref="T:Alphaleonis.Win32.Filesystem.MoveOptions"/> that specify how the directory is to be moved. This parameter can be <see langword="null"/>.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.MoveTo(System.String,Alphaleonis.Win32.Filesystem.MoveOptions,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Moves a specified file to a new location, providing the option to specify a new file name, <see cref="T:Alphaleonis.Win32.Filesystem.MoveOptions"/> can be specified.</summary>
            <returns><para>Returns a new <see cref="T:Alphaleonis.Win32.Filesystem.FileInfo"/> instance with a fully qualified path when successfully moved,</para></returns>
            <remarks>
              <para>Use this method to allow or prevent overwriting of an existing file.</para>
              <para>This method works across disk volumes.</para>
              <para>For example, the file c:\MyFile.txt can be moved to d:\public and renamed NewFile.txt.</para>
              <para>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method.</para>
              <para>If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable
              behavior.</para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="destinationPath">The path to move the file to, which can specify a different file name.</param>
            <param name="moveOptions"><see cref="T:Alphaleonis.Win32.Filesystem.MoveOptions"/> that specify how the directory is to be moved. This parameter can be <see langword="null"/>.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.MoveTo(System.String,Alphaleonis.Win32.Filesystem.MoveOptions,Alphaleonis.Win32.Filesystem.CopyMoveProgressRoutine,System.Object)">
            <summary>[AlphaFS] Moves a specified file to a new location, providing the option to specify a new file name, <see cref="T:Alphaleonis.Win32.Filesystem.MoveOptions"/> can be specified,
              <para>and the possibility of notifying the application of its progress through a callback function.</para>
            </summary>
            <returns>A <see cref="T:Alphaleonis.Win32.Filesystem.CopyMoveResult"/> class with the status of the Move action.</returns>
            <remarks>
              <para>Use this method to allow or prevent overwriting of an existing file.</para>
              <para>This method works across disk volumes.</para>
              <para>For example, the file c:\MyFile.txt can be moved to d:\public and renamed NewFile.txt.</para>
              <para>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method.</para>
              <para>If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior.</para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="destinationPath">The path to move the file to, which can specify a different file name.</param>
            <param name="moveOptions"><see cref="T:Alphaleonis.Win32.Filesystem.MoveOptions"/> that specify how the directory is to be moved. This parameter can be <see langword="null"/>.</param>
            <param name="progressHandler">A callback function that is called each time another portion of the directory has been moved. This parameter can be <see langword="null"/>.</param>
            <param name="userProgressData">The argument to be passed to the callback function. This parameter can be <see langword="null"/>.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.MoveTo(System.String,Alphaleonis.Win32.Filesystem.MoveOptions,Alphaleonis.Win32.Filesystem.CopyMoveProgressRoutine,System.Object,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Moves a specified file to a new location, providing the option to specify a new file name, <see cref="T:Alphaleonis.Win32.Filesystem.MoveOptions"/> can be specified.</summary>
            <returns>A <see cref="T:Alphaleonis.Win32.Filesystem.CopyMoveResult"/> class with the status of the Move action.</returns>
            <remarks>
              <para>Use this method to allow or prevent overwriting of an existing file.</para>
              <para>This method works across disk volumes.</para>
              <para>For example, the file c:\MyFile.txt can be moved to d:\public and renamed NewFile.txt.</para>
              <para>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method.</para>
              <para>If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior.</para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="destinationPath">The path to move the file to, which can specify a different file name.</param>
            <param name="moveOptions"><see cref="T:Alphaleonis.Win32.Filesystem.MoveOptions"/> that specify how the directory is to be moved. This parameter can be <see langword="null"/>.</param>
            <param name="progressHandler">A callback function that is called each time another portion of the directory has been moved. This parameter can be <see langword="null"/>.</param>
            <param name="userProgressData">The argument to be passed to the callback function. This parameter can be <see langword="null"/>.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.CopyToMoveToCore(System.String,System.Boolean,System.Nullable{Alphaleonis.Win32.Filesystem.CopyOptions},System.Nullable{Alphaleonis.Win32.Filesystem.MoveOptions},Alphaleonis.Win32.Filesystem.CopyMoveProgressRoutine,System.Object,System.String@,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>Copy/move an existing Non-/Transacted file to a new file, allowing the overwriting of an existing file.</summary>
            <returns>A <see cref="T:Alphaleonis.Win32.Filesystem.CopyMoveResult"/> class with the status of the Copy or Move action.</returns>
            <remarks>
              <para>Option <see cref="F:Alphaleonis.Win32.Filesystem.CopyOptions.NoBuffering"/> is recommended for very large file transfers.</para>
              <para>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method.</para>
              <para>If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior.</para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NotSupportedException"/>
            <exception cref="T:System.UnauthorizedAccessException"/>
            <param name="destinationPath">The destination directory path plus file name.</param>
            <param name="preserveDates"><see langword="true"/> if original Timestamps must be preserved, <see langword="false"/> otherwise.</param>
            <param name="copyOptions"><para>This parameter can be <see langword="null"/>. Use <see cref="T:Alphaleonis.Win32.Filesystem.CopyOptions"/> to specify how the file is to be copied.</para></param>
            <param name="moveOptions"><para>This parameter can be <see langword="null"/>. Use <see cref="T:Alphaleonis.Win32.Filesystem.MoveOptions"/> that specify how the file is to be moved.</para></param>
            <param name="progressHandler"><para>This parameter can be <see langword="null"/>. A callback function that is called each time another portion of the file has been copied.</para></param>
            <param name="userProgressData"><para>This parameter can be <see langword="null"/>. The argument to be passed to the callback function.</para></param>
            <param name="longFullPath">[out] Returns the retrieved long full path.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.AppendText">
            <summary>Creates a <see cref="T:System.IO.StreamWriter"/> that appends text to the file represented by this instance of the <see cref="T:Alphaleonis.Win32.Filesystem.FileInfo"/>.</summary>
            <returns>A new <see cref="T:System.IO.StreamWriter"/></returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.AppendText(System.Text.Encoding)">
            <summary>Creates a <see cref="T:System.IO.StreamWriter"/> that appends text to the file represented by this instance of the <see cref="T:Alphaleonis.Win32.Filesystem.FileInfo"/>.</summary>
            <param name="encoding">The character <see cref="T:System.Text.Encoding"/> to use.</param>
            <returns>A new <see cref="T:System.IO.StreamWriter"/></returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.FileInfo"/> class, which acts as a wrapper for a file path.</summary>
            <param name="fileName">The fully qualified name of the new file, or the relative file name. Do not end the path with the directory separator character.</param>
            <remarks>This constructor does not check if a file exists. This constructor is a placeholder for a string that is used to access the file in subsequent operations.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.#ctor(System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.FileInfo"/> class, which acts as a wrapper for a file path.</summary>
            <param name="fileName">The fully qualified name of the new file, or the relative file name. Do not end the path with the directory separator character.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
            <remarks>This constructor does not check if a file exists. This constructor is a placeholder for a string that is used to access the file in subsequent operations.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.#ctor(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>[AlphaFS] Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.FileInfo"/> class, which acts as a wrapper for a file path.</summary>
            <param name="transaction">The transaction.</param>
            <param name="fileName">The fully qualified name of the new file, or the relative file name. Do not end the path with the directory separator character.</param>
            <remarks>This constructor does not check if a file exists. This constructor is a placeholder for a string that is used to access the file in subsequent operations.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileInfo.#ctor(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>[AlphaFS] Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.FileInfo"/> class, which acts as a wrapper for a file path.</summary>
            <param name="transaction">The transaction.</param>
            <param name="fileName">The fully qualified name of the new file, or the relative file name. Do not end the path with the directory separator character.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
            <remarks>This constructor does not check if a file exists. This constructor is a placeholder for a string that is used to access the file in subsequent operations.</remarks>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileInfo.Directory">
            <summary>Gets an instance of the parent directory.</summary>
            <value>A <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> object representing the parent directory of this file.</value>
            <remarks>To get the parent directory as a string, use the DirectoryName property.</remarks>
            <exception cref="T:System.IO.DirectoryNotFoundException"/>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileInfo.DirectoryName">
            <summary>Gets a string representing the directory's full path.</summary>
            <value>A string representing the directory's full path.</value>
            <remarks>
              <para>To get the parent directory as a DirectoryInfo object, use the Directory property.</para>
              <para>When first called, FileInfo calls Refresh and caches information about the file.</para>
              <para>On subsequent calls, you must call Refresh to get the latest copy of the information.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileInfo.Exists">
            <summary>Gets a value indicating whether the file exists.</summary>
            <value><see langword="true"/> if the file exists; otherwise, <see langword="false"/>.</value>
            <remarks>
              <para>The <see cref="P:Alphaleonis.Win32.Filesystem.FileInfo.Exists"/> property returns <see langword="false"/> if any error occurs while trying to determine if the specified file exists.</para>
              <para>This can occur in situations that raise exceptions such as passing a file name with invalid characters or too many characters,</para>
              <para>a failing or missing disk, or if the caller does not have permission to read the file.</para>
            </remarks>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileInfo.IsReadOnly">
            <summary>Gets or sets a value that determines if the current file is read only.</summary>
            <value><see langword="true"/> if the current file is read only; otherwise, <see langword="false"/>.</value>
            <remarks>
              <para>Use the IsReadOnly property to quickly determine or change whether the current file is read only.</para>
              <para>When first called, FileInfo calls Refresh and caches information about the file.</para>
              <para>On subsequent calls, you must call Refresh to get the latest copy of the information.</para>
            </remarks>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileInfo.Length">
            <summary>Gets the size, in bytes, of the current file.</summary>
            <value>The size of the current file in bytes.</value>
            <remarks>
              <para>The value of the Length property is pre-cached</para>
              <para>To get the latest value, call the Refresh method.</para>
            </remarks>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileInfo.Name">
            <summary>Gets the name of the file.</summary>
            <value>The name of the file.</value>
            <remarks>
              <para>The name of the file includes the file extension.</para>
              <para>When first called, <see cref="T:Alphaleonis.Win32.Filesystem.FileInfo"/> calls Refresh and caches information about the file.</para>
              <para>On subsequent calls, you must call Refresh to get the latest copy of the information.</para>
              <para>The name of the file includes the file extension.</para>
            </remarks>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.ExtendedFileAttributes">
            <summary>Specifies how the operating system should open a file.</summary>   
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.ExtendedFileAttributes.None">
            <summary>If you pass <see cref="F:Alphaleonis.Win32.Filesystem.ExtendedFileAttributes.None"/>, the set of attributes is unspecified. <see cref="F:Alphaleonis.Win32.Filesystem.ExtendedFileAttributes.Normal"/> explicitly sets no attributes.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.ExtendedFileAttributes.ReadOnly">
            <summary>The file is read only. Applications can read the file, but cannot write to or delete it.</summary>
            <remarks>Equals <see cref="F:System.IO.FileAttributes.ReadOnly"/>1</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.ExtendedFileAttributes.Hidden">
            <summary>The file is hidden. Do not include it in an ordinary directory listing.</summary>
            <remarks>Equals <see cref="F:System.IO.FileAttributes.Hidden"/>2</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.ExtendedFileAttributes.System">
            <summary>The file is part of or used exclusively by an operating system.</summary>
            <remarks>Equals <see cref="F:System.IO.FileAttributes.System"/>4</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.ExtendedFileAttributes.Directory">
            <summary>The handle that identifies a directory.</summary>
            <remarks>Equals <see cref="F:System.IO.FileAttributes.Directory"/>16</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.ExtendedFileAttributes.Archive">
            <summary>The file should be archived. Applications use this attribute to mark files for backup or removal.</summary>
            <remarks>Equals <see cref="F:System.IO.FileAttributes.Archive"/>32</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.ExtendedFileAttributes.Device">
            <summary>The file should be archived. Applications use this attribute to mark files for backup or removal.</summary>
            <remarks>Equals <see cref="F:System.IO.FileAttributes.Device"/>64</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.ExtendedFileAttributes.Normal">
            <summary>The file does not have other attributes set. This attribute is valid only if used alone.</summary>
            <remarks>Equals <see cref="F:System.IO.FileAttributes.Normal"/>128</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.ExtendedFileAttributes.Temporary">
            <summary>The file is being used for temporary storage.</summary>
            <remarks>Equals <see cref="F:System.IO.FileAttributes.Temporary"/>256</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.ExtendedFileAttributes.SparseFile">
            <summary>A file that is a sparse file.</summary>
            <remarks>Equals <see cref="F:System.IO.FileAttributes.SparseFile"/>512</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.ExtendedFileAttributes.ReparsePoint">
            <summary>A file or directory that has an associated reparse point, or a file that is a symbolic link.</summary>
            <remarks>Equals <see cref="F:System.IO.FileAttributes.ReparsePoint"/>1024</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.ExtendedFileAttributes.Compressed">
            <summary>A file or directory that is compressed. For a file, all of the data in the file is compressed. For a directory, compression is the default for newly created files and subdirectories.</summary>
            <remarks>Equals <see cref="F:System.IO.FileAttributes.Compressed"/>2048</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.ExtendedFileAttributes.Offline">
            <summary>The data of a file is not immediately available. This attribute indicates that file data is physically moved to offline storage. This attribute is used by Remote Storage, the hierarchical storage management software. Applications should not arbitrarily change this attribute.</summary>
            <remarks>Equals <see cref="F:System.IO.FileAttributes.Offline"/>4096</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.ExtendedFileAttributes.NotContentIndexed">
            <summary>The file or directory is not to be indexed by the content indexing service.</summary>
            <remarks>Equals <see cref="F:System.IO.FileAttributes.NotContentIndexed"/>8192</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.ExtendedFileAttributes.Encrypted">
            <summary>The file or directory is encrypted. For a file, this means that all data in the file is encrypted. For a directory, this means that encryption is the default for newly created files and subdirectories.</summary>
            <remarks>Equals <see cref="F:System.IO.FileOptions.Encrypted"/>16384</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.ExtendedFileAttributes.IntegrityStream">
            <summary>The directory or user data stream is configured with integrity (only supported on ReFS volumes). It is not included in an ordinary directory listing. The integrity setting persists with the file if it's renamed. If a file is copied the destination file will have integrity set if either the source file or destination directory have integrity set.</summary>
            <remarks>This flag is not supported until Windows Server 2012.</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.ExtendedFileAttributes.NoScrubData">
            <summary>The user data stream not to be read by the background data integrity scanner (AKA scrubber). When set on a directory it only provides inheritance. This flag is only supported on Storage Spaces and ReFS volumes. It is not included in an ordinary directory listing.</summary>
            <remarks>This flag is not supported until Windows Server 2012.</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.ExtendedFileAttributes.FirstPipeInstance">
            <summary>...</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.ExtendedFileAttributes.OpenNoRecall">
            <summary>The file data is requested, but it should continue to be located in remote storage. It should not be transported back to local storage. This flag is for use by remote storage systems.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.ExtendedFileAttributes.OpenReparsePoint">
            <summary>Normal reparse point processing will not occur; an attempt to open the reparse point will be made. When a file is opened, a file handle is returned, whether or not the filter that controls the reparse point is operational. See MSDN documentation for more information.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.ExtendedFileAttributes.PosixSemantics">
            <summary>Access will occur according to POSIX rules. This includes allowing multiple files with names, differing only in case, for file systems that support that naming. Use care when using this option, because files created with this flag may not be accessible by applications that are written for MS-DOS or 16-bit Windows.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.ExtendedFileAttributes.BackupSemantics">
            <summary>The file is being opened or created for a backup or restore operation. The system ensures that the calling process overrides file security checks when the process has SE_BACKUP_NAME and SE_RESTORE_NAME privileges. You must set this flag to obtain a handle to a directory. A directory handle can be passed to some functions instead of a file handle.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.ExtendedFileAttributes.DeleteOnClose">
            <summary>The file is to be deleted immediately after all of its handles are closed, which includes the specified handle and any other open or duplicated handles. If there are existing open handles to a file, the call fails unless they were all opened with the <see cref="F:System.IO.FileShare.Delete"/> share mode. Subsequent open requests for the file fail, unless the <see cref="F:System.IO.FileShare.Delete"/> share mode is specified.</summary>
            <remarks>Equals <see cref="F:System.IO.FileOptions.DeleteOnClose"/>67108864</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.ExtendedFileAttributes.SequentialScan">
            <summary>Access is intended to be sequential from beginning to end. The system can use this as a hint to optimize file caching.</summary>
            <remarks>Equals <see cref="F:System.IO.FileOptions.SequentialScan"/>134217728</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.ExtendedFileAttributes.RandomAccess">
            <summary>Access is intended to be random. The system can use this as a hint to optimize file caching.</summary>
            <remarks>Equals <see cref="F:System.IO.FileOptions.RandomAccess"/>268435456</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.ExtendedFileAttributes.NoBuffering">
            <summary>There are strict requirements for successfully working with files opened with the <see cref="F:Alphaleonis.Win32.Filesystem.ExtendedFileAttributes.NoBuffering"/> flag, for details see the section on "File Buffering" in the online MSDN documentation.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.ExtendedFileAttributes.Overlapped">
            <summary>The file or device is being opened or created for asynchronous I/O.</summary>
            <remarks>Equals <see cref="F:System.IO.FileOptions.Asynchronous"/>1073741824</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.ExtendedFileAttributes.WriteThrough">
            <summary>Write operations will not go through any intermediate cache, they will go directly to disk.</summary>
            <remarks>Equals .NET <see cref="F:System.IO.FileOptions.WriteThrough"/>-2147483648</remarks>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.FindFileSystemEntryInfo">
            <summary>Class that retrieves file system entries (i.e. files and directories) using Win32 API FindFirst()/FindNext().</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FindFileSystemEntryInfo.Enumerate``1">
            <summary>Get an enumerator that returns all of the file system objects that match the wildcards that are in any of the directories to be searched.</summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance: FileSystemEntryInfo, DirectoryInfo, FileInfo or string (full path).</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FindFileSystemEntryInfo.Get``1">
            <summary>Gets a specific file system object.</summary>
            <returns>
            <para>The return type is based on C# inference. Possible return types are:</para>
            <para> <see cref="T:System.String"/>- (full path), <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemInfo"/>- (<see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> or <see cref="T:Alphaleonis.Win32.Filesystem.FileInfo"/>), <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo"/> instance</para>
            <para>or null in case an Exception is raised and <see cref="P:Alphaleonis.Win32.Filesystem.FindFileSystemEntryInfo.ContinueOnException"/> is <see langword="true"/>.</para>
            </returns>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FindFileSystemEntryInfo.AsFileSystemInfo">
            <summary>Gets or sets the ability to return the object as a <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemInfo"/> instance.</summary>
            <value><see langword="true"/> returns the object as a <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemInfo"/> instance.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FindFileSystemEntryInfo.AsLongPath">
            <summary>Gets or sets the ability to return the full path in long full path format.</summary>
            <value><see langword="true"/> returns the full path in long full path format, <see langword="false"/> returns the full path in regular path format.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FindFileSystemEntryInfo.AsString">
            <summary>Gets or sets the ability to return the object instance as a <see cref="T:System.String"/>.</summary>
            <value><see langword="true"/> returns the full path of the object as a <see cref="T:System.String"/></value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FindFileSystemEntryInfo.FindExInfoLevel">
            <summary>Gets the value indicating which <see cref="T:Alphaleonis.Win32.Filesystem.NativeMethods.FINDEX_INFO_LEVELS"/> to use.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FindFileSystemEntryInfo.ContinueOnException">
            <summary>Gets or sets the ability to skip on access errors.</summary>
            <value><see langword="true"/> suppress any Exception that might be thrown as a result from a failure, such as ACLs protected directories or non-accessible reparse points.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FindFileSystemEntryInfo.FileSystemObjectType">
            <summary>Gets the file system object type.</summary>
            <value>
            <see langword="null"/> = Return files and directories.
            <see langword="true"/> = Return only directories.
            <see langword="false"/> = Return only files.
            </value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FindFileSystemEntryInfo.IsRelativePath">
            <summary>Gets or sets if the path is an absolute or relative path.</summary>
            <value>Gets a value indicating whether the specified path string contains absolute or relative path information.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FindFileSystemEntryInfo.OriginalInputPath">
            <summary>Gets or sets the initial path to the folder.</summary>
            <value>The initial path to the file or folder in long path format.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FindFileSystemEntryInfo.InputPath">
            <summary>Gets or sets the path to the folder.</summary>
            <value>The path to the file or folder in long path format.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FindFileSystemEntryInfo.IsDirectory">
            <summary>Gets or sets a value indicating which <see cref="T:Alphaleonis.Win32.Filesystem.NativeMethods.FINDEX_INFO_LEVELS"/> to use.</summary>
            <value><see langword="true"/> indicates a folder object, <see langword="false"/> indicates a file object.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FindFileSystemEntryInfo.LargeCache">
            <summary>Gets the value indicating which <see cref="T:Alphaleonis.Win32.Filesystem.NativeMethods.FindExAdditionalFlags"/> to use.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FindFileSystemEntryInfo.Recursive">
            <summary>Specifies whether the search should include only the current directory or should include all subdirectories.</summary>
            <value><see langword="true"/> to all subdirectories.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FindFileSystemEntryInfo.SearchPattern">
            <summary>Search for file system object-name using a pattern.</summary>
            <value>The path which has wildcard characters, for example, an asterisk (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll"/>) or a question mark (<see cref="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion"/>).</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FindFileSystemEntryInfo.SkipReparsePoints">
            <summary><see langword="true"/> skips ReparsePoints, <see langword="false"/> will follow ReparsePoints.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FindFileSystemEntryInfo.Transaction">
            <summary>Get or sets the KernelTransaction instance.</summary>
            <value>The transaction.</value>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo">
            <summary>Represents information about a file system entry.
            <para>This class cannot be inherited.</para>
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo.#ctor(Alphaleonis.Win32.Filesystem.NativeMethods.WIN32_FIND_DATA)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo"/> class.</summary>
            <param name="findData">The NativeMethods.WIN32_FIND_DATA structure.</param>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo.AlternateFileName">
            <summary>Gets the 8.3 version of the filename.</summary>
            <value>the 8.3 version of the filename.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo.Attributes">
            <summary>Gets the attributes.</summary>
            <value>The attributes.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo.CreationTime">
            <summary>Gets the time this entry was created.</summary>
            <value>The time this entry was created.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo.CreationTimeUtc">
            <summary>Gets the time, in coordinated universal time (UTC), this entry was created.</summary>
            <value>The time, in coordinated universal time (UTC), this entry was created.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo.FileName">
            <summary>Gets the name of the file.</summary>
            <value>The name of the file.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo.FileSize">
            <summary>Gets the size of the file.</summary>
            <value>The size of the file.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo.FullPath">
            <summary>The full path of the file system object.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo.IsCompressed">
            <summary>Gets a value indicating whether this instance is compressed.</summary>
            <value><see langword="true"/> if this instance is compressed; otherwise, <see langword="false"/>.</value>
            <remarks>
            It is not possible to change the compression status of a File object by using the SetAttributes method.
            Instead, you must actually compress the file using either a compression tool or one of the classes in the <see cref="N:System.IO.Compression"/> namespace.
            </remarks>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo.IsHidden">
            <summary>Gets a value indicating whether this instance is hidden, and thus is not included in an ordinary directory listing.</summary>
            <value><see langword="true"/> if this instance is hidden; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo.IsDirectory">
            <summary>Gets a value indicating whether this instance represents a directory.</summary>
            <value><see langword="true"/> if this instance represents a directory; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo.IsEncrypted">
            <summary>Gets a value indicating whether this instance is encrypted (EFS).</summary>
            <value><see langword="true"/> if this instance is encrypted (EFS); otherwise, <see langword="false"/>.</value>
            <remarks>
            For a file, this means that all data in the file is encrypted.
            For a directory, this means that encryption is the default for newly created files and directories.
            </remarks>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo.IsMountPoint">
            <summary>Gets a value indicating whether this instance is a mount point.</summary>
            <value><see langword="true"/> if this instance is a mount point; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo.IsOffline">
            <summary>Gets a value indicating whether this instance is offline. The data of the file is not immediately available.</summary>
            <value><see langword="true"/> if this instance is offline; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo.IsReadOnly">
            <summary>Gets a value indicating whether this instance is read-only.</summary>
            <value><see langword="true"/> if this instance is read-only; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo.IsReparsePoint">
            <summary>Gets a value indicating whether this instance contains a reparse point, which is a block of user-defined data associated with a file or a directory.</summary>
            <value><see langword="true"/> if this instance contains a reparse point; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo.IsSymbolicLink">
            <summary>Gets a value indicating whether this instance is a symbolic link.</summary>
            <value><see langword="true"/> if this instance is a symbolic link; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo.LastAccessTime">
            <summary>Gets the time this entry was last accessed.</summary>
            <value>The time this entry was last accessed.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo.LastAccessTimeUtc">
            <summary>Gets the time, in coordinated universal time (UTC), this entry was last accessed.</summary>
            <value>The time, in coordinated universal time (UTC), this entry was last accessed.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo.LastWriteTime">
            <summary>Gets the time this entry was last modified.</summary>
            <value>The time this entry was last modified.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo.LastWriteTimeUtc">
            <summary>Gets the time, in coordinated universal time (UTC), this entry was last modified.</summary>
            <value>The time, in coordinated universal time (UTC), this entry was last modified.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo.LongFullPath">
            <summary>The full path of the file system object in Unicode (LongPath) format.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo.ReparsePointTag">
            <summary>Gets the reparse point tag of this entry.</summary>
            <value>The reparse point tag of this entry.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo.Win32FindData">
            <summary>Gets internal WIN32 FIND Data</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo.ToString">
            <summary>Returns the <see cref="P:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo.FullPath"/> of the <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo"/> instance.</summary>
            <returns>The <see cref="P:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo.FullPath"/> instance as a string.</returns>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.FileSystemInfo">
            <summary>Provides the base class for both <see cref="T:Alphaleonis.Win32.Filesystem.FileInfo"/> and <see cref="T:Alphaleonis.Win32.Filesystem.DirectoryInfo"/> objects.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileSystemInfo.Delete">
            <summary>Deletes a file or directory.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileSystemInfo.Refresh">
            <summary>Refreshes the state of the object.</summary>
            <remarks>
              <para>FileSystemInfo.Refresh() takes a snapshot of the file from the current file system.</para>
              <para>Refresh cannot correct the underlying file system even if the file system returns incorrect or outdated information.</para>
              <para>This can happen on platforms such as Windows 98.</para>
              <para>Calls must be made to Refresh() before attempting to get the attribute information, or the information will be
              outdated.</para>
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileSystemInfo.ToString">
            <summary>Returns a string that represents the current object.</summary>
            <remarks>
              ToString is the major formatting method in the .NET Framework. It converts an object to its string representation so that it is
              suitable for display.
            </remarks>
            <returns>A string that represents this instance.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileSystemInfo.Equals(System.Object)">
            <summary>Determines whether the specified Object is equal to the current Object.</summary>
            <param name="obj">Another object to compare to.</param>
            <returns><see langword="true"/> if the specified Object is equal to the current Object; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileSystemInfo.GetHashCode">
            <summary>Serves as a hash function for a particular type.</summary>
            <returns>A hash code for the current Object.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileSystemInfo.op_Equality(Alphaleonis.Win32.Filesystem.FileSystemInfo,Alphaleonis.Win32.Filesystem.FileSystemInfo)">
            <summary>Implements the operator ==</summary>
            <param name="left">A.</param>
            <param name="right">B.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileSystemInfo.op_Inequality(Alphaleonis.Win32.Filesystem.FileSystemInfo,Alphaleonis.Win32.Filesystem.FileSystemInfo)">
            <summary>Implements the operator !=</summary>
            <param name="left">A.</param>
            <param name="right">B.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileSystemInfo.RefreshEntryInfo">
            <summary>Refreshes the state of the <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo"/> EntryInfo instance.</summary>
            <remarks>
              <para>FileSystemInfo.RefreshEntryInfo() takes a snapshot of the file from the current file system.</para>
              <para>Refresh cannot correct the underlying file system even if the file system returns incorrect or outdated information.</para>
              <para>This can happen on platforms such as Windows 98.</para>
              <para>Calls must be made to Refresh() before attempting to get the attribute information, or the information will be outdated.</para>
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileSystemInfo.Reset">
            <summary>[AlphaFS] Resets the state of the file system object to uninitialized.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.FileSystemInfo.InitializeCore(System.Boolean,Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>Initializes the specified file name.</summary>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.NotSupportedException"/>
            <param name="isFolder">Specifies that <paramref name="path"/> is a file or directory.</param>
            <param name="transaction">The transaction.</param>
            <param name="path">The full path and name of the file.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemInfo.Attributes">
             <summary>
               Gets or sets the attributes for the current file or directory.
             </summary>
             <remarks>
               <para>The value of the CreationTime property is pre-cached</para>
               <para>To get the latest value, call the Refresh method.</para>
             </remarks>
             <value><see cref="T:System.IO.FileAttributes"/> of the current <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemInfo"/>.</value>
            
             <exception cref="T:System.IO.FileNotFoundException"/>
             <exception cref="T:System.IO.DirectoryNotFoundException"/>
             <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemInfo.CreationTime">
             <summary>Gets or sets the creation time of the current file or directory.</summary>
             <remarks>
               <para>The value of the CreationTime property is pre-cached To get the latest value, call the Refresh method.</para>
               <para>This method may return an inaccurate value, because it uses native functions whose values may not be continuously updated by
               the operating system.</para>
               <para>If the file described in the FileSystemInfo object does not exist, this property will return
               12:00 midnight, January 1, 1601 A.D. (C.E.) Coordinated Universal Time (UTC), adjusted to local time.</para>
               <para>NTFS-formatted drives may cache file meta-info, such as file creation time, for a short period of time.
               This process is known as file tunneling. As a result, it may be necessary to explicitly set the creation time of a file if you are
               overwriting or replacing an existing file.</para>
             </remarks>
             <value>The creation date and time of the current <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemInfo"/> object.</value>
            
             <exception cref="T:System.IO.DirectoryNotFoundException"/>
             <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemInfo.CreationTimeUtc">
             <summary>Gets or sets the creation time, in coordinated universal time (UTC), of the current file or directory.</summary>
             <remarks>
               <para>The value of the CreationTimeUtc property is pre-cached
               To get the latest value, call the Refresh method.</para>
               <para>This method may return an inaccurate value, because it uses native functions
               whose values may not be continuously updated by the operating system.</para>
               <para>To get the latest value, call the Refresh method.</para>
               <para>If the file described in the FileSystemInfo object does not exist, this property will return
               12:00 midnight, January 1, 1601 A.D. (C.E.) Coordinated Universal Time (UTC).</para>
               <para>NTFS-formatted drives may cache file meta-info, such as file creation time, for a short period of time.
               This process is known as file tunneling. As a result, it may be necessary to explicitly set the creation time
               of a file if you are overwriting or replacing an existing file.</para>
             </remarks>
             <value>The creation date and time in UTC format of the current <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemInfo"/> object.</value>
            
             <exception cref="T:System.IO.DirectoryNotFoundException"/>
             <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemInfo.Exists">
            <summary>
              Gets a value indicating whether the file or directory exists.
            </summary>
            <remarks>
              <para>The <see cref="P:Alphaleonis.Win32.Filesystem.FileSystemInfo.Exists"/> property returns <see langword="false"/> if any error occurs while trying to determine if the
              specified file or directory exists.</para>
              <para>This can occur in situations that raise exceptions such as passing a directory- or file name with invalid characters or too
              many characters,</para>
              <para>a failing or missing disk, or if the caller does not have permission to read the file or directory.</para>
            </remarks>
            <value><see langword="true"/> if the file or directory exists; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemInfo.Extension">
            <summary>
              Gets the string representing the extension part of the file.
            </summary>
            <remarks>
              <para>The Extension property returns the <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemInfo"/> extension, including the period (.).</para>
              <para>For example, for a file c:\NewFile.txt, this property returns ".txt".</para>
            </remarks>
            <value>A string containing the <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemInfo"/> extension.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemInfo.FullName">
            <summary>
              Gets the full path of the directory or file.
            </summary>
            <value>A string containing the full path.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemInfo.LastAccessTime">
             <summary>Gets or sets the time the current file or directory was last accessed.</summary>
             <remarks>
               <para>The value of the LastAccessTime property is pre-cached
               To get the latest value, call the Refresh method.</para>
               <para>This method may return an inaccurate value, because it uses native functions
               whose values may not be continuously updated by the operating system.</para>
               <para>If the file described in the FileSystemInfo object does not exist, this property will return
               12:00 midnight, January 1, 1601 A.D. (C.E.) Coordinated Universal Time (UTC), adjusted to local time.</para>
             </remarks>
             <value>The time that the current file or directory was last accessed.</value>
            
             <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemInfo.LastAccessTimeUtc">
             <summary>Gets or sets the time, in coordinated universal time (UTC), that the current file or directory was last accessed.</summary>
             <remarks>
               <para>The value of the LastAccessTimeUtc property is pre-cached.
               To get the latest value, call the Refresh method.</para>
               <para>This method may return an inaccurate value, because it uses native functions
               whose values may not be continuously updated by the operating system.</para>
               <para>If the file described in the FileSystemInfo object does not exist, this property will return
               12:00 midnight, January 1, 1601 A.D. (C.E.) Coordinated Universal Time (UTC), adjusted to local time.</para>
             </remarks>
             <value>The UTC time that the current file or directory was last accessed.</value>
            
             <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemInfo.LastWriteTime">
             <summary>Gets or sets the time when the current file or directory was last written to.</summary>
             <remarks>
               <para>The value of the LastWriteTime property is pre-cached.
               To get the latest value, call the Refresh method.</para>
               <para>This method may return an inaccurate value, because it uses native functions
               whose values may not be continuously updated by the operating system.</para>
               <para>If the file described in the FileSystemInfo object does not exist, this property will return
               12:00 midnight, January 1, 1601 A.D. (C.E.) Coordinated Universal Time (UTC), adjusted to local time.</para>
             </remarks>
             <value>The time the current file was last written.</value>
            
             <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemInfo.LastWriteTimeUtc">
            <summary>Gets or sets the time, in coordinated universal time (UTC), when the current file or directory was last written to.</summary>
            <remarks>
              <para>The value of the LastWriteTimeUtc property is pre-cached. To get the latest value, call the Refresh method.</para>
              <para>This method may return an inaccurate value, because it uses native functions whose values may not be continuously updated by
              the operating system.</para>
              <para>If the file described in the FileSystemInfo object does not exist, this property will return 12:00 midnight, January 1, 1601
              A.D. (C.E.) Coordinated Universal Time (UTC), adjusted to local time.</para>
            </remarks>
            <value>The UTC time when the current file was last written to.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemInfo.Name">
            <summary>
              For files, gets the name of the file. For directories, gets the name of the last directory in the hierarchy if a hierarchy exists.
              <para>Otherwise, the Name property gets the name of the directory.</para>
            </summary>
            <remarks>
              <para>For a directory, Name returns only the name of the parent directory, such as Dir, not c:\Dir.</para>
              <para>For a subdirectory, Name returns only the name of the subdirectory, such as Sub1, not c:\Dir\Sub1.</para>
              <para>For a file, Name returns only the file name and file name extension, such as MyFile.txt, not c:\Dir\Myfile.txt.</para>
            </remarks>
            <value>
              <para>A string that is the name of the parent directory, the name of the last directory in the hierarchy,</para>
              <para>or the name of a file, including the file name extension.</para>
            </value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemInfo.DisplayPath">
            <summary>Returns the path as a string.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemInfo.EntryInfo">
            <summary>[AlphaFS] Gets the instance of the <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemEntryInfo"/> class.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemInfo.IsDirectory">
            <summary>[AlphaFS] The initial "IsDirectory" indicator that was passed to the constructor.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemInfo.LongFullName">
            <summary>The full path of the file system object in Unicode (LongPath) format.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.FileSystemInfo.Transaction">
            <summary>[AlphaFS] Represents the KernelTransaction that was passed to the constructor.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileSystemInfo.FullPath">
            <summary>Represents the fully qualified path of the file or directory.</summary>
            <remarks>
              <para>Classes derived from <see cref="T:Alphaleonis.Win32.Filesystem.FileSystemInfo"/> can use the FullPath field</para>
              <para>to determine the full path of the object being manipulated.</para>
            </remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.FileSystemInfo.OriginalPath">
            <summary>The path originally specified by the user, whether relative or absolute.</summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.GetFullPathOptions">
            <summary>A bitfield of flags for specifying options for various internal operations that convert paths to full paths.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.GetFullPathOptions.None">
            <summary>No special options applies.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.GetFullPathOptions.TrimEnd">
            <summary>Remove any trailing whitespace from the path.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.GetFullPathOptions.AddTrailingDirectorySeparator">
            <summary>Add a trailing directory separator to the path (if one does not already exist).</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.GetFullPathOptions.RemoveTrailingDirectorySeparator">
            <summary>Remove the trailing directory separator from the path (if one exists).</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.GetFullPathOptions.AsLongPath">
            <summary>Return full path as long full path (Unicode format). Not valid for <see cref="M:Alphaleonis.Win32.Filesystem.Path.GetRegularPath(System.String)"/>.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.GetFullPathOptions.ContinueOnNonExist">
            <summary>Prevents any exception from being thrown if a filesystem object does not exist. Not valid for <see cref="M:Alphaleonis.Win32.Filesystem.Path.GetRegularPath(System.String)"/>.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.GetFullPathOptions.CheckInvalidPathChars">
            <summary>Check that the path contains only valid path-characters.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.GetFullPathOptions.CheckAdditional">
            <summary>Also check for wildcard (? and *) characters.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.GetFullPathOptions.KeepDotOrSpace">
            <summary>Do not trim the trailing dot or space.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.GetFullPathOptions.FullCheck">
            <summary>Performs both <see cref="F:Alphaleonis.Win32.Filesystem.GetFullPathOptions.CheckInvalidPathChars"/> and <see cref="F:Alphaleonis.Win32.Filesystem.GetFullPathOptions.CheckAdditional"/> checks.</summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.Path">
            <summary>Performs operations on String instances that contain file or directory path information. These operations are performed in a cross-platform manner.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.HasExtension(System.String)">
            <summary>Determines whether a path includes a file name extension.</summary>
            <returns><see langword="true"/> if the characters that follow the last directory separator (\\ or /) or volume separator (:) in the path include a period (.) followed by one or more characters; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentException"/>
            <param name="path">The path to search for an extension. The path cannot contain any of the characters defined in <see cref="M:Alphaleonis.Win32.Filesystem.Path.GetInvalidPathChars"/>.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.IsPathRooted(System.String)">
            <summary>Gets a value indicating whether the specified path string contains absolute or relative path information.</summary>
            <returns><see langword="true"/> if <paramref name="path"/> contains a root; otherwise, <see langword="false"/>.</returns>
            <remarks>
              The IsPathRooted method returns <see langword="true"/> if the first character is a directory separator character such as
              <see cref="F:Alphaleonis.Win32.Filesystem.Path.DirectorySeparatorChar"/>, or if the path starts with a drive letter and colon (<see cref="F:Alphaleonis.Win32.Filesystem.Path.VolumeSeparatorChar"/>).
              For example, it returns true for path strings such as "\\MyDir\\MyFile.txt", "C:\\MyDir", or "C:MyDir".
              It returns <see langword="false"/> for path strings such as "MyDir".
            </remarks>
            <remarks>This method does not verify that the path or file name exists.</remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <param name="path">The path to test. The path cannot contain any of the characters defined in <see cref="M:Alphaleonis.Win32.Filesystem.Path.GetInvalidPathChars"/>.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.IsPathRooted(System.String,System.Boolean)">
            <summary>[AlphaFS] Gets a value indicating whether the specified path string contains absolute or relative path information.</summary>
            <returns><see langword="true"/> if <paramref name="path"/> contains a root; otherwise, <see langword="false"/>.</returns>
            <remarks>
              The IsPathRooted method returns true if the first character is a directory separator character such as
              <see cref="F:Alphaleonis.Win32.Filesystem.Path.DirectorySeparatorChar"/>, or if the path starts with a drive letter and colon (<see cref="F:Alphaleonis.Win32.Filesystem.Path.VolumeSeparatorChar"/>).
              For example, it returns <see langword="true"/> for path strings such as "\\MyDir\\MyFile.txt", "C:\\MyDir", or "C:MyDir".
              It returns <see langword="false"/> for path strings such as "MyDir".
            </remarks>
            <remarks>This method does not verify that the path or file name exists.</remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <param name="path">The path to test. The path cannot contain any of the characters defined in <see cref="M:Alphaleonis.Win32.Filesystem.Path.GetInvalidPathChars"/>.</param>
            <param name="checkInvalidPathChars"><see langword="true"/> will check <paramref name="path"/> for invalid path characters.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.IsValidName(System.String)">
            <summary>[AlphaFS] Check if file or folder name has any invalid characters.</summary>
            <exception cref="T:System.ArgumentNullException"/>
            <param name="name">File or folder name.</param>
            <returns><see langword="true"/> if name contains any invalid characters. Otherwise <see langword="false"/></returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.CheckSupportedPathFormat(System.String,System.Boolean,System.Boolean)">
            <summary>Checks that the given path format is supported.</summary>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.NotSupportedException"/>
            <param name="path">A path to the file or directory.</param>
            <param name="checkInvalidPathChars">Checks that the path contains only valid path-characters.</param>
            <param name="checkAdditional">.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.CheckInvalidPathChars(System.String,System.Boolean,System.Boolean)">
            <summary>Checks that the path contains only valid path-characters.</summary>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentException"/>
            <param name="path">A path to the file or directory.</param>
            <param name="checkAdditional"><see langword="true"/> also checks for ? and * characters.</param>
            <param name="allowEmpty">When <see langword="false"/>, throws an <see cref="T:System.ArgumentException"/>.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.DosDeviceToDosPath(System.String,System.String)">
            <summary>Tranlates DosDevicePath, Volume GUID. For example: "\Device\HarddiskVolumeX\path\filename.ext" can translate to: "\path\filename.ext" or: "\\?\Volume{GUID}\path\filename.ext".</summary>
            <returns>A translated dos path.</returns>
            <param name="dosDevice">A DosDevicePath, for example: \Device\HarddiskVolumeX\path\filename.ext.</param>
            <param name="deviceReplacement">Alternate path/device text, usually <c>string.Empty</c> or <see langword="null"/>.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.IsDVsc(System.Char,System.Nullable{System.Boolean})">
            <summary>Check if <paramref name="c"/> is a directory- and/or volume-separator character.</summary>
            <returns><see langword="true"/> if <paramref name="c"/> is a separator character.</returns>
            <param name="c">The character to check.</param>
            <param name="checkSeparatorChar">
              If <see langword="null"/>, checks for all separator characters: <see cref="F:Alphaleonis.Win32.Filesystem.Path.DirectorySeparatorChar"/>,
              <see cref="F:Alphaleonis.Win32.Filesystem.Path.AltDirectorySeparatorChar"/> and <see cref="F:Alphaleonis.Win32.Filesystem.Path.VolumeSeparatorChar"/>
              If <see langword="false"/>, only checks for: <see cref="F:Alphaleonis.Win32.Filesystem.Path.DirectorySeparatorChar"/> and <see cref="F:Alphaleonis.Win32.Filesystem.Path.AltDirectorySeparatorChar"/>
              If <see langword="true"/> only checks for: <see cref="F:Alphaleonis.Win32.Filesystem.Path.VolumeSeparatorChar"/>
            </param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.ChangeExtension(System.String,System.String)">
            <summary>Changes the extension of a path string.</summary>
            <returns>The modified path information.</returns>
            <exception cref="T:System.ArgumentException"/>
            <param name="path">The path information to modify. The path cannot contain any of the characters defined in <see cref="M:Alphaleonis.Win32.Filesystem.Path.GetInvalidPathChars"/>.</param>
            <param name="extension">The new extension (with or without a leading period). Specify <see langword="null"/> to remove an existing extension from path.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetDirectoryName(System.String)">
            <summary>Returns the directory information for the specified path string.</summary>
            <returns>
              <para>Directory information for <paramref name="path"/>, or <see langword="null"/> if <paramref name="path"/> denotes a root directory or is
              <see langword="null"/>.</para>
              <para>Returns <see cref="F:System.String.Empty"/> if <paramref name="path"/> does not contain directory information.</para>
            </returns>
            <exception cref="T:System.ArgumentException"/>
            <param name="path">The path of a file or directory.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetDirectoryName(System.String,System.Boolean)">
            <summary>[AlphaFS] Returns the directory information for the specified path string.</summary>
            <returns>
              Directory information for <paramref name="path"/>, or <see langword="null"/> if <paramref name="path"/> denotes a root directory or is
              <see langword="null"/>. Returns <see cref="F:System.String.Empty"/> if <paramref name="path"/> does not contain directory information.
            </returns>
            <exception cref="T:System.ArgumentException"/>
            <param name="path">The path of a file or directory.</param>
            <param name="checkInvalidPathChars"><see langword="true"/> will check <paramref name="path"/> for invalid path characters.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetDirectoryNameWithoutRoot(System.String)">
            <summary>[AlphaFS] Returns the directory information for the specified path string without the root information, for example: "C:\Windows\system32" returns: "Windows".</summary>
            <returns>The <paramref name="path"/>without the file name part and without the root information (if any), or <see langword="null"/> if <paramref name="path"/> is <see langword="null"/> or if <paramref name="path"/> denotes a root (such as "\", "C:", or * "\\server\share").</returns>
            <param name="path">The path.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetDirectoryNameWithoutRootTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>[AlphaFS] Returns the directory information for the specified path string without the root information, for example: "C:\Windows\system32" returns: "Windows".</summary>
            <returns>The <paramref name="path"/>without the file name part and without the root information (if any), or <see langword="null"/> if <paramref name="path"/> is <see langword="null"/> or if <paramref name="path"/> denotes a root (such as "\", "C:", or * "\\server\share").</returns>
            <param name="transaction">The transaction.</param>
            <param name="path">The path.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetExtension(System.String)">
            <summary>Returns the extension of the specified path string.</summary>
            <returns>
              <para>The extension of the specified path (including the period "."), or null, or <see cref="F:System.String.Empty"/>.</para>
              <para>If <paramref name="path"/> is null, this method returns null.</para>
              <para>If <paramref name="path"/> does not have extension information,
              this method returns <see cref="F:System.String.Empty"/>.</para>
            </returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <param name="path">The path string from which to get the extension. The path cannot contain any of the characters defined in <see cref="M:Alphaleonis.Win32.Filesystem.Path.GetInvalidPathChars"/>.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetExtension(System.String,System.Boolean)">
            <summary>Returns the extension of the specified path string.</summary>
            <returns>
              <para>The extension of the specified path (including the period "."), or null, or <see cref="F:System.String.Empty"/>.</para>
              <para>If <paramref name="path"/> is null, this method returns null.</para>
              <para>If <paramref name="path"/> does not have extension information,
              this method returns <see cref="F:System.String.Empty"/>.</para>
            </returns>
            <exception cref="T:System.ArgumentException"/>
            <param name="path">The path string from which to get the extension. The path cannot contain any of the characters defined in <see cref="M:Alphaleonis.Win32.Filesystem.Path.GetInvalidPathChars"/>.</param>
            <param name="checkInvalidPathChars"><see langword="true"/> will check <paramref name="path"/> for invalid path characters.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetFileName(System.String)">
            <summary>Returns the file name and extension of the specified path string.</summary>
            <returns>
              The characters after the last directory character in <paramref name="path"/>. If the last character of <paramref name="path"/> is a
              directory or volume separator character, this method returns <c>string.Empty</c>. If path is null, this method returns null.
            </returns>
            <exception cref="T:System.ArgumentException"/>
            <param name="path">The path string from which to obtain the file name and extension. The path cannot contain any of the characters defined in <see cref="M:Alphaleonis.Win32.Filesystem.Path.GetInvalidPathChars"/>.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetFileName(System.String,System.Boolean)">
            <summary>[AlphaFS] Returns the file name and extension of the specified path string.</summary>
            <returns>
              The characters after the last directory character in <paramref name="path"/>. If the last character of <paramref name="path"/> is a
              directory or volume separator character, this method returns <c>string.Empty</c>. If path is null, this method returns null.
            </returns>
            <exception cref="T:System.ArgumentException"/>
            <param name="path">The path string from which to obtain the file name and extension.</param>
            <param name="checkInvalidPathChars"><see langword="true"/> will check <paramref name="path"/> for invalid path characters.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetFileNameWithoutExtension(System.String)">
            <summary>Returns the file name of the specified path string without the extension.</summary>
            <returns>The string returned by GetFileName, minus the last period (.) and all characters following it.</returns>
            <exception cref="T:System.ArgumentException"/>
            <param name="path">The path of the file. The path cannot contain any of the characters defined in <see cref="M:Alphaleonis.Win32.Filesystem.Path.GetInvalidPathChars"/>.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetFileNameWithoutExtension(System.String,System.Boolean)">
            <summary>[AlphaFS] Returns the file name of the specified path string without the extension.</summary>
            <returns>The string returned by GetFileName, minus the last period (.) and all characters following it.</returns>
            <exception cref="T:System.ArgumentException"/>
            <param name="path">The path of the file. The path cannot contain any of the characters defined in <see cref="M:Alphaleonis.Win32.Filesystem.Path.GetInvalidPathChars"/>.</param>
            <param name="checkInvalidPathChars"><see langword="true"/> will check <paramref name="path"/> for invalid path characters.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetInvalidFileNameChars">
            <summary>Gets an array containing the characters that are not allowed in file names.</summary>
            <returns>An array containing the characters that are not allowed in file names.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetInvalidPathChars">
            <summary>Gets an array containing the characters that are not allowed in path names.</summary>
            <returns>An array containing the characters that are not allowed in path names.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetPathRoot(System.String)">
            <summary>Gets the root directory information of the specified path.</summary>
            <returns>
              Returns the root directory of <paramref name="path"/>, such as "C:\",
              or <see langword="null"/> if <paramref name="path"/> is <see langword="null"/>,
              or an empty string if <paramref name="path"/> does not contain root directory information.
            </returns>
            <exception cref="T:System.ArgumentException"/>
            <param name="path">The path from which to obtain root directory information.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetPathRoot(System.String,System.Boolean)">
            <summary>[AlphaFS] Gets the root directory information of the specified path.</summary>
            <returns>
              Returns the root directory of <paramref name="path"/>, such as "C:\",
              or <see langword="null"/> if <paramref name="path"/> is <see langword="null"/>,
              or an empty string if <paramref name="path"/> does not contain root directory information.
            </returns>
            <exception cref="T:System.ArgumentException"/>
            <param name="path">The path from which to obtain root directory information.</param>
            <param name="checkInvalidPathChars"><see langword="true"/> will check <paramref name="path"/> for invalid path characters.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetFinalPathNameByHandle(Microsoft.Win32.SafeHandles.SafeFileHandle)">
            <summary>[AlphaFS] Retrieves the final path for the specified file, formatted as <see cref="T:Alphaleonis.Win32.Filesystem.FinalPathFormats"/>.</summary>
            <returns>The final path as a string.</returns>
            <remarks>
              A final path is the path that is returned when a path is fully resolved. For example, for a symbolic link named "C:\tmp\mydir" that
              points to "D:\yourdir", the final path would be "D:\yourdir".
            </remarks>
            <param name="handle">Then handle to a <see cref="T:Microsoft.Win32.SafeHandles.SafeFileHandle"/> instance.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetFinalPathNameByHandle(Microsoft.Win32.SafeHandles.SafeFileHandle,Alphaleonis.Win32.Filesystem.FinalPathFormats)">
            <summary>[AlphaFS] Retrieves the final path for the specified file, formatted as <see cref="T:Alphaleonis.Win32.Filesystem.FinalPathFormats"/>.</summary>
            <returns>The final path as a string.</returns>
            <remarks>
              A final path is the path that is returned when a path is fully resolved. For example, for a symbolic link named "C:\tmp\mydir" that
              points to "D:\yourdir", the final path would be "D:\yourdir".
            </remarks>
            <param name="handle">Then handle to a <see cref="T:Microsoft.Win32.SafeHandles.SafeFileHandle"/> instance.</param>
            <param name="finalPath">The final path, formatted as <see cref="T:Alphaleonis.Win32.Filesystem.FinalPathFormats"/></param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetFinalPathNameByHandleCore(Microsoft.Win32.SafeHandles.SafeFileHandle,Alphaleonis.Win32.Filesystem.FinalPathFormats)">
            <summary>Retrieves the final path for the specified file, formatted as <see cref="T:Alphaleonis.Win32.Filesystem.FinalPathFormats"/>.</summary>
            <returns>The final path as a string.</returns>
            <remarks>
              A final path is the path that is returned when a path is fully resolved. For example, for a symbolic link named "C:\tmp\mydir" that
              points to "D:\yourdir", the final path would be "D:\yourdir". The string that is returned by this function uses the
              <see cref="F:Alphaleonis.Win32.Filesystem.Path.LongPathPrefix"/> syntax.
            </remarks>
            <param name="handle">Then handle to a <see cref="T:Microsoft.Win32.SafeHandles.SafeFileHandle"/> instance.</param>
            <param name="finalPath">The final path, formatted as <see cref="T:Alphaleonis.Win32.Filesystem.FinalPathFormats"/></param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.Combine(System.String[])">
            <summary>Combines an array of strings into a path.</summary>
            <returns>The combined paths.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <param name="paths">An array of parts of the path.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.CombineCore(System.Boolean,System.String[])">
            <summary>Combines an array of strings into a path.</summary>
            <returns>The combined paths.</returns>
            <remarks>
              <para>The parameters are not parsed if they have white space.</para>
              <para>Therefore, if path2 includes white space (for example, " c:\\ "),</para>
              <para>the Combine method appends path2 to path1 instead of returning only path2.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentException"/>
            <param name="checkInvalidPathChars"><see langword="true"/> will not check <paramref name="paths"/> for invalid path characters.</param>
            <param name="paths">An array of parts of the path.</param>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Path.AltDirectorySeparatorChar">
            <summary>AltDirectorySeparatorChar = '/' Provides a platform-specific alternate character used to separate directory levels in a path string that reflects a hierarchical file system organization.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Path.DirectorySeparatorChar">
            <summary>DirectorySeparatorChar = '\' Provides a platform-specific character used to separate directory levels in a path string that reflects a hierarchical file system organization.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Path.PathSeparator">
            <summary>PathSeparator = ';' A platform-specific separator character used to separate path strings in environment variables.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Path.VolumeSeparatorChar">
            <summary>VolumeSeparatorChar = ':' Provides a platform-specific Volume Separator character.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Path.AltDirectorySeparator">
            <summary>[AlphaFS] AltDirectorySeparatorChar = "/" Provides a platform-specific alternate string used to separate directory levels in a path string that reflects a hierarchical file system organization.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Path.CurrentDirectoryPrefixChar">
            <summary>[AlphaFS] CurrentDirectoryPrefix = '.' Provides a current directory character.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Path.CurrentDirectoryPrefix">
            <summary>[AlphaFS] CurrentDirectoryPrefix = "." Provides a current directory string.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Path.DirectorySeparator">
            <summary>[AlphaFS] DirectorySeparator = "\" Provides a platform-specific string used to separate directory levels in a path string that reflects a hierarchical file system organization.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Path.ExtensionSeparatorChar">
            <summary>[AlphaFS] ExtensionSeparatorChar = '.' Provides an Extension Separator character.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Path.ParentDirectoryPrefix">
            <summary>[AlphaFS] ParentDirectoryPrefix = ".." Provides a parent directory string.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Path.StreamSeparatorChar">
            <summary>[AlphaFS] StreamSeparator = ':' Provides a platform-specific Stream-name character.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Path.StreamSeparator">
            <summary>[AlphaFS] StreamSeparator = ':' Provides a platform-specific Stream-name character.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Path.StreamDataLabel">
            <summary>[AlphaFS] StreamDataLabel = ':$DATA' Provides a platform-specific Stream :$DATA label.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Path.StringTerminatorChar">
            <summary>[AlphaFS] StringTerminatorChar = '\0' String Terminator Suffix.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Path.TrimEndChars">
            <summary>[AlphaFS] Characters to trim from the SearchPattern.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Path.VolumeSeparator">
            <summary>[AlphaFS] VolumeSeparatorChar = ':' Provides a platform-specific Volume Separator character.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAll">
            <summary>[AlphaFS] WildcardStarMatchAll = "*" Provides a match-all-items string.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Path.WildcardStarMatchAllChar">
            <summary>[AlphaFS] WildcardStarMatchAll = '*' Provides a match-all-items character.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestion">
            <summary>[AlphaFS] WildcardQuestion = "?" Provides a replace-item string.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Path.WildcardQuestionChar">
            <summary>[AlphaFS] WildcardQuestion = '?' Provides a replace-item string.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Path.UncPrefix">
            <summary>[AlphaFS] UncPrefix = "\\" Provides standard Windows Path UNC prefix.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Path.LongPathPrefix">
            <summary>[AlphaFS] LongPathPrefix = "\\?\" Provides standard Windows Long Path prefix.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Path.LongPathUncPrefix">
            <summary>[AlphaFS] LongPathUncPrefix = "\\?\UNC\" Provides standard Windows Long Path UNC prefix.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Path.GlobalRootPrefix">
            <summary>[AlphaFS] GlobalRootPrefix = "\\?\GLOBALROOT\" Provides standard Windows Volume prefix.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Path.LogicalDrivePrefix">
            <summary>[AlphaFS] MsDosNamespacePrefix = "\\.\" Provides standard logical drive prefix.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Path.SubstitutePrefix">
            <summary>[AlphaFS] SubstitutePrefix = "\??\" Provides a SUBST.EXE Path prefix to a Logical Drive.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Path.VolumePrefix">
            <summary>[AlphaFS] VolumePrefix = "\\?\Volume" Provides standard Windows Volume prefix.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Path.DevicePrefix">
            <summary>[AlphaFS] DevicePrefix = "\Device\" Provides standard Windows Device prefix.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Path.DosDeviceLanmanPrefix">
            <summary>[AlphaFS] DosDeviceLanmanPrefix = "\Device\LanmanRedirector\" Provides a MS-Dos Lanman Redirector Path UNC prefix to a network share.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Path.DosDeviceMupPrefix">
            <summary>[AlphaFS] DosDeviceMupPrefix = "\Device\Mup\" Provides a MS-Dos Mup Redirector Path UNC prefix to a network share.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Path.DosDeviceUncPrefix">
            <summary>[AlphaFS] DosDeviceUncPrefix = "\??\UNC\" Provides a SUBST.EXE Path UNC prefix to a network share.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetFullPath(System.String)">
            <summary>Returns the absolute path for the specified path string.</summary>
            <returns>The fully qualified location of path, such as "C:\MyFile.txt".</returns>
            <remarks>
            <para>GetFullPathName merges the name of the current drive and directory with a specified file name to determine the full path and file name of a specified file.</para>
            <para>It also calculates the address of the file name portion of the full path and file name.</para>
            <para>&#160;</para>
            <para>This method does not verify that the resulting path and file name are valid, or that they see an existing file on the associated volume.</para>
            <para>The .NET Framework does not support direct access to physical disks through paths that are device names, such as "\\.\PHYSICALDRIVE0".</para>
            <para>&#160;</para>
            <para>MSDN: Multithreaded applications and shared library code should not use the GetFullPathName function and</para>
            <para>should avoid using relative path names. The current directory state written by the SetCurrentDirectory function is stored as a global variable in each process,</para>
            <para>therefore multithreaded applications cannot reliably use this value without possible data corruption from other threads that may also be reading or setting this value.</para>
            <para>This limitation also applies to the SetCurrentDirectory and GetCurrentDirectory functions. The exception being when the application is guaranteed to be running in a single thread,</para>
            <para>for example parsing file names from the command line argument string in the main thread prior to creating any additional threads.</para>
            <para>Using relative path names in multithreaded applications or shared library code can yield unpredictable results and is not supported.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.NotSupportedException"/>
            <param name="path">The file or directory for which to obtain absolute path information.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetFullPath(System.String,Alphaleonis.Win32.Filesystem.GetFullPathOptions)">
            <summary>Returns the absolute path for the specified path string.</summary>
            <returns>The fully qualified location of path, such as "C:\MyFile.txt".</returns>
            <remarks>
            <para>GetFullPathName merges the name of the current drive and directory with a specified file name to determine the full path and file name of a specified file.</para>
            <para>It also calculates the address of the file name portion of the full path and file name.</para>
            <para>&#160;</para>
            <para>This method does not verify that the resulting path and file name are valid, or that they see an existing file on the associated volume.</para>
            <para>The .NET Framework does not support direct access to physical disks through paths that are device names, such as "\\.\PHYSICALDRIVE0".</para>
            <para>&#160;</para>
            <para>MSDN: Multithreaded applications and shared library code should not use the GetFullPathName function and</para>
            <para>should avoid using relative path names. The current directory state written by the SetCurrentDirectory function is stored as a global variable in each process,</para>
            <para>therefore multithreaded applications cannot reliably use this value without possible data corruption from other threads that may also be reading or setting this value.</para>
            <para>This limitation also applies to the SetCurrentDirectory and GetCurrentDirectory functions. The exception being when the application is guaranteed to be running in a single thread,</para>
            <para>for example parsing file names from the command line argument string in the main thread prior to creating any additional threads.</para>
            <para>Using relative path names in multithreaded applications or shared library code can yield unpredictable results and is not supported.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.NotSupportedException"/>
            <param name="path">The file or directory for which to obtain absolute path information.</param>
            <param name="options">Options for controlling the full path retrieval.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetFullPathTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>[AlphaFS] Returns the absolute path for the specified path string.</summary>
            <returns>The fully qualified location of path, such as "C:\MyFile.txt".</returns>
            <remarks>
            <para>GetFullPathName merges the name of the current drive and directory with a specified file name to determine the full path and file name of a specified file.</para>
            <para>It also calculates the address of the file name portion of the full path and file name.</para>
            <para>&#160;</para>
            <para>This method does not verify that the resulting path and file name are valid, or that they see an existing file on the associated volume.</para>
            <para>The .NET Framework does not support direct access to physical disks through paths that are device names, such as "\\.\PHYSICALDRIVE0".</para>
            <para>&#160;</para>
            <para>MSDN: Multithreaded applications and shared library code should not use the GetFullPathName function and</para>
            <para>should avoid using relative path names. The current directory state written by the SetCurrentDirectory function is stored as a global variable in each process,</para>
            <para>therefore multithreaded applications cannot reliably use this value without possible data corruption from other threads that may also be reading or setting this value.</para>
            <para>This limitation also applies to the SetCurrentDirectory and GetCurrentDirectory functions. The exception being when the application is guaranteed to be running in a single thread,</para>
            <para>for example parsing file names from the command line argument string in the main thread prior to creating any additional threads.</para>
            <para>Using relative path names in multithreaded applications or shared library code can yield unpredictable results and is not supported.</para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.NotSupportedException"/>
            <param name="transaction">The transaction.</param>
            <param name="path">The file or directory for which to obtain absolute path information.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetFullPathTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,Alphaleonis.Win32.Filesystem.GetFullPathOptions)">
            <summary>[AlphaFS] Returns the absolute path for the specified path string.</summary>
            <returns>The fully qualified location of path, such as "C:\MyFile.txt".</returns>
            <remarks>
            <para>GetFullPathName merges the name of the current drive and directory with a specified file name to determine the full path and file name of a specified file.</para>
            <para>It also calculates the address of the file name portion of the full path and file name.</para>
            <para>&#160;</para>
            <para>This method does not verify that the resulting path and file name are valid, or that they see an existing file on the associated volume.</para>
            <para>The .NET Framework does not support direct access to physical disks through paths that are device names, such as "\\.\PHYSICALDRIVE0".</para>
            <para>&#160;</para>
            <para>MSDN: Multithreaded applications and shared library code should not use the GetFullPathName function and</para>
            <para>should avoid using relative path names. The current directory state written by the SetCurrentDirectory function is stored as a global variable in each process,</para>
            <para>therefore multithreaded applications cannot reliably use this value without possible data corruption from other threads that may also be reading or setting this value.</para>
            <para>This limitation also applies to the SetCurrentDirectory and GetCurrentDirectory functions. The exception being when the application is guaranteed to be running in a single thread,</para>
            <para>for example parsing file names from the command line argument string in the main thread prior to creating any additional threads.</para>
            <para>Using relative path names in multithreaded applications or shared library code can yield unpredictable results and is not supported.</para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.NotSupportedException"/>
            <param name="transaction">The transaction.</param>
            <param name="path">The file or directory for which to obtain absolute path information.</param>
            <param name="options">Options for controlling the full path retrieval.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetFullPathCore(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,Alphaleonis.Win32.Filesystem.GetFullPathOptions)">
            <summary>Retrieves the absolute path for the specified <paramref name="path"/> string.</summary>
            <returns>The fully qualified location of <paramref name="path"/>, such as "C:\MyFile.txt".</returns>
            <remarks>
            <para>GetFullPathName merges the name of the current drive and directory with a specified file name to determine the full path and file name of a specified file.</para>
            <para>It also calculates the address of the file name portion of the full path and file name.</para>
            <para>&#160;</para>
            <para>This method does not verify that the resulting path and file name are valid, or that they see an existing file on the associated volume.</para>
            <para>The .NET Framework does not support direct access to physical disks through paths that are device names, such as "\\.\PHYSICALDRIVE0".</para>
            <para>&#160;</para>
            <para>MSDN: Multithreaded applications and shared library code should not use the GetFullPathName function and</para>
            <para>should avoid using relative path names. The current directory state written by the SetCurrentDirectory function is stored as a global variable in each process,</para>
            <para>therefore multithreaded applications cannot reliably use this value without possible data corruption from other threads that may also be reading or setting this value.</para>
            <para>This limitation also applies to the SetCurrentDirectory and GetCurrentDirectory functions. The exception being when the application is guaranteed to be running in a single thread,</para>
            <para>for example parsing file names from the command line argument string in the main thread prior to creating any additional threads.</para>
            <para>Using relative path names in multithreaded applications or shared library code can yield unpredictable results and is not supported.</para>
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <param name="transaction">The transaction.</param>
            <param name="path">The file or directory for which to obtain absolute path information.</param>
            <param name="options">Options for controlling the full path retrieval.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.ApplyFullPathOptions(System.String,Alphaleonis.Win32.Filesystem.GetFullPathOptions)">
            <summary>Applies the <seealso cref="T:Alphaleonis.Win32.Filesystem.GetFullPathOptions"/> to <paramref name="path"/></summary>
            <returns><paramref name="path"/> with applied <paramref name="options"/>.</returns>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentException"/>
            <param name="path"></param>
            <param name="options"></param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.AddTrailingDirectorySeparator(System.String)">
            <summary>[AlphaFS] Adds a trailing <see cref="F:Alphaleonis.Win32.Filesystem.Path.DirectorySeparatorChar"/> character to the string, when absent.</summary>
            <returns>A text string with a trailing <see cref="F:Alphaleonis.Win32.Filesystem.Path.DirectorySeparatorChar"/> character. The function returns <see langword="null"/> when <paramref name="path"/> is <see langword="null"/>.</returns>
            <param name="path">A text string to which the trailing <see cref="F:Alphaleonis.Win32.Filesystem.Path.DirectorySeparatorChar"/> is to be added, when absent.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.AddTrailingDirectorySeparator(System.String,System.Boolean)">
            <summary>[AlphaFS] Adds a trailing <see cref="F:Alphaleonis.Win32.Filesystem.Path.DirectorySeparatorChar"/> or <see cref="F:Alphaleonis.Win32.Filesystem.Path.AltDirectorySeparatorChar"/> character to the string, when absent.</summary>
            <returns>A text string with a trailing <see cref="F:Alphaleonis.Win32.Filesystem.Path.DirectorySeparatorChar"/> or <see cref="F:Alphaleonis.Win32.Filesystem.Path.AltDirectorySeparatorChar"/> character. The function returns <see langword="null"/> when <paramref name="path"/> is <see langword="null"/>.</returns>
            <param name="path">A text string to which the trailing <see cref="F:Alphaleonis.Win32.Filesystem.Path.DirectorySeparatorChar"/> or <see cref="F:Alphaleonis.Win32.Filesystem.Path.AltDirectorySeparatorChar"/> is to be added, when absent.</param>
            <param name="addAlternateSeparator">If <see langword="true"/> the <see cref="F:Alphaleonis.Win32.Filesystem.Path.AltDirectorySeparatorChar"/> character will be added instead.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.RemoveTrailingDirectorySeparator(System.String)">
            <summary>[AlphaFS] Removes the trailing <see cref="F:Alphaleonis.Win32.Filesystem.Path.DirectorySeparatorChar"/> character from the string, when present.</summary>
            <returns>A text string where the trailing <see cref="F:Alphaleonis.Win32.Filesystem.Path.DirectorySeparatorChar"/> character has been removed. The function returns <see langword="null"/> when <paramref name="path"/> is <see langword="null"/>.</returns>
            <param name="path">A text string from which the trailing <see cref="F:Alphaleonis.Win32.Filesystem.Path.DirectorySeparatorChar"/> is to be removed, when present.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.RemoveTrailingDirectorySeparator(System.String,System.Boolean)">
            <summary>[AlphaFS] Removes the trailing <see cref="F:Alphaleonis.Win32.Filesystem.Path.DirectorySeparatorChar"/> or <see cref="F:Alphaleonis.Win32.Filesystem.Path.AltDirectorySeparatorChar"/> character from the string, when present.</summary>
            <returns>A text string where the trailing <see cref="F:Alphaleonis.Win32.Filesystem.Path.DirectorySeparatorChar"/> or <see cref="F:Alphaleonis.Win32.Filesystem.Path.AltDirectorySeparatorChar"/> character has been removed. The function returns <see langword="null"/> when <paramref name="path"/> is <see langword="null"/>.</returns>
            <param name="path">A text string from which the trailing <see cref="F:Alphaleonis.Win32.Filesystem.Path.DirectorySeparatorChar"/> or <see cref="F:Alphaleonis.Win32.Filesystem.Path.AltDirectorySeparatorChar"/> is to be removed, when present.</param>
            <param name="removeAlternateSeparator">If <see langword="true"/> the trailing <see cref="F:Alphaleonis.Win32.Filesystem.Path.AltDirectorySeparatorChar"/> character will be removed instead.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetSuffixedDirectoryName(System.String)">
            <summary>[AlphaFS] Returns the directory information for the specified <paramref name="path"/> with a trailing <see cref="F:Alphaleonis.Win32.Filesystem.Path.DirectorySeparatorChar"/> character.</summary>
            <returns>
              <para>The suffixed directory information for the specified <paramref name="path"/> with a trailing <see cref="F:Alphaleonis.Win32.Filesystem.Path.DirectorySeparatorChar"/> character,</para>
              <para>or <see langword="null"/> if <paramref name="path"/> is <see langword="null"/> or if <paramref name="path"/> denotes a root (such as "\", "C:", or * "\\server\share").</para>
            </returns>
            <remarks>This method is similar to calling Path.GetDirectoryName() + Path.AddTrailingDirectorySeparator()</remarks>
            <param name="path">The path.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetSuffixedDirectoryNameTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>[AlphaFS] Returns the directory information for the specified <paramref name="path"/> with a trailing <see cref="F:Alphaleonis.Win32.Filesystem.Path.DirectorySeparatorChar"/> character.</summary>
            <returns>
              <para>The suffixed directory information for the specified <paramref name="path"/> with a trailing <see cref="F:Alphaleonis.Win32.Filesystem.Path.DirectorySeparatorChar"/> character,</para>
              <para>or <see langword="null"/> if <paramref name="path"/> is <see langword="null"/> or if <paramref name="path"/> denotes a root (such as "\", "C:", or * "\\server\share").</para>
            </returns>
            <remarks>This method is similar to calling Path.GetDirectoryName() + Path.AddTrailingDirectorySeparator()</remarks>
            <param name="transaction">The transaction.</param>
            <param name="path">The path.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetSuffixedDirectoryNameWithoutRoot(System.String)">
            <summary>[AlphaFS] Returns the directory information for the specified <paramref name="path"/> without the root and with a trailing <see cref="F:Alphaleonis.Win32.Filesystem.Path.DirectorySeparatorChar"/> character.</summary>
            <returns>
              <para>The directory information for the specified <paramref name="path"/> without the root and with a trailing <see cref="F:Alphaleonis.Win32.Filesystem.Path.DirectorySeparatorChar"/> character,</para>
              <para>or <see langword="null"/> if <paramref name="path"/> is <see langword="null"/> or if <paramref name="path"/> is <see langword="null"/>.</para>
            </returns>
            <param name="path">The path.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetSuffixedDirectoryNameWithoutRootTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>[AlphaFS] Returns the directory information for the specified <paramref name="path"/> without the root and with a trailing <see cref="F:Alphaleonis.Win32.Filesystem.Path.DirectorySeparatorChar"/> character.</summary>
            <returns>
              <para>The directory information for the specified <paramref name="path"/> without the root and with a trailing <see cref="F:Alphaleonis.Win32.Filesystem.Path.DirectorySeparatorChar"/> character,</para>
              <para>or <see langword="null"/> if <paramref name="path"/> is <see langword="null"/> or if <paramref name="path"/> is <see langword="null"/>.</para>
            </returns>
            <param name="transaction">The transaction.</param>
            <param name="path">The path.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetSuffixedDirectoryNameCore(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>Returns the directory information for the specified <paramref name="path"/> with a trailing <see cref="F:Alphaleonis.Win32.Filesystem.Path.DirectorySeparatorChar"/> character.</summary>
            <returns>
              <para>The suffixed directory information for the specified <paramref name="path"/> with a trailing <see cref="F:Alphaleonis.Win32.Filesystem.Path.DirectorySeparatorChar"/> character,</para>
              <para>or <see langword="null"/> if <paramref name="path"/> is <see langword="null"/> or if <paramref name="path"/> denotes a root (such as "\", "C:", or * "\\server\share").</para>
            </returns>
            <remarks>This method is similar to calling Path.GetDirectoryName() + Path.AddTrailingDirectorySeparator()</remarks>
            <param name="transaction">The transaction.</param>
            <param name="path">The path.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetSuffixedDirectoryNameWithoutRootCore(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>Returns the directory information for the specified <paramref name="path"/> without the root and with a trailing <see cref="F:Alphaleonis.Win32.Filesystem.Path.DirectorySeparatorChar"/> character.</summary>
            <returns>
              <para>The directory information for the specified <paramref name="path"/> without the root and with a trailing <see cref="F:Alphaleonis.Win32.Filesystem.Path.DirectorySeparatorChar"/> character,</para>
              <para>or <see langword="null"/> if <paramref name="path"/> is <see langword="null"/> or if <paramref name="path"/> is <see langword="null"/>.</para>
            </returns>
            <param name="transaction">The transaction.</param>
            <param name="path">The path.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetMappedConnectionName(System.String)">
            <summary>[AlphaFS] Gets the connection name of the locally mapped drive.</summary>
            <returns>The server and share as: \\servername\sharename.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.PathTooLongException"/>
            <exception cref="T:System.Net.NetworkInformation.NetworkInformationException"/>
            <param name="path">The local path with drive name.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetMappedUncName(System.String)">
            <summary>[AlphaFS] Gets the network share name from the locally mapped path.</summary>
            <returns>The network share connection name of <paramref name="path"/>.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.PathTooLongException"/>
            <exception cref="T:System.Net.NetworkInformation.NetworkInformationException"/>
            <param name="path">The local path with drive name.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.IsUncPath(System.String)">
            <summary>[AlphaFS] Determines if a path string is a valid Universal Naming Convention (UNC) path.</summary>
            <returns><see langword="true"/> if the specified path is a Universal Naming Convention (UNC) path, <see langword="false"/> otherwise.</returns>
            <param name="path">The path to check.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.IsUncPath(System.String,System.Boolean)">
            <summary>[AlphaFS] Determines if a path string is a valid Universal Naming Convention (UNC) path, optionally skip invalid path character check.</summary>
            <returns><see langword="true"/> if the specified path is a Universal Naming Convention (UNC) path, <see langword="false"/> otherwise.</returns>
            <param name="path">The path to check.</param>
            <param name="checkInvalidPathChars"><see langword="true"/> will check <paramref name="path"/> for invalid path characters.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.LocalToUnc(System.String)">
            <summary>[AlphaFS] Converts a local path to a network share path.  
              <para>A Local path, e.g.: "C:\Windows" will be returned as: "\\MachineName\C$\Windows".</para>
              <para>If a logical drive points to a network share path, the share path will be returned instead.</para>
            </summary>
            <returns>On successful conversion a UNC path is returned.
              <para>If the conversion fails, <paramref name="localPath"/> is returned.</para>
              <para>If <paramref name="localPath"/> is an empty string or <see langword="null"/>, <see langword="null"/> is returned.</para>
            </returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.IO.PathTooLongException"/>
            <exception cref="T:System.Net.NetworkInformation.NetworkInformationException"/>
            <param name="localPath">A local path, e.g.: "C:\Windows".</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.LocalToUnc(System.String,System.Boolean)">
            <summary>[AlphaFS] Converts a local path to a network share path, optionally returning it in a long path format.
              <para>A Local path, e.g.: "C:\Windows" will be returned as: "\\MachineName\C$\Windows".</para>
              <para>If a logical drive points to a network share path, the share path will be returned instead.</para>
            </summary>
            <returns>On successful conversion a UNC path is returned.
              <para>If the conversion fails, <paramref name="localPath"/> is returned.</para>
              <para>If <paramref name="localPath"/> is an empty string or <see langword="null"/>, <see langword="null"/> is returned.</para>
            </returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.IO.PathTooLongException"/>
            <exception cref="T:System.Net.NetworkInformation.NetworkInformationException"/>
            <param name="localPath">A local path, e.g.: "C:\Windows".</param>
            <param name="asLongPath"><see langword="true"/> returns the path in long path (Unicode) format, when <see langword="false"/> returns the path as a regular path.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.LocalToUnc(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>[AlphaFS] Converts a local path to a network share path, optionally returning it in a long path format and the ability to add or remove a trailing backslash.
              <para>A Local path, e.g.: "C:\Windows" will be returned as: "\\MachineName\C$\Windows".</para>
              <para>If a logical drive points to a network share path, the share path will be returned instead.</para>
            </summary>
            <returns>On successful conversion a UNC path is returned.
              <para>If the conversion fails, <paramref name="localPath"/> is returned.</para>
              <para>If <paramref name="localPath"/> is an empty string or <see langword="null"/>, <see langword="null"/> is returned.</para>
            </returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.IO.PathTooLongException"/>
            <exception cref="T:System.Net.NetworkInformation.NetworkInformationException"/>
            <param name="localPath">A local path, e.g.: "C:\Windows".</param>
            <param name="asLongPath"><see langword="true"/> returns the path in long path (Unicode) format, when <see langword="false"/> returns the path as a regular path.</param>
            <param name="addTrailingDirectorySeparator"><see langword="true"/> adds a trailing <see cref="F:Alphaleonis.Win32.Filesystem.Path.DirectorySeparatorChar"/> character to <paramref name="localPath"/>, when absent.</param>
            <param name="removeTrailingDirectorySeparator"><see langword="true"/> removes the trailing <see cref="F:Alphaleonis.Win32.Filesystem.Path.DirectorySeparatorChar"/> character from <paramref name="localPath"/>, when present.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.IsUncPathCore(System.String,System.Boolean,System.Boolean)">
            <summary>[AlphaFS] Determines if a path string is a valid Universal Naming Convention (UNC) path, optionally skip invalid path character check.</summary>
            <returns><see langword="true"/> if the specified path is a Universal Naming Convention (UNC) path, <see langword="false"/> otherwise.</returns>
            <param name="path">The path to check.</param>
            <param name="isRegularPath">When <see langword="true"/> indicates that <paramref name="path"/> is already in regular path format.</param>
            <param name="checkInvalidPathChars"><see langword="true"/> will check <paramref name="path"/> for invalid path characters.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.LocalToUncCore(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>Converts a local path to a network share path.  
              <para>A Local path, e.g.: "C:\Windows" will be returned as: "\\MachineName\C$\Windows".</para>
              <para>If a logical drive points to a network share path, the share path will be returned instead.</para>
            </summary>
            <returns>On successful conversion a UNC path is returned.
              <para>If the conversion fails, <paramref name="localPath"/> is returned.</para>
              <para>If <paramref name="localPath"/> is an empty string or <see langword="null"/>, <see langword="null"/> is returned.</para>
            </returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.IO.PathTooLongException"/>
            <exception cref="T:System.Net.NetworkInformation.NetworkInformationException"/>
            <param name="localPath">A local path, e.g.: "C:\Windows".</param>
            <param name="asLongPath"><see langword="true"/> returns the path in long path (Unicode) format, when <see langword="false"/> returns the path as a regular path.</param>
            <param name="addTrailingDirectorySeparator"><see langword="true"/> adds a trailing <see cref="F:Alphaleonis.Win32.Filesystem.Path.DirectorySeparatorChar"/> character to <paramref name="localPath"/>, when absent.</param>
            <param name="removeTrailingDirectorySeparator"><see langword="true"/> removes the trailing <see cref="F:Alphaleonis.Win32.Filesystem.Path.DirectorySeparatorChar"/> character from <paramref name="localPath"/>, when present.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetLongPath(System.String)">
            <summary>Makes an extended long path from the specified <paramref name="path"/> by prefixing <see cref="F:Alphaleonis.Win32.Filesystem.Path.LongPathPrefix"/>.</summary>
            <returns>The <paramref name="path"/> prefixed with a <see cref="F:Alphaleonis.Win32.Filesystem.Path.LongPathPrefix"/>, the minimum required full path is: "C:\".</returns>
            <remarks>This method does not verify that the resulting path and file name are valid, or that they see an existing file on the associated volume.</remarks>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentException"/>
            <param name="path">The path to the file or directory, this can also be an UNC path.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetLongFrom83ShortPath(System.String)">
            <summary>[AlphaFS] Converts the specified existing path to its regular long form.</summary>
            <param name="path">An existing path to a folder or file.</param>
            <returns>The regular full path.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetLongFrom83ShortPathTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>[AlphaFS] Converts the specified existing path to its regular long form.</summary>
            <param name="transaction">The transaction.</param>
            <param name="path">An existing path to a folder or file.</param>
            <returns>The regular full path.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetRegularPath(System.String)">
            <summary>[AlphaFS] Gets the regular path from long prefixed one. i.e.: "\\?\C:\Temp\file.txt" to C:\Temp\file.txt" or: "\\?\UNC\Server\share\file.txt" to "\\Server\share\file.txt".</summary>
            <returns>Regular form path string.</returns>
            <remarks>This method does not handle paths with volume names, eg. \\?\Volume{GUID}\Folder\file.txt.</remarks>
            <param name="path">The path.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetShort83Path(System.String)">
            <summary>[AlphaFS] Retrieves the short path form of the specified path.</summary>
            <returns>A path that has the 8.3 path form.</returns>
            <remarks>Will fail on NTFS volumes with disabled 8.3 name generation.</remarks>
            <remarks>The path must actually exist to be able to get the short path name.</remarks>
            <param name="path">An existing path to a folder or file.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetShort83PathTransacted(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String)">
            <summary>[AlphaFS] Retrieves the short path form of the specified path.</summary>
            <returns>A path that has the 8.3 path form.</returns>
            <remarks>Will fail on NTFS volumes with disabled 8.3 name generation.</remarks>
            <remarks>The path must actually exist to be able to get the short path name.</remarks>
            <param name="transaction">The transaction.</param>
            <param name="path">An existing path to a folder or file.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.IsLongPath(System.String)">
            <summary>[AlphaFS] Determines whether the specified path starts with a <see cref="F:Alphaleonis.Win32.Filesystem.Path.LongPathPrefix"/> or <see cref="F:Alphaleonis.Win32.Filesystem.Path.LongPathUncPrefix"/>.</summary>
            <returns><see langword="true"/> if the specified path has a long path (UNC) prefix, <see langword="false"/> otherwise.</returns>
            <param name="path">The path to the file or directory.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetLongPathCore(System.String,Alphaleonis.Win32.Filesystem.GetFullPathOptions)">
            <summary>Makes an extended long path from the specified <paramref name="path"/> by prefixing <see cref="F:Alphaleonis.Win32.Filesystem.Path.LongPathPrefix"/>.</summary>
            <returns>The <paramref name="path"/> prefixed with a <see cref="F:Alphaleonis.Win32.Filesystem.Path.LongPathPrefix"/>, the minimum required full path is: "C:\".</returns>
            <remarks>This method does not verify that the resulting path and file name are valid, or that they see an existing file on the associated volume.</remarks>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentException"/>
            <param name="path">The path to the file or directory, this can also be an UNC path.</param>
            <param name="options">Options for controlling the full path retrieval.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetLongShort83PathCore(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,System.Boolean)">
            <summary>Retrieves the short path form, or the regular long form of the specified <paramref name="path"/>.</summary>
            <returns>If <paramref name="getShort"/> is <see langword="true"/>, a path of the 8.3 form otherwise the regular long form.</returns>
            <remarks>
              <para>Will fail on NTFS volumes with disabled 8.3 name generation.</para>
              <para>The path must actually exist to be able to get the short- or long path name.</para>
            </remarks>
            <param name="transaction">The transaction.</param>
            <param name="path">An existing path to a folder or file.</param>
            <param name="getShort"><see langword="true"/> to retrieve the short path form, <see langword="false"/> to retrieve the regular long form from the 8.3 <paramref name="path"/>.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetRegularPathCore(System.String,Alphaleonis.Win32.Filesystem.GetFullPathOptions,System.Boolean)">
            <summary>Gets the regular path from a long path.</summary>
            <returns>
              <para>Returns the regular form of a long <paramref name="path"/>.</para>
              <para>For example: "\\?\C:\Temp\file.txt" to: "C:\Temp\file.txt", or: "\\?\UNC\Server\share\file.txt" to: "\\Server\share\file.txt".</para>
            </returns>
            <remarks>
              MSDN: String.TrimEnd Method notes to Callers: http://msdn.microsoft.com/en-us/library/system.string.trimend%28v=vs.110%29.aspx
            </remarks>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentException"/>
            <param name="path">The path.</param>
            <param name="options">Options for controlling the full path retrieval.</param>
            <param name="allowEmpty">When <see langword="false"/>, throws an <see cref="T:System.ArgumentException"/>.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetExtendedLengthPathCore(Alphaleonis.Win32.Filesystem.KernelTransaction,System.String,Alphaleonis.Win32.Filesystem.PathFormat,Alphaleonis.Win32.Filesystem.GetFullPathOptions)">
            <summary>Gets the path as a long full path.</summary>
            <returns>The path as an extended length path.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <param name="transaction">The transaction.</param>
            <param name="sourcePath">Full pathname of the source path to convert.</param>
            <param name="pathFormat">The path format to use.</param>
            <param name="options">Options for controlling the operation. Note that on .NET 3.5 the TrimEnd option has no effect.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetRandomFileName">
            <summary>Returns a random folder name or file name.</summary>
            <returns>A random folder name or file name.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetTempFileName">
            <summary>Creates a uniquely named, zero-byte temporary file on disk and returns the full path of that file.</summary>
            <returns>The full path of the temporary file.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetTempPath">
            <summary>Returns the path of the current user's temporary folder.</summary>
            <returns>The path to the temporary folder, ending with a backslash.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Path.GetTempPath(System.String)">
            <summary>[AlphaFS] Returns the path of the current user's temporary folder.</summary>
            <param name="combinePath">The folder name to append to the temporary folder.</param>
            <returns>The path to the temporary folder, combined with <paramref name="combinePath"/>.</returns>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.SafeCmConnectMachineHandle">
            <summary>Represents a wrapper class for a handle used by the CM_Connect_Machine/CM_Disconnect_Machine Win32 API functions.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.SafeCmConnectMachineHandle.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.SafeCmConnectMachineHandle"/> class.</summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.SafeEncryptedFileRawHandle">
            <summary>Represents a wrapper class for a handle used by the FindFirstFile/FindNextFile Win32 API functions.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.SafeEncryptedFileRawHandle.#ctor">
            <summary>Constructor that prevents a default instance of this class from being created.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.SafeEncryptedFileRawHandle.#ctor(System.IntPtr,System.Boolean)">
            <summary>Constructor that prevents a default instance of this class from being created.</summary>
            <param name="handle">The handle.</param>
            <param name="ownsHandle">true to reliably release the handle during the finalization phase; false to prevent
            reliable release (not recommended).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.SafeEncryptedFileRawHandle.ReleaseHandle">
            <summary>When overridden in a derived class, executes the code required to free the handle.</summary>
            <returns><see langword="true"/> if the handle is released successfully; otherwise, in the event of a catastrophic failure, <see langword="false"/>. In this case, it generates a ReleaseHandleFailed Managed Debugging Assistant.</returns>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.Shell32Info">
            <summary>Contains Shell32 information about a file.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Shell32Info.#ctor(System.String)">
            <summary>Initializes a Shell32Info instance.
            <remarks>Shell32 is limited to MAX_PATH length.</remarks>
            <remarks>This constructor does not check if a file exists. This constructor is a placeholder for a string that is used to access the file in subsequent operations.</remarks>
            </summary>
            <param name="fileName">The fully qualified name of the new file, or the relative file name. Do not end the path with the directory separator character.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Shell32Info.#ctor(System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>Initializes a Shell32Info instance.
            <remarks>Shell32 is limited to MAX_PATH length.</remarks>
            <remarks>This constructor does not check if a file exists. This constructor is a placeholder for a string that is used to access the file in subsequent operations.</remarks>
            </summary>
            <param name="fileName">The fully qualified name of the new file, or the relative file name. Do not end the path with the directory separator character.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Shell32Info.GetIcon(Alphaleonis.Win32.Filesystem.Shell32.FileAttributes)">
            <summary>Gets an <see cref="T:System.IntPtr"/> handle to the Shell icon that represents the file.</summary>
            <param name="iconAttributes">Icon size <see cref="F:Alphaleonis.Win32.Filesystem.Shell32.FileAttributes.SmallIcon"/> or <see cref="F:Alphaleonis.Win32.Filesystem.Shell32.FileAttributes.LargeIcon"/>. Can also be combined with <see cref="F:Alphaleonis.Win32.Filesystem.Shell32.FileAttributes.AddOverlays"/> and others.</param>
            <returns>An <see cref="T:System.IntPtr"/> handle to the Shell icon that represents the file.</returns>
            <remarks>Caller is responsible for destroying this handle with DestroyIcon() when no longer needed.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Shell32Info.GetVerbCommand(System.String)">
            <summary>Gets the Shell command association from the registry.</summary>
            <param name="shellVerb">The shell verb.</param>
            <returns>
              Returns the associated file- or protocol-related Shell command from the registry or <c>string.Empty</c> if no association can be
              found.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Shell32Info.Refresh">
            <summary>Refreshes the state of the object.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Shell32Info.ToString">
            <summary>Returns the path as a string.</summary>
            <returns>The path.</returns>      
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.Shell32Info.Association">
            <summary>Gets the Shell file or protocol association from the registry.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.Shell32Info.Attributes">
            <summary>The attributes of the file object.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.Shell32Info.Command">
            <summary>Gets the Shell command association from the registry.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.Shell32Info.ContentType">
            <summary>Gets the Shell command association from the registry.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.Shell32Info.DdeApplication">
            <summary>Gets the Shell DDE association from the registry.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.Shell32Info.DefaultIcon">
            <summary>Gets the Shell default icon association from the registry.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.Shell32Info.FullPath">
            <summary>Represents the fully qualified path of the file.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.Shell32Info.FriendlyAppName">
            <summary>Gets the Shell friendly application name association from the registry.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.Shell32Info.FriendlyDocName">
            <summary>Gets the Shell friendly document name association from the registry.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.Shell32Info.Initialized">
            <summary>Reflects the initialization state of the instance.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.Shell32Info.OpenWithAppName">
            <summary>Gets the Shell "Open With" command association from the registry.</summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.CopyMoveResult">
            <summary>Class for CopyMoveResult that contains the results for the Copy or Move action.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.CopyMoveResult.ErrorCode">
            <summary>The error code encountered during the Copy or Move action.</summary>
            <value>0 (zero) indicates success.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.CopyMoveResult.ErrorMessage">
            <summary>The error message from the <see cref="P:Alphaleonis.Win32.Filesystem.CopyMoveResult.ErrorCode"/> that was encountered during the Copy or Move action.</summary>
            <value>A message describing the error.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.CopyMoveResult.IsCanceled">
            <summary>Indicates if the Copy or Move action was canceled.</summary>
            <value><see langword="true"/> when the Copy/Move action was canceled. Otherwise <see langword="false"/>.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.CopyMoveResult.IsDirectory">
            <summary>Gets a value indicating whether this instance represents a directory.</summary>
            <value><see langword="true"/> if this instance represents a directory; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.CopyMoveResult.IsMove">
            <summary>Indicates if the action is a Copy or Move action.</summary>
            <value><see langword="true"/> when action is Move. Otherwise <see langword="false"/>.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.CopyMoveResult.Source">
            <summary>Indicates the source file or directory.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.CopyMoveResult.Destination">
            <summary>Indicates the destination file or directory.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.CopyMoveResult.#ctor(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Int32)">
            <summary>Create a CopyMoveResult class instance for the Copy or Move action.</summary>
            <param name="source">Indicates the source file or directory.</param>
            <param name="destination">Indicates the destination file or directory.</param>
            <param name="isDirectory">Indicates that the file system object is a directory.</param>
            <param name="isMove">Indicates if the action is a Copy or Move action.</param>
            <param name="isCanceled">Indicates if the action was canceled.</param>
            <param name="errorCode">The error code encountered during the Copy or Move action.</param>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.LinkTargetInfo">
            <summary>Information about the target of a symbolic link or mount point.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.LinkTargetInfo.PrintName">
            <summary>The print name.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.LinkTargetInfo.SubstituteName">
            <summary>The substitute name.</summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.MoveOptions">
            <summary>Used by MoveFileXxx.Flags that specify how a file or directory is to be moved.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.MoveOptions.None">
            <summary>No MoveOptions used, this fails when the file name already exists.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.MoveOptions.ReplaceExisting">
            <summary>MOVE_FILE_REPLACE_EXISTSING
            <para>If the destination file name already exists, the function replaces its contents with the contents of the source file.</para>
            <para>This value cannot be used if lpNewFileName or lpExistingFileName names a directory.</para>
            <para>This value cannot be used if either source or destination names a directory.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.MoveOptions.CopyAllowed">
            <summary>MOVE_FILE_COPY_ALLOWED
            <para>If the file is to be moved to a different volume, the function simulates the move by using the CopyFile and DeleteFile functions.</para>
            <para>This value cannot be used with <see cref="F:Alphaleonis.Win32.Filesystem.MoveOptions.DelayUntilReboot"/>.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.MoveOptions.DelayUntilReboot">
            <summary>MOVE_FILE_DELAY_UNTIL_REBOOT
            <para>
            The system does not move the file until the operating system is restarted.
            The system moves the file immediately after AUTOCHK is executed, but before creating any paging files.
            </para>
            <para>
            Consequently, this parameter enables the function to delete paging files from previous startups.
            This value can only be used if the process is in the context of a user who belongs to the administrators group or the LocalSystem account.
            </para>
            <para>This value cannot be used with <see cref="F:Alphaleonis.Win32.Filesystem.MoveOptions.CopyAllowed"/>.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.MoveOptions.WriteThrough">
            <summary>MOVE_FILE_WRITE_THROUGH
            <para>The function does not return until the file has actually been moved on the disk.</para>
            <para>
            Setting this value guarantees that a move performed as a copy and delete operation is flushed to disk before the function returns.
            The flush occurs at the end of the copy operation.
            </para>
            <para>This value has no effect if <see cref="F:Alphaleonis.Win32.Filesystem.MoveOptions.DelayUntilReboot"/> is set.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.MoveOptions.CreateHardlink">
            <summary>MOVE_FILE_CREATE_HARDLINK
            <para>Reserved for future use.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.MoveOptions.FailIfNotTrackable">
            <summary>MOVE_FILE_FAIL_IF_NOT_TRACKABLE
            <para>The function fails if the source file is a link source, but the file cannot be tracked after the move.</para>
            <para>This situation can occur if the destination is a volume formatted with the FAT file system.</para>
            </summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.NotAReparsePointException">
            <summary>The file or directory was not a reparse point.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NotAReparsePointException.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.NotAReparsePointException"/> class.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NotAReparsePointException.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.NotAReparsePointException"/> class.</summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NotAReparsePointException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.NotAReparsePointException"/> class.</summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.NotAReparsePointException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.NotAReparsePointException"/> class.</summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.Shell32">
            <summary>Provides access to a file system object, using Shell32.</summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.Shell32.AssociationAttributes">
            <summary>Provides information for the IQueryAssociations interface methods, used by Shell32.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationAttributes.None">
            <summary>None.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationAttributes.InitNoRemapClsid">
            <summary>Instructs not to map CLSID values to ProgID values.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationAttributes.InitByExeName">
            <summary>Identifies the value of the supplied file parameter (3rd parameter of function GetFileAssociation()) as an executable file name.</summary>
            <remarks>If this flag is not set, the root key will be set to the ProgID associated with the .exe key instead of the executable file's ProgID.</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationAttributes.InitDefaultToStar">
            <summary>Specifies that when an IQueryAssociation method does not find the requested value under the root key, it should attempt to retrieve the comparable value from the * subkey.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationAttributes.InitDefaultToFolder">
            <summary>Specifies that when an IQueryAssociation method does not find the requested value under the root key, it should attempt to retrieve the comparable value from the Folder subkey.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationAttributes.NoUserSettings">
            <summary>Specifies that only HKEY_CLASSES_ROOT should be searched, and that HKEY_CURRENT_USER should be ignored.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationAttributes.NoTruncate">
            <summary>Specifies that the return string should not be truncated. Instead, return an error value and the required size for the complete string.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationAttributes.Verify">
            <summary>
            Instructs IQueryAssociations methods to verify that data is accurate.
            This setting allows IQueryAssociations methods to read data from the user's hard disk for verification.
            For example, they can check the friendly name in the registry against the one stored in the .exe file.
            </summary>
            <remarks>Setting this flag typically reduces the efficiency of the method.</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationAttributes.RemapRunDll">
            <summary>
            Instructs IQueryAssociations methods to ignore Rundll.exe and return information about its target.
            Typically IQueryAssociations methods return information about the first .exe or .dll in a command string.
            If a command uses Rundll.exe, setting this flag tells the method to ignore Rundll.exe and return information about its target.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationAttributes.NoFixUps">
            <summary>Instructs IQueryAssociations methods not to fix errors in the registry, such as the friendly name of a function not matching the one found in the .exe file.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationAttributes.IgnoreBaseClass">
            <summary>Specifies that the BaseClass value should be ignored.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationAttributes.InitIgnoreUnknown">
            <summary>Specifies that the "Unknown" ProgID should be ignored; instead, fail.</summary>
            <remarks>Introduced in Windows 7.</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationAttributes.InitFixedProgId">
            <summary>Specifies that the supplied ProgID should be mapped using the system defaults, rather than the current user defaults.</summary>
            <remarks>Introduced in Windows 8.</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationAttributes.IsProtocol">
            <summary>Specifies that the value is a protocol, and should be mapped using the current user defaults.</summary>
            <remarks>Introduced in Windows 8.</remarks>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.Shell32.AssociationString">
            <summary>ASSOCSTR enumeration - Used by the AssocQueryString() function to define the type of string that is to be returned.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationString.None">
            <summary>None.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationString.Command">
            <summary>A command string associated with a Shell verb.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationString.Executable">
            <summary>
            An executable from a Shell verb command string.
            For example, this string is found as the (Default) value for a subkey such as HKEY_CLASSES_ROOT\ApplicationName\shell\Open\command.
            If the command uses Rundll.exe, set the <see cref="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationAttributes.RemapRunDll"/> flag in the attributes parameter of IQueryAssociations::GetString to retrieve the target executable.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationString.FriendlyDocName">
            <summary>The friendly name of a document type.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationString.FriendlyAppName">
            <summary>The friendly name of an executable file.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationString.NoOpen">
            <summary>Ignore the information associated with the open subkey.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationString.ShellNewValue">
            <summary>Look under the ShellNew subkey.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationString.DdeCommand">
            <summary>A template for DDE commands.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationString.DdeIfExec">
            <summary>The DDE command to use to create a process.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationString.DdeApplication">
            <summary>The application name in a DDE broadcast.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationString.DdeTopic">
            <summary>The topic name in a DDE broadcast.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationString.InfoTip">
            <summary>
            Corresponds to the InfoTip registry value.
            Returns an info tip for an item, or list of properties in the form of an IPropertyDescriptionList from which to create an info tip, such as when hovering the cursor over a file name.
            The list of properties can be parsed with PSGetPropertyDescriptionListFromString.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationString.QuickTip">
            <summary>
            Corresponds to the QuickTip registry value. This is the same as <see cref="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationString.InfoTip"/>, except that it always returns a list of property names in the form of an IPropertyDescriptionList.
            The difference between this value and <see cref="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationString.InfoTip"/> is that this returns properties that are safe for any scenario that causes slow property retrieval, such as offline or slow networks.
            Some of the properties returned from <see cref="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationString.InfoTip"/> might not be appropriate for slow property retrieval scenarios.
            The list of properties can be parsed with PSGetPropertyDescriptionListFromString.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationString.TileInfo">
            <summary>
            Corresponds to the TileInfo registry value. Contains a list of properties to be displayed for a particular file type in a Windows Explorer window that is in tile view.
            This is the same as <see cref="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationString.InfoTip"/>, but, like <see cref="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationString.QuickTip"/>, it also returns a list of property names in the form of an IPropertyDescriptionList.
            The list of properties can be parsed with PSGetPropertyDescriptionListFromString.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationString.ContentType">
            <summary>
            Describes a general type of MIME file association, such as image and bmp,
            so that applications can make general assumptions about a specific file type.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationString.DefaultIcon">
            <summary>
            Returns the path to the icon resources to use by default for this association.
            Positive numbers indicate an index into the dll's resource table, while negative numbers indicate a resource ID.
            An example of the syntax for the resource is "c:\myfolder\myfile.dll,-1".
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationString.ShellExtension">
            <summary>
            For an object that has a Shell extension associated with it,
            you can use this to retrieve the CLSID of that Shell extension object by passing a string representation
            of the IID of the interface you want to retrieve as the pwszExtra parameter of IQueryAssociations::GetString.
            For example, if you want to retrieve a handler that implements the IExtractImage interface,
            you would specify "{BB2E617C-0920-11d1-9A0B-00C04FC2D6C1}", which is the IID of IExtractImage.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationString.DropTarget">
            <summary>
            For a verb invoked through COM and the IDropTarget interface, you can use this flag to retrieve the IDropTarget object's CLSID.
            This CLSID is registered in the DropTarget subkey.
            The verb is specified in the supplied file parameter in the call to IQueryAssociations::GetString.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationString.DelegateExecute">
            <summary>
            For a verb invoked through COM and the IExecuteCommand interface, you can use this flag to retrieve the IExecuteCommand object's CLSID.
            This CLSID is registered in the verb's command subkey as the DelegateExecute entry.
            The verb is specified in the supplied file parameter in the call to IQueryAssociations::GetString.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationString.SupportedUriProtocols">
            <summary>(No description available on MSDN)</summary>
            <remarks>Introduced in Windows 8.</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.AssociationString.Max">
            <summary>The maximum defined <see cref="T:Alphaleonis.Win32.Filesystem.Shell32.AssociationString"/> value, used for validation purposes.</summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.Shell32.FileAttributes">
            <summary>Shell32 FileAttributes structure, used to retrieve the different types of a file system object.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.FileAttributes.LargeIcon">
            <summary>0x000000000 - Get file system object large icon.</summary>
            <remarks>The <see cref="F:Alphaleonis.Win32.Filesystem.Shell32.FileAttributes.Icon"/> flag must also be set.</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.FileAttributes.SmallIcon">
            <summary>0x000000001 - Get file system object small icon.</summary>
            <remarks>The <see cref="F:Alphaleonis.Win32.Filesystem.Shell32.FileAttributes.Icon"/> flag must also be set.</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.FileAttributes.OpenIcon">
            <summary>0x000000002 - Get file system object open icon.</summary>
            <remarks>A container object displays an open icon to indicate that the container is open.</remarks>
            <remarks>The <see cref="F:Alphaleonis.Win32.Filesystem.Shell32.FileAttributes.Icon"/> and/or <see cref="F:Alphaleonis.Win32.Filesystem.Shell32.FileAttributes.SysIconIndex"/> flag must also be set.</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.FileAttributes.ShellIconSize">
            <summary>0x000000004 - Get file system object Shell-sized icon.</summary>
            <remarks>If this attribute is not specified the function sizes the icon according to the system metric values.</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.FileAttributes.Pidl">
            <summary>0x000000008 - Get file system object by its PIDL.</summary>
            <remarks>Indicate that the given file contains the address of an ITEMIDLIST structure rather than a path name.</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.FileAttributes.UseFileAttributes">
            <summary>0x000000010 - Indicates that the given file should not be accessed. Rather, it should act as if the given file exists and use the supplied attributes.</summary>
            <remarks>This flag cannot be combined with the <see cref="F:Alphaleonis.Win32.Filesystem.Shell32.FileAttributes.Attributes"/>, <see cref="F:Alphaleonis.Win32.Filesystem.Shell32.FileAttributes.ExeType"/> or <see cref="F:Alphaleonis.Win32.Filesystem.Shell32.FileAttributes.Pidl"/> attributes.</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.FileAttributes.AddOverlays">
            <summary>0x000000020 - Apply the appropriate overlays to the file's icon.</summary>
            <remarks>The <see cref="F:Alphaleonis.Win32.Filesystem.Shell32.FileAttributes.Icon"/> flag must also be set.</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.FileAttributes.OverlayIndex">
            <summary>0x000000040 - Returns the index of the overlay icon.</summary>
            <remarks>The value of the overlay index is returned in the upper eight bits of the iIcon member of the structure specified by psfi.</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.FileAttributes.Icon">
            <summary>0x000000100 - Retrieve the handle to the icon that represents the file and the index of the icon within the system image list. The handle is copied to the <see cref="F:Alphaleonis.Win32.Filesystem.Shell32.FileInfo.IconHandle"/> member of the structure, and the index is copied to the <see cref="F:Alphaleonis.Win32.Filesystem.Shell32.FileInfo.IconIndex"/> member.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.FileAttributes.DisplayName">
            <summary>0x000000200 - Retrieve the display name for the file. The name is copied to the <see cref="F:Alphaleonis.Win32.Filesystem.Shell32.FileInfo.DisplayName"/> member of the structure.</summary>
            <remarks>The returned display name uses the long file name, if there is one, rather than the 8.3 form of the file name.</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.FileAttributes.TypeName">
            <summary>0x000000400 - Retrieve the string that describes the file's type.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.FileAttributes.Attributes">
            <summary>0x000000800 - Retrieve the item attributes. The attributes are copied to the <see cref="F:Alphaleonis.Win32.Filesystem.Shell32.FileInfo.Attributes"/> member of the structure.</summary>
            <remarks>Will touch every file, degrading performance.</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.FileAttributes.IconLocation">
            <summary>0x000001000 - Retrieve the name of the file that contains the icon representing the file specified by pszPath. The name of the file containing the icon is copied to the <see cref="F:Alphaleonis.Win32.Filesystem.Shell32.FileInfo.DisplayName"/> member of the structure.  The icon's index is copied to that structure's <see cref="F:Alphaleonis.Win32.Filesystem.Shell32.FileInfo.IconIndex"/> member.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.FileAttributes.ExeType">
            <summary>0x000002000 - Retrieve the type of the executable file if pszPath identifies an executable file.</summary>
            <remarks>This flag cannot be specified with any other attributes.</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.FileAttributes.SysIconIndex">
            <summary>0x000004000 - Retrieve the index of a system image list icon.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.FileAttributes.LinkOverlay">
            <summary>0x000008000 - Add the link overlay to the file's icon.</summary>
            <remarks>The <see cref="F:Alphaleonis.Win32.Filesystem.Shell32.FileAttributes.Icon"/> flag must also be set.</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.FileAttributes.Selected">
            <summary>0x000010000 - Blend the file's icon with the system highlight color.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.FileAttributes.AttributesSpecified">
            <summary>0x000020000 - Modify <see cref="F:Alphaleonis.Win32.Filesystem.Shell32.FileAttributes.Attributes"/> to indicate that <see cref="F:Alphaleonis.Win32.Filesystem.Shell32.FileInfo.Attributes"/> contains specific attributes that are desired.</summary>
            <remarks>This flag cannot be specified with the <see cref="F:Alphaleonis.Win32.Filesystem.Shell32.FileAttributes.Icon"/> attribute. Will touch every file, degrading performance.</remarks>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.Shell32.FileInfo">
            <summary>SHFILEINFO structure, contains information about a file system object.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.FileInfo.IconHandle">
            <summary>A handle to the icon that represents the file.</summary>
            <remarks>Caller is responsible for destroying this handle with DestroyIcon() when no longer needed.</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.FileInfo.IconIndex">
            <summary>The index of the icon image within the system image list.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.FileInfo.Attributes">
            <summary>An array of values that indicates the attributes of the file object.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.FileInfo.DisplayName">
            <summary>The name of the file as it appears in the Windows Shell, or the path and file name of the file that contains the icon representing the file.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.FileInfo.TypeName">
            <summary>The type of file.</summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.Shell32.GetAttributesOf">
            <summary>SFGAO - Attributes that can be retrieved from a file system object.</summary>      
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.GetAttributesOf.None">
            <summary>0x00000000 - None.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.GetAttributesOf.CanCopy">
            <summary>0x00000001 - The specified items can be copied.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.GetAttributesOf.CanMove">
            <summary>0x00000002 - The specified items can be moved.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.GetAttributesOf.CanLink">
            <summary>0x00000004 - Shortcuts can be created for the specified items.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.GetAttributesOf.Storage">
            <summary>0x00000008 - The specified items can be bound to an IStorage object through IShellFolder::BindToObject. For more information about namespace manipulation capabilities, see IStorage.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.GetAttributesOf.CanRename">
            <summary>0x00000010 - The specified items can be renamed. Note that this value is essentially a suggestion; not all namespace clients allow items to be renamed. However, those that do must have this attribute set.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.GetAttributesOf.CanDelete">
            <summary>0x00000020 - The specified items can be deleted.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.GetAttributesOf.HasPropSheet">
            <summary>0x00000040 - The specified items have property sheets.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.GetAttributesOf.DropTarget">
            <summary>0x00000100 - The specified items are drop targets.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.GetAttributesOf.System">
            <summary>0x00001000 - The specified items are system items.</summary>
             <remarks>Windows 7 and later.</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.GetAttributesOf.Encrypted">
            <summary>0x00002000 - The specified items are encrypted and might require special presentation.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.GetAttributesOf.IsSlow">
            <summary>0x00004000 - Accessing the item (through IStream or other storage interfaces) is expected to be a slow operation.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.GetAttributesOf.Ghosted">
            <summary>0x00008000 - The specified items are shown as dimmed and unavailable to the user.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.GetAttributesOf.Link">
            <summary>0x00010000 - The specified items are shortcuts.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.GetAttributesOf.Share">
            <summary>0x00020000 - The specified objects are shared.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.GetAttributesOf.ReadOnly">
            <summary>0x00040000 - The specified items are read-only. In the case of folders, this means that new items cannot be created in those folders.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.GetAttributesOf.Hidden">
            <summary>0x00080000 - The item is hidden and should not be displayed unless the Show hidden files and folders option is enabled in Folder Settings.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.GetAttributesOf.NonEnumerated">
            <summary>0x00100000 - The items are nonenumerated items and should be hidden. They are not returned through an enumerator such as that created by the IShellFolder::EnumObjects method.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.GetAttributesOf.NewContent">
            <summary>0x00200000 - The items contain new content, as defined by the particular application.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.GetAttributesOf.Stream">
            <summary>0x00400000 - Indicates that the item has a stream associated with it.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.GetAttributesOf.StorageAncestor">
            <summary>0x00800000 - Children of this item are accessible through IStream or IStorage.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.GetAttributesOf.Validate">
            <summary>0x01000000 - When specified as input, instructs the folder to validate that the items contained in a folder or Shell item array exist.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.GetAttributesOf.Removable">
            <summary>0x02000000 - The specified items are on removable media or are themselves removable devices.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.GetAttributesOf.Compressed">
            <summary>0x04000000 - The specified items are compressed.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.GetAttributesOf.Browsable">
            <summary>0x08000000 - The specified items can be hosted inside a web browser or Windows Explorer frame.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.GetAttributesOf.FileSysAncestor">
            <summary>0x10000000 - The specified folders are either file system folders or contain at least one descendant (child, grandchild, or later) that is a file system folder.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.GetAttributesOf.Folder">
            <summary>0x20000000 - The specified items are folders.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.GetAttributesOf.FileSystem">
            <summary>0x40000000 - The specified folders or files are part of the file system (that is, they are files, directories, or root directories).</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.GetAttributesOf.HasSubFolder">
            <summary>0x80000000 - The specified folders have subfolders.</summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.Shell32.UrlType">
            <summary>Used by method UrlIs() to define a URL type.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.UrlType.IsUrl">
            <summary>Is the URL valid?</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.UrlType.IsOpaque">
            <summary>Is the URL opaque?</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.UrlType.IsNoHistory">
            <summary>Is the URL a URL that is not typically tracked in navigation history?</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.UrlType.IsFileUrl">
            <summary>Is the URL a file URL?</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.UrlType.IsAppliable">
            <summary>Attempt to determine a valid scheme for the URL.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.UrlType.IsDirectory">
            <summary>Does the URL string end with a directory?</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.Shell32.UrlType.IsHasQuery">
            <summary>Does the URL have an appended query string?</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Shell32.DestroyIcon(System.IntPtr)">
            <summary>Destroys an icon and frees any memory the icon occupied.</summary>
            <param name="iconHandle">An <see cref="T:System.IntPtr"/> handle to an icon.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Shell32.GetFileAssociation(System.String)">
            <summary>Gets the file or protocol that is associated with <paramref name="path"/> from the registry.</summary>
            <param name="path">A path to the file.</param>
            <returns>The associated file- or protocol-related string from the registry or <c>string.Empty</c> if no association can be found.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Shell32.GetFileContentType(System.String)">
            <summary>Gets the content-type that is associated with <paramref name="path"/> from the registry.</summary>
            <param name="path">A path to the file.</param>
            <returns>The associated file- or protocol-related content-type from the registry or <c>string.Empty</c> if no association can be found.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Shell32.GetFileDefaultIcon(System.String)">
            <summary>Gets the default icon that is associated with <paramref name="path"/> from the registry.</summary>
            <param name="path">A path to the file.</param>
            <returns>The associated file- or protocol-related default icon from the registry or <c>string.Empty</c> if no association can be found.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Shell32.GetFileFriendlyAppName(System.String)">
            <summary>Gets the friendly application name that is associated with <paramref name="path"/> from the registry.</summary>
            <param name="path">A path to the file.</param>
            <returns>The associated file- or protocol-related friendly application name from the registry or <c>string.Empty</c> if no association can be found.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Shell32.GetFileFriendlyDocName(System.String)">
            <summary>Gets the friendly document name that is associated with <paramref name="path"/> from the registry.</summary>
            <param name="path">A path to the file.</param>
            <returns>The associated file- or protocol-related friendly document name from the registry or <c>string.Empty</c> if no association can be found.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Shell32.GetFileIcon(System.String,Alphaleonis.Win32.Filesystem.Shell32.FileAttributes)">
            <summary>Gets an <see cref="T:System.IntPtr"/> handle to the Shell icon that represents the file.</summary>
            <remarks>Caller is responsible for destroying this handle with DestroyIcon() when no longer needed.</remarks>
            <param name="filePath">
              The path to the file system object which should not exceed maximum path length. Both absolute and
              relative paths are valid.
            </param>
            <param name="iconAttributes">
              Icon size <see cref="F:Alphaleonis.Win32.Filesystem.Shell32.FileAttributes.SmallIcon"/> or <see cref="F:Alphaleonis.Win32.Filesystem.Shell32.FileAttributes.LargeIcon"/>. Can also be combined
              with <see cref="F:Alphaleonis.Win32.Filesystem.Shell32.FileAttributes.AddOverlays"/> and others.
            </param>
            <returns>An <see cref="T:System.IntPtr"/> handle to the Shell icon that represents the file, or IntPtr.Zero on failure.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Shell32.GetFileInfo(System.String,System.IO.FileAttributes,Alphaleonis.Win32.Filesystem.Shell32.FileAttributes,System.Boolean)">
            <summary>Retrieves information about an object in the file system, such as a file, folder, directory, or drive root.</summary>
            <returns>A <see cref="T:Alphaleonis.Win32.Filesystem.Shell32.FileInfo"/> struct instance.</returns>
            <remarks>
            <para>You should call this function from a background thread.</para>
            <para>Failure to do so could cause the UI to stop responding.</para>
            <para>Unicode path are supported.</para>
            </remarks>
            <param name="filePath">The path to the file system object which should not exceed the maximum path length. Both absolute and relative paths are valid.</param>
            <param name="attributes">A <see cref="T:System.IO.FileAttributes"/> attribute.</param>
            <param name="fileAttributes">One ore more <see cref="T:Alphaleonis.Win32.Filesystem.Shell32.FileAttributes"/> attributes.</param>
            <param name="continueOnException">
            <para><see langword="true"/> suppress any Exception that might be thrown as a result from a failure,</para>
            <para>such as ACLs protected directories or non-accessible reparse points.</para>
            </param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Shell32.GetShell32Info(System.String)">
            <summary>Retrieves an instance of <see cref="T:Alphaleonis.Win32.Filesystem.Shell32Info"/> containing information about the specified file.</summary>
            <param name="path">A path to the file.</param>
            <returns>A <see cref="T:Alphaleonis.Win32.Filesystem.Shell32Info"/> class instance.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Shell32.GetShell32Info(System.String,Alphaleonis.Win32.Filesystem.PathFormat)">
            <summary>Retrieves an instance of <see cref="T:Alphaleonis.Win32.Filesystem.Shell32Info"/> containing information about the specified file.</summary>
            <param name="path">A path to the file.</param>
            <param name="pathFormat">Indicates the format of the path parameter(s).</param>
            <returns>A <see cref="T:Alphaleonis.Win32.Filesystem.Shell32Info"/> class instance.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Shell32.GetFileOpenWithAppName(System.String)">
            <summary>Gets the "Open With" command that is associated with <paramref name="path"/> from the registry.</summary>
            <param name="path">A path to the file.</param>
            <returns>The associated file- or protocol-related "Open With" command from the registry or <c>string.Empty</c> if no association can be found.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Shell32.GetFileVerbCommand(System.String)">
            <summary>Gets the Shell command that is associated with <paramref name="path"/> from the registry.</summary>
            <param name="path">A path to the file.</param>
            <returns>The associated file- or protocol-related Shell command from the registry or <c>string.Empty</c> if no association can be found.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Shell32.PathCreateFromUrl(System.String)">
            <summary>Converts a file URL to a Microsoft MS-DOS path.</summary>
            <param name="urlPath">The file URL.</param>
            <returns>
            <para>The Microsoft MS-DOS path. If no path can be created, <c>string.Empty</c> is returned.</para>
            <para>If <paramref name="urlPath"/> is <see langword="null"/>, <see langword="null"/> will also be returned.</para>
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Shell32.PathCreateFromUrlAlloc(System.String)">
            <summary>Creates a path from a file URL.</summary>
            <param name="urlPath">The URL.</param>
            <returns>
            <para>The file path. If no path can be created, <c>string.Empty</c> is returned.</para>
            <para>If <paramref name="urlPath"/> is <see langword="null"/>, <see langword="null"/> will also be returned.</para>
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Shell32.PathFileExists(System.String)">
            <summary>Determines whether a path to a file system object such as a file or folder is valid.</summary>
            <param name="path">The full path of maximum length the maximum path length to the object to verify.</param>
            <returns><see langword="true"/> if the file exists; <see langword="false"/> otherwise</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Shell32.UrlIs(System.String,Alphaleonis.Win32.Filesystem.Shell32.UrlType)">
            <summary>Tests whether a URL is a specified type.</summary>
            <param name="url">The URL.</param>
            <param name="urlType"></param>
            <returns>
            For all but one of the URL types, UrlIs returns <see langword="true"/> if the URL is the specified type, or <see langword="false"/> otherwise.
            If UrlIs is set to <see cref="F:Alphaleonis.Win32.Filesystem.Shell32.UrlType.IsAppliable"/>, UrlIs will attempt to determine the URL scheme.
            If the function is able to determine a scheme, it returns <see langword="true"/>, or <see langword="false"/> otherwise.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Shell32.UrlCreateFromPath(System.String)">
            <summary>Converts a Microsoft MS-DOS path to a canonicalized URL.</summary>
            <param name="path">The full MS-DOS path of maximum length <see cref="F:Alphaleonis.Win32.Filesystem.NativeMethods.MaxPath"/>.</param>
            <returns>
            <para>The URL. If no URL can be created <c>string.Empty</c> is returned.</para>
            <para>If <paramref name="path"/> is <see langword="null"/>, <see langword="null"/> will also be returned.</para>
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Shell32.UrlIsFileUrl(System.String)">
            <summary>Tests a URL to determine if it is a file URL.</summary>
            <param name="url">The URL.</param>
            <returns><see langword="true"/> if the URL is a file URL, or <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Shell32.UrlIsNoHistory(System.String)">
            <summary>Returns whether a URL is a URL that browsers typically do not include in navigation history.</summary>
            <param name="url">The URL.</param>
            <returns><see langword="true"/> if the URL is a URL that is not included in navigation history, or <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Shell32.UrlIsOpaque(System.String)">
            <summary>Returns whether a URL is opaque.</summary>
            <param name="url">The URL.</param>
            <returns><see langword="true"/> if the URL is opaque, or <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Shell32.GetFileAssociationCore(System.String,Alphaleonis.Win32.Filesystem.Shell32.AssociationAttributes,Alphaleonis.Win32.Filesystem.Shell32.AssociationString)">
            <summary>Searches for and retrieves a file or protocol association-related string from the registry.</summary>
            <param name="path">A path to a file.</param>
            <param name="attributes">One or more <see cref="T:Alphaleonis.Win32.Filesystem.Shell32.AssociationAttributes"/> attributes. Only one "InitXXX" attribute can be used.</param>
            <param name="associationType">A <see cref="T:Alphaleonis.Win32.Filesystem.Shell32.AssociationString"/> attribute.</param>
            <returns>The associated file- or protocol-related string from the registry or <c>string.Empty</c> if no association can be found.</returns>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Shell32.GetFileInfoCore(System.String,System.IO.FileAttributes,Alphaleonis.Win32.Filesystem.Shell32.FileAttributes,System.Boolean,System.Boolean)">
            <summary>Retrieve information about an object in the file system, such as a file, folder, directory, or drive root.</summary>
            <returns>A <see cref="T:Alphaleonis.Win32.Filesystem.Shell32.FileInfo"/> struct instance.</returns>
            <remarks>
            <para>You should call this function from a background thread.</para>
            <para>Failure to do so could cause the UI to stop responding.</para>
            <para>Unicode path are not supported.</para>
            </remarks>
            <param name="path">The path to the file system object which should not exceed the maximum path length in length. Both absolute and relative paths are valid.</param>
            <param name="attributes">A <see cref="T:System.IO.FileAttributes"/> attribute.</param>
            <param name="fileAttributes">A <see cref="T:Alphaleonis.Win32.Filesystem.Shell32.FileAttributes"/> attribute.</param>
            <param name="checkInvalidPathChars">Checks that the path contains only valid path-characters.</param>
            <param name="continueOnException">
            <para><see langword="true"/> suppress any Exception that might be thrown as a result from a failure,</para>
            <para>such as ACLs protected directories or non-accessible reparse points.</para>
            </param>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.SymbolicLinkTarget">
            <summary>Indicates whether the link target is a file or directory.</summary>
            <remarks>Used by Win32 API CreateSymbolicLink()/CreateSymbolicLinkTransacted()</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.SymbolicLinkTarget.File">
            <summary>The link target is a file.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.SymbolicLinkTarget.Directory">
            <summary>The link target is a directory.</summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.SymbolicLinkTargetInfo">
            <summary>Represents information about a symbolic link.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.SymbolicLinkTargetInfo.LinkType">
            <summary>Gets the type of the link.</summary>
            <value>The type of the link.</value>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.SymbolicLinkType">
            <summary>Specifies the type of a symbolic link.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.SymbolicLinkType.Absolute">
            <summary>The symbolic link is absolute.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Filesystem.SymbolicLinkType.Relative">
            <summary>The symbolic link is relative.</summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.TransactionalConflictException">
            <summary>The function attempted to use a name that is reserved for use by another transaction.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.TransactionalConflictException.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.TransactionalConflictException"/> class.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.TransactionalConflictException.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.TransactionalConflictException"/> class.</summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.TransactionalConflictException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.TransactionalConflictException"/> class.</summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.TransactionalConflictException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.TransactionalConflictException"/> class.</summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.UnrecognizedReparsePointException">
            <summary>The function attempted to use a name that is reserved for use by another transaction.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.UnrecognizedReparsePointException.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.UnrecognizedReparsePointException"/> class.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.UnrecognizedReparsePointException.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.UnrecognizedReparsePointException"/> class.</summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.UnrecognizedReparsePointException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.UnrecognizedReparsePointException"/> class.</summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.UnrecognizedReparsePointException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.UnrecognizedReparsePointException"/> class.</summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.UnsupportedRemoteTransactionException">
            <summary>The remote server or share does not support transacted file operations.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.UnsupportedRemoteTransactionException.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.UnsupportedRemoteTransactionException"/> class.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.UnsupportedRemoteTransactionException.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.UnsupportedRemoteTransactionException"/> class.</summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.UnsupportedRemoteTransactionException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.UnsupportedRemoteTransactionException"/> class.</summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.UnsupportedRemoteTransactionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.UnsupportedRemoteTransactionException"/> class.</summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.InvalidTransactionException">
            <summary>The transaction handle associated with this operation is not valid.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.InvalidTransactionException.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.InvalidTransactionException"/> class.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.InvalidTransactionException.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.InvalidTransactionException"/> class.</summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.InvalidTransactionException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.InvalidTransactionException"/> class.</summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.InvalidTransactionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.InvalidTransactionException"/> class.</summary>
            <param name="info">The data for serializing or deserializing the object.</param>
            <param name="context">The source and destination for the object.</param>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.KernelTransaction">
            <summary>A KTM transaction object for use with the transacted operations in <see cref="N:Alphaleonis.Win32.Filesystem"/></summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.KernelTransaction.#ctor(System.Transactions.Transaction)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.KernelTransaction"/> class, internally using the specified <see cref="T:System.Transactions.Transaction"/>.
            This method allows the usage of methods accepting a <see cref="T:Alphaleonis.Win32.Filesystem.KernelTransaction"/> with an instance of <see cref="T:System.Transactions.Transaction"/>.
            </summary>
            <param name="transaction">The transaction to use for any transactional operations.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.KernelTransaction.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.KernelTransaction"/> class with a default security descriptor, infinite timeout and no description.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.KernelTransaction.#ctor(System.Int32,System.String)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.KernelTransaction"/> class with a default security descriptor.</summary>
            <param name="timeout"><para>The time, in milliseconds, when the transaction will be aborted if it has not already reached the prepared state.</para></param>
            <param name="description">A user-readable description of the transaction. This parameter may be <see langword="null"/>.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.KernelTransaction.#ctor(System.Security.AccessControl.ObjectSecurity,System.Int32,System.String)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.KernelTransaction"/> class.</summary>
            <param name="securityDescriptor">The <see cref="T:System.Security.AccessControl.ObjectSecurity"/> security descriptor.</param>
            <param name="timeout"><para>The time, in milliseconds, when the transaction will be aborted if it has not already reached the prepared state.</para>
            <para>Specify 0 to provide an infinite timeout.</para></param>
            <param name="description">A user-readable description of the transaction. This parameter may be <see langword="null"/>.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.KernelTransaction.Commit">
            <summary>Requests that the specified transaction be committed.</summary>
            <exception cref="T:Alphaleonis.Win32.Filesystem.TransactionAlreadyCommittedException"/>
            <exception cref="T:Alphaleonis.Win32.Filesystem.TransactionAlreadyAbortedException"/>
            <exception cref="T:System.ComponentModel.Win32Exception"/>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.KernelTransaction.Rollback">
            <summary>Requests that the specified transaction be rolled back. This function is synchronous.</summary>
            <exception cref="T:Alphaleonis.Win32.Filesystem.TransactionAlreadyCommittedException"/>
            <exception cref="T:System.ComponentModel.Win32Exception"/>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.KernelTransaction.SafeHandle">
            <summary>Gets the safe handle.</summary>
            <value>The safe handle.</value>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.KernelTransaction.Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.SafeFindFileHandle">
            <summary>Represents a wrapper class for a handle used by the FindFirstFile/FindNextFile Win32 API functions.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.SafeFindFileHandle.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.SafeFindFileHandle"/> class.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.SafeFindFileHandle.#ctor(System.IntPtr,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.SafeFindFileHandle"/> class.</summary>
            <param name="handle">The handle.</param>
            <param name="callerHandle"><see langword="true"/> [owns handle].</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.SafeFindFileHandle.ReleaseHandle">
            <summary>When overridden in a derived class, executes the code required to free the handle.</summary>
            <returns><see langword="true"/> if the handle is released successfully; otherwise, in the event of a catastrophic failure, <see langword="false"/>. In this case, it generates a ReleaseHandleFailed Managed Debugging Assistant.</returns>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.SafeFindVolumeMountPointHandle">
            <summary>Represents a wrapper class for a handle used by the FindFirstVolumeMountPoint/FindVolumeMountPointClose methods of the Win32 API.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.SafeFindVolumeMountPointHandle.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.SafeFindVolumeMountPointHandle"/> class.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.SafeFindVolumeMountPointHandle.#ctor(System.IntPtr,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.SafeFindVolumeHandle"/> class.</summary>
            <param name="handle">The handle.</param>
            <param name="callerHandle"><see langword="true"/> [owns handle].</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.SafeFindVolumeMountPointHandle.ReleaseHandle">
            <summary>When overridden in a derived class, executes the code required to free the handle.</summary>
            <returns><see langword="true"/> if the handle is released successfully; otherwise, in the event of a catastrophic failure, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.SafeFindVolumeHandle">
            <summary>Represents a wrapper class for a handle used by the FindFirstVolume/FindNextVolume methods of the Win32 API.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.SafeFindVolumeHandle.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.SafeFindVolumeHandle"/> class.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.SafeFindVolumeHandle.#ctor(System.IntPtr,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.SafeFindVolumeHandle"/> class.</summary>
            <param name="handle">The handle.</param>
            <param name="callerHandle"><see langword="true"/> [owns handle].</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.SafeFindVolumeHandle.ReleaseHandle">
            <summary>When overridden in a derived class, executes the code required to free the handle.</summary>
            <returns><see langword="true"/> if the handle is released successfully; otherwise, in the event of a catastrophic failure, <see langword="false"/>. In this case, it generates a ReleaseHandleFailed Managed Debugging Assistant.
            </returns>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.SafeKernelTransactionHandle">
            <summary>Provides a concrete implementation of SafeHandle supporting transactions.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.SafeKernelTransactionHandle.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.SafeKernelTransactionHandle"/> class.</summary>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.SafeKernelTransactionHandle.ReleaseHandle">
            <summary>When overridden in a derived class, executes the code required to free the handle.</summary>
            <returns><see langword="true"/> if the handle is released successfully; otherwise, in the event of a catastrophic failure, <see langword="false"/>. In this case, it generates a ReleaseHandleFailed Managed Debugging Assistant.</returns>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.TransactionAlreadyAbortedException">
            <summary>It is too late to perform the requested operation, since the Transaction has already been aborted.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.TransactionAlreadyAbortedException.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.TransactionAlreadyAbortedException"/> class.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.TransactionAlreadyAbortedException.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.TransactionAlreadyAbortedException"/> class.</summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.TransactionAlreadyAbortedException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.TransactionAlreadyAbortedException"/> class.</summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.TransactionAlreadyAbortedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.TransactionAlreadyAbortedException"/> class.</summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.TransactionAlreadyCommittedException">
            <summary>It is too late to perform the requested operation, since the Transaction has already been committed.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.TransactionAlreadyCommittedException.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.TransactionAlreadyCommittedException"/> class.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.TransactionAlreadyCommittedException.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.TransactionAlreadyCommittedException"/> class.</summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.TransactionAlreadyCommittedException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.TransactionAlreadyCommittedException"/> class.</summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.TransactionAlreadyCommittedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.TransactionAlreadyCommittedException"/> class.</summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.TransactionException">
            <summary>The exception that is thrown when an attempt to create a file or directory that already exists was made.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.TransactionException.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.TransactionException"/> class.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.TransactionException.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.TransactionException"/> class.</summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.TransactionException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.TransactionException"/> class.</summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.TransactionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Filesystem.TransactionException"/> class.</summary>
            <param name="info">The data for serializing or deserializing the object.</param>
            <param name="context">The source and destination for the object.</param>
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.Volume">
            <summary>Static class providing utility methods for working with Microsoft Windows devices and volumes.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.DefineDosDevice(System.String,System.String)">
            <summary>Defines, redefines, or deletes MS-DOS device names.</summary>
            <param name="deviceName">An MS-DOS device name string specifying the device the function is defining, redefining, or deleting.</param>
            <param name="targetPath">An MS-DOS path that will implement this device.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.DefineDosDevice(System.String,System.String,Alphaleonis.Win32.Filesystem.DosDeviceAttributes)">
            <summary>Defines, redefines, or deletes MS-DOS device names.</summary>
            <param name="deviceName">
              An MS-DOS device name string specifying the device the function is defining, redefining, or deleting.
            </param>
            <param name="targetPath">
              &gt;An MS-DOS path that will implement this device. If <paramref name="deviceAttributes"/> parameter has the
              <see cref="F:Alphaleonis.Win32.Filesystem.DosDeviceAttributes.RawTargetPath"/> flag specified, <paramref name="targetPath"/> is used as is.
            </param>
            <param name="deviceAttributes">
              The controllable aspects of the DefineDosDevice function, <see cref="T:Alphaleonis.Win32.Filesystem.DosDeviceAttributes"/> flags which will be combined with the
              default.
            </param>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.DeleteDosDevice(System.String)">
            <summary>Deletes an MS-DOS device name.</summary>
            <param name="deviceName">An MS-DOS device name specifying the device to delete.</param>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.DeleteDosDevice(System.String,System.String)">
            <summary>Deletes an MS-DOS device name.</summary>
            <param name="deviceName">An MS-DOS device name string specifying the device to delete.</param>
            <param name="targetPath">
              A pointer to a path string that will implement this device. The string is an MS-DOS path string unless the
              <see cref="F:Alphaleonis.Win32.Filesystem.DosDeviceAttributes.RawTargetPath"/> flag is specified, in which case this string is a path string.
            </param>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.DeleteDosDevice(System.String,System.String,System.Boolean)">
            <summary>Deletes an MS-DOS device name.</summary>
            <param name="deviceName">An MS-DOS device name string specifying the device to delete.</param>
            <param name="targetPath">
              A pointer to a path string that will implement this device. The string is an MS-DOS path string unless the
              <see cref="F:Alphaleonis.Win32.Filesystem.DosDeviceAttributes.RawTargetPath"/> flag is specified, in which case this string is a path string.
            </param>
            <param name="exactMatch">
              Only delete MS-DOS device on an exact name match. If <paramref name="exactMatch"/> is <see langword="true"/>,
              <paramref name="targetPath"/> must be the same path used to create the mapping.
            </param>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.DeleteDosDevice(System.String,System.String,Alphaleonis.Win32.Filesystem.DosDeviceAttributes,System.Boolean)">
            <summary>Deletes an MS-DOS device name.</summary>
            <param name="deviceName">An MS-DOS device name string specifying the device to delete.</param>
            <param name="targetPath">
              A pointer to a path string that will implement this device. The string is an MS-DOS path string unless the
              <see cref="F:Alphaleonis.Win32.Filesystem.DosDeviceAttributes.RawTargetPath"/> flag is specified, in which case this string is a path string.
            </param>
            <param name="deviceAttributes">
              The controllable aspects of the DefineDosDevice function <see cref="T:Alphaleonis.Win32.Filesystem.DosDeviceAttributes"/> flags which will be combined with the
              default.
            </param>
            <param name="exactMatch">
              Only delete MS-DOS device on an exact name match. If <paramref name="exactMatch"/> is <see langword="true"/>,
              <paramref name="targetPath"/> must be the same path used to create the mapping.
            </param>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.QueryAllDosDevices">
            <summary>Retrieves a list of all existing MS-DOS device names.</summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> with one or more existing MS-DOS device names.</returns>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.QueryAllDosDevices(System.String)">
            <summary>Retrieves a list of all existing MS-DOS device names.</summary>
            <param name="deviceName">
              (Optional, default: <see langword="null"/>) An MS-DOS device name string specifying the target of the query. This parameter can be
              "sort". In that case a sorted list of all existing MS-DOS device names is returned. This parameter can be <see langword="null"/>.
              In that case, the <see cref="M:Alphaleonis.Win32.Filesystem.Volume.QueryDosDevice(System.String,System.String[])"/> function will store a list of all existing MS-DOS device names into the buffer.
            </param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> with or more existing MS-DOS device names.</returns>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.QueryDosDevice(System.String,System.String[])">
            <summary>
              Retrieves information about MS-DOS device names. The function can obtain the current mapping for a particular MS-DOS device name.
              The function can also obtain a list of all existing MS-DOS device names.
            </summary>
            <param name="deviceName">
              An MS-DOS device name string, or part of, specifying the target of the query. This parameter can be <see langword="null"/>. In that
              case, the QueryDosDevice function will store a list of all existing MS-DOS device names into the buffer.
            </param>
            <param name="options">
              (Optional, default: <see langword="false"/>) If options[0] = <see langword="true"/> a sorted list will be returned.
            </param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> with one or more existing MS-DOS device names.</returns>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.GetDriveFormat(System.String)">
            <summary>Gets the name of the file system, such as NTFS or FAT32.</summary>
            <remarks>Use DriveFormat to determine what formatting a drive uses.</remarks>
            <param name="drivePath">
              A path to a drive. For example: "C:\", "\\server\share", or "\\?\Volume{c0580d5e-2ad6-11dc-9924-806e6f6e6963}\".
            </param>
            <returns>The name of the file system on the specified drive or <see langword="null"/>  on failure or if not available.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.GetDriveNameForNtDeviceName(System.String)">
            <summary>Gets the drive letter from an MS-DOS device name. For example: "\Device\HarddiskVolume2" returns "C:\".</summary>
            <param name="deviceName">An MS-DOS device name.</param>
            <returns>The drive letter from an MS-DOS device name.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.GetCurrentDriveType">
            <summary>
              Determines, based on the root of the current directory, whether a disk drive is a removable, fixed, CD-ROM, RAM disk, or network
              drive.
            </summary>
            <returns>A <see cref="T:System.IO.DriveType"/> object.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.GetDriveType(System.String)">
            <summary>Determines whether a disk drive is a removable, fixed, CD-ROM, RAM disk, or network drive.</summary>
            <param name="drivePath">A path to a drive. For example: "C:\", "\\server\share", or "\\?\Volume{c0580d5e-2ad6-11dc-9924-806e6f6e6963}\"</param>
            <returns>A <see cref="T:System.IO.DriveType"/> object.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.GetDiskFreeSpace(System.String)">
            <summary>
              Retrieves information about the amount of space that is available on a disk volume, which is the total amount of space, the total
              amount of free space, and the total amount of free space available to the user that is associated with the calling thread.
            </summary>
            <remarks>The calling application must have FILE_LIST_DIRECTORY access rights for this directory.</remarks>
            <param name="drivePath">
              A path to a drive. For example: "C:\", "\\server\share", or "\\?\Volume{c0580d5e-2ad6-11dc-9924-806e6f6e6963}\".
            </param>
            <returns>A <see ref="Alphaleonis.Win32.Filesystem.DiskSpaceInfo"/> class instance.</returns>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.GetDiskFreeSpace(System.String,System.Nullable{System.Boolean})">
            <summary>
              Retrieves information about the amount of space that is available on a disk volume, which is the total amount of space, the total
              amount of free space, and the total amount of free space available to the user that is associated with the calling thread.
            </summary>
            <remarks>The calling application must have FILE_LIST_DIRECTORY access rights for this directory.</remarks>
            <param name="drivePath">
              A path to a drive. For example: "C:\", "\\server\share", or "\\?\Volume{c0580d5e-2ad6-11dc-9924-806e6f6e6963}\".
            </param>
            <param name="spaceInfoType">
              <see langword="null"/> gets both size- and disk cluster information. <see langword="true"/> Get only disk cluster information,
              <see langword="false"/> Get only size information.
            </param>
            <returns>A <see ref="Alphaleonis.Win32.Filesystem.DiskSpaceInfo"/> class instance.</returns>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.IsReady(System.String)">
            <summary>Gets a value indicating whether a drive is ready.</summary>
            <param name="drivePath">
              A path to a drive. For example: "C:\", "\\server\share", or "\\?\Volume{c0580d5e-2ad6-11dc-9924-806e6f6e6963}\".
            </param>
            <returns><see langword="true"/> if <paramref name="drivePath"/> is ready; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.DeleteCurrentVolumeLabel">
            <summary>Deletes the label of the file system volume that is the root of the current directory.
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.DeleteVolumeLabel(System.String)">
            <summary>Deletes the label of a file system volume.</summary>
            <exception cref="T:System.ArgumentNullException"/>
            <param name="rootPathName">The root directory of a file system volume. This is the volume the function will remove the label.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.DeleteVolumeMountPoint(System.String)">
            <summary>Deletes a Drive letter or mounted folder.</summary>
            <remarks>Deleting a mounted folder does not cause the underlying directory to be deleted.</remarks>
            <remarks>
              If the <paramref name="volumeMountPoint"/> parameter is a directory that is not a mounted folder, the function does nothing. The
              directory is not deleted.
            </remarks>
            <remarks>
              It's not an error to attempt to unmount a volume from a volume mount point when there is no volume actually mounted at that volume
              mount point.
            </remarks>
            <param name="volumeMountPoint">The Drive letter or mounted folder to be deleted. For example, X:\ or Y:\MountX\.</param>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.EnumerateVolumeMountPoints(System.String)">
            <summary>
              Returns an enumerable collection of <see cref="T:System.String"/> of all mounted folders (volume mount points) on the specified volume.
            </summary>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentException"/>
            <param name="volumeGuid">A <see cref="T:System.String"/> containing the volume <see cref="T:System.Guid"/>.</param>
            <returns>An enumerable collection of <see cref="T:System.String"/> of all volume mount points on the specified volume.</returns>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.EnumerateVolumePathNames(System.String)">
            <summary>
              Returns an enumerable collection of <see cref="T:System.String"/> drive letters and mounted folder paths for the specified volume.
            </summary>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentException"/>
            <param name="volumeGuid">A volume <see cref="T:System.Guid"/> path: \\?\Volume{xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}\.</param>
            <returns>An enumerable collection of <see cref="T:System.String"/> containing the path names for the specified volume.</returns>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.EnumerateVolumes">
            <summary>Returns an enumerable collection of <see cref="T:System.String"/> volumes on the computer.</summary>
            <returns>An enumerable collection of <see cref="T:System.String"/> volume names on the computer.</returns>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.GetUniqueVolumeNameForPath(System.String)">
            <summary>
              Get the unique volume name for the given path.
            </summary>
            <exception cref="T:System.ArgumentNullException"/>
            <param name="volumePathName">
              A path string. Both absolute and relative file and directory names, for example "..", is acceptable in this path. If you specify a
              relative file or directory name without a volume qualifier, GetUniqueVolumeNameForPath returns the Drive letter of the current
              volume.
            </param>
            <returns>
              <para>Returns the unique volume name in the form: "\\?\Volume{GUID}\",</para>
              <para>or <see langword="null"/> on error or if unavailable.</para>
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.GetVolumeDeviceName(System.String)">
            <summary>Retrieves the Win32 Device name from the Volume name.</summary>
            <exception cref="T:System.ArgumentNullException"/>
            <param name="volumeName">Name of the Volume.</param>
            <returns>
              The Win32 Device name from the Volume name (for example: "\Device\HarddiskVolume2"), or <see langword="null"/> on error or if
              unavailable.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.GetVolumeDisplayName(System.String)">
            <summary>Gets the shortest display name for the specified <paramref name="volumeName"/>.</summary>
            <remarks>This method basically returns the shortest string returned by <see cref="M:Alphaleonis.Win32.Filesystem.Volume.EnumerateVolumePathNames(System.String)"/></remarks>
            <param name="volumeName">A volume <see cref="T:System.Guid"/> path: \\?\Volume{xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}\.</param>
            <returns>
              The shortest display name for the specified volume found, or <see langword="null"/> if no display names were found.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.GetVolumeGuid(System.String)">
            <summary>
              Retrieves a volume <see cref="T:System.Guid"/> path for the volume that is associated with the specified volume mount point (drive letter,
              volume GUID path, or mounted folder).
            </summary>
            <exception cref="T:System.ArgumentNullException"/>
            <param name="volumeMountPoint">
              The path of a mounted folder (for example, "Y:\MountX\") or a drive letter (for example, "X:\").
            </param>
            <returns>The unique volume name of the form: "\\?\Volume{GUID}\".</returns>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.GetVolumeGuidForNtDeviceName(System.String)">
            <summary>
              Tranlates DosDevicePath to a Volume GUID. For example: "\Device\HarddiskVolumeX\path\filename.ext" can translate to: "\path\
              filename.ext" or: "\\?\Volume{GUID}\path\filename.ext".
            </summary>
            <param name="dosDevice">A DosDevicePath, for example: \Device\HarddiskVolumeX\path\filename.ext.</param>
            <returns>A translated dos path.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.GetVolumeInfo(System.String)">
            <summary>Retrieves information about the file system and volume associated with the specified root file or directorystream.</summary>
            <param name="volumePath">A path that contains the root directory.</param>
            <returns>A <see cref="T:Alphaleonis.Win32.Filesystem.VolumeInfo"/> instance describing the volume associatied with the specified root directory.</returns>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.GetVolumeInfo(Microsoft.Win32.SafeHandles.SafeFileHandle)">
            <summary>Retrieves information about the file system and volume associated with the specified root file or directorystream.</summary>
            <param name="volumeHandle">An instance to a <see cref="T:Microsoft.Win32.SafeHandles.SafeFileHandle"/> handle.</param>
            <returns>A <see cref="T:Alphaleonis.Win32.Filesystem.VolumeInfo"/> instance describing the volume associatied with the specified root directory.</returns>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.GetVolumeLabel(System.String)">
            <summary>Retrieve the label of a file system volume.</summary>
            <param name="volumePath">
              A path to a volume. For example: "C:\", "\\server\share", or "\\?\Volume{c0580d5e-2ad6-11dc-9924-806e6f6e6963}\".
            </param>
            <returns>
              The the label of the file system volume. This function can return <c>string.Empty</c> since a volume label is generally not
              mandatory.
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.GetVolumePathName(System.String)">
            <summary>Retrieves the volume mount point where the specified path is mounted.</summary>
            <exception cref="T:System.ArgumentNullException"/>
            <param name="path">The path to the volume, for example: "C:\Windows".</param>
            <returns>
              <para>Returns the nearest volume root path for a given directory.</para>
              <para>The volume path name, for example: "C:\Windows" returns: "C:\".</para>
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.IsSameVolume(System.String,System.String)">
            <summary>Determines whether the volume of two file system objects is the same.</summary>
            <param name="path1">The first filesystem ojbect with full path information.</param>
            <param name="path2">The second file system object with full path information.</param>
            <returns><see langword="true"/> if both filesytem objects reside on the same volume, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.IsVolume(System.String)">
            <summary>Determines whether the specified volume name is a defined volume on the current computer.</summary>
            <param name="volumeMountPoint">
              A path to a volume. For example: "C:\", "\\server\share", or "\\?\Volume{c0580d5e-2ad6-11dc-9924-806e6f6e6963}\".
            </param>
            <returns><see langword="true"/> on success, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.SetCurrentVolumeLabel(System.String)">
            <summary>Sets the label of the file system volume that is the root of the current directory.</summary>
            <exception cref="T:System.ArgumentNullException"/>
            <param name="volumeName">A name for the volume.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.SetVolumeLabel(System.String,System.String)">
            <summary>Sets the label of a file system volume.</summary>
            <param name="volumePath">
              <para>A path to a volume. For example: "C:\", "\\server\share", or "\\?\Volume{c0580d5e-2ad6-11dc-9924-806e6f6e6963}\"</para>
              <para>If this parameter is <see langword="null"/>, the function uses the current drive.</para>
            </param>
            <param name="volumeName">
              <para>A name for the volume.</para>
              <para>If this parameter is <see langword="null"/>, the function deletes any existing label</para>
              <para>from the specified volume and does not assign a new label.</para>
            </param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.SetVolumeMountPoint(System.String,System.String)">
            <summary>Associates a volume with a Drive letter or a directory on another volume.</summary>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentException"/>
            <param name="volumeMountPoint">
              The user-mode path to be associated with the volume. This may be a Drive letter (for example, "X:\")
              or a directory on another volume (for example, "Y:\MountX\").
            </param>
            <param name="volumeGuid">A <see cref="T:System.String"/> containing the volume <see cref="T:System.Guid"/>.</param>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.DefineDosDeviceCore(System.Boolean,System.String,System.String,Alphaleonis.Win32.Filesystem.DosDeviceAttributes,System.Boolean)">
             <summary>Defines, redefines, or deletes MS-DOS device names.</summary>
             <exception cref="T:System.ArgumentNullException"/>
             <param name="isDefine">
               <see langword="true"/> defines a new MS-DOS device. <see langword="false"/> deletes a previously defined MS-DOS device.
             </param>
             <param name="deviceName">
               An MS-DOS device name string specifying the device the function is defining, redefining, or deleting.
             </param>
             <param name="targetPath">
               A pointer to a path string that will implement this device. The string is an MS-DOS path string unless the
               <see cref="F:Alphaleonis.Win32.Filesystem.DosDeviceAttributes.RawTargetPath"/> flag is specified, in which case this string is a path string.
             </param>
             <param name="deviceAttributes">
               The controllable aspects of the DefineDosDevice function, <see cref="T:Alphaleonis.Win32.Filesystem.DosDeviceAttributes"/> flags which will be combined with the
               default.
             </param>
             <param name="exactMatch">
               Only delete MS-DOS device on an exact name match. If <paramref name="exactMatch"/> is <see langword="true"/>,
               <paramref name="targetPath"/> must be the same path used to create the mapping.
             </param>
            
             <returns><see langword="true"/> on success, <see langword="false"/> otherwise.</returns>      
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.Volume.DeleteVolumeMountPointCore(System.String,System.Boolean)">
            <summary>Deletes a Drive letter or mounted folder.</summary>
            <remarks>
              <para>It's not an error to attempt to unmount a volume from a volume mount point when there is no volume actually mounted at that volume mount point.</para>
              <para>Deleting a mounted folder does not cause the underlying directory to be deleted.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"/>
            <param name="volumeMountPoint">The Drive letter or mounted folder to be deleted. For example, X:\ or Y:\MountX\.</param>
            <param name="continueOnException">
              <see langword="true"/> suppress any Exception that might be thrown as a result from a failure, such as unavailable resources.
            </param>
            <returns>If completed successfully returns <see cref="F:Alphaleonis.Win32.Win32Errors.ERROR_SUCCESS"/>, otherwise the last error number.</returns>      
        </member>
        <member name="T:Alphaleonis.Win32.Filesystem.VolumeInfo">
            <summary>Contains information about a filesystem Volume.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.VolumeInfo.#ctor(System.String)">
            <summary>Initializes a VolumeInfo instance.</summary>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentException"/>
            <param name="volumeName">A valid drive path or drive letter. This can be either uppercase or lowercase, 'a' to 'z' or a network share in the format: \\server\share.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.VolumeInfo.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>Initializes a VolumeInfo instance.</summary>
            <param name="driveName">A valid drive path or drive letter. This can be either uppercase or lowercase, 'a' to 'z' or a network share in the format: "\\server\share".</param>
            <param name="refresh">Refreshes the state of the object.</param>
            <param name="continueOnException"><see langword="true"/> suppress any Exception that might be thrown as a result from a failure, such as unavailable resources.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.VolumeInfo.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle)">
            <summary>Initializes a VolumeInfo instance.</summary>
            <param name="volumeHandle">An instance to a <see cref="T:Microsoft.Win32.SafeHandles.SafeFileHandle"/> handle.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.VolumeInfo.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.Boolean,System.Boolean)">
            <summary>Initializes a VolumeInfo instance.</summary>
            <param name="volumeHandle">An instance to a <see cref="T:Microsoft.Win32.SafeHandles.SafeFileHandle"/> handle.</param>
            <param name="refresh">Refreshes the state of the object.</param>
            <param name="continueOnException"><see langword="true"/> suppress any Exception that might be thrown as a result from a failure, such as unavailable resources.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.VolumeInfo.Refresh">
            <summary>Refreshes the state of the object.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Filesystem.VolumeInfo.ToString">
            <summary>Returns the full path of the volume.</summary>
            <returns>A string that represents this instance.</returns>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.VolumeInfo.CasePreservedNames">
            <summary>The specified volume supports preserved case of file names when it places a name on disk.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.VolumeInfo.CaseSensitiveSearch">
            <summary>The specified volume supports case-sensitive file names.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.VolumeInfo.Compression">
            <summary>The specified volume supports file-based compression.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.VolumeInfo.FileSystemName">
            <summary>Gets the name of the file system, for example, the FAT file system or the NTFS file system.</summary>
            <value>The name of the file system.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.VolumeInfo.FullPath">
            <summary>The full path to the volume.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.VolumeInfo.Guid">
            <summary>The volume GUID.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.VolumeInfo.MaximumComponentLength">
            <summary>Gets the maximum length of a file name component that the file system supports.</summary>
            <value>The maximum length of a file name component that the file system supports.</value>      
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.VolumeInfo.Name">
            <summary>Gets the label of the volume.</summary>
            <returns>The label of the volume.</returns>
            <remarks>This property is the label assigned to the volume, such "MyDrive"</remarks>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.VolumeInfo.NamedStreams">
            <summary>The specified volume supports named streams.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.VolumeInfo.PersistentAcls">
            <summary>The specified volume preserves and enforces access control lists (ACL).</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.VolumeInfo.ReadOnlyVolume">
            <summary>The specified volume is read-only.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.VolumeInfo.SequentialWriteOnce">
            <summary>The specified volume supports a single sequential write.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.VolumeInfo.SerialNumber">
            <summary>Gets the volume serial number that the operating system assigns when a hard disk is formatted.</summary>
            <value>The volume serial number that the operating system assigns when a hard disk is formatted.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.VolumeInfo.SupportsEncryption">
            <summary>The specified volume supports the Encrypted File System (EFS).</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.VolumeInfo.SupportsExtendedAttributes">
            <summary>The specified volume supports extended attributes.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.VolumeInfo.SupportsHardLinks">
            <summary>The specified volume supports hard links.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.VolumeInfo.SupportsObjectIds">
            <summary>The specified volume supports object identifiers.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.VolumeInfo.SupportsOpenByFileId">
            <summary>The file system supports open by FileID.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.VolumeInfo.SupportsRemoteStorage">
            <summary>The specified volume supports remote storage. (This property does not appear on MSDN)</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.VolumeInfo.SupportsReparsePoints">
            <summary>The specified volume supports re-parse points.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.VolumeInfo.SupportsSparseFiles">
            <summary>The specified volume supports sparse files.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.VolumeInfo.SupportsTransactions">
            <summary>The specified volume supports transactions.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.VolumeInfo.SupportsUsnJournal">
            <summary>The specified volume supports update sequence number (USN) journals.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.VolumeInfo.UnicodeOnDisk">
            <summary>The specified volume supports Unicode in file names as they appear on disk.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.VolumeInfo.VolumeIsCompressed">
            <summary>The specified volume is a compressed volume, for example, a DoubleSpace volume.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Filesystem.VolumeInfo.VolumeQuotas">
            <summary>The specified volume supports disk quotas.</summary>
        </member>
        <member name="T:Alphaleonis.Win32.Network.DfsInfo">
            <summary>Contains information about a Distributed File System (DFS) root or link. This class cannot be inherited.
            <para>This structure contains the name, status, GUID, time-out, number of targets, and information about each target of the root or link.</para>
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Network.DfsInfo.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Network.DfsInfo"/> class which acts as a wrapper for a DFS root or link target.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Network.DfsInfo.#ctor(Alphaleonis.Win32.Network.NativeMethods.DFS_INFO_9)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Network.DfsInfo"/> class, which acts as a wrapper for a DFS root or link target.</summary>
            <param name="structure">An initialized <see cref="T:Alphaleonis.Win32.Network.NativeMethods.DFS_INFO_9"/> instance.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Network.DfsInfo.ToString">
            <summary>Returns the Universal Naming Convention (UNC) path of the DFS root or link.</summary>
            <returns>A string that represents this instance.</returns>
        </member>
        <member name="P:Alphaleonis.Win32.Network.DfsInfo.DirectoryInfo">
            <summary>The <see cref="P:Alphaleonis.Win32.Network.DfsInfo.DirectoryInfo"/> instance of the DFS root or link.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Network.DfsInfo.Comment">
            <summary>The comment of the DFS root or link.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Network.DfsInfo.EntryPath">
            <summary>The Universal Naming Convention (UNC) path of the DFS root or link.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Network.DfsInfo.Guid">
            <summary>Specifies the GUID of the DFS root or link.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Network.DfsInfo.StorageInfoCollection">
            <summary>The collection of DFS targets of the DFS root or link.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Network.DfsInfo.State">
            <summary>An <see cref="T:Alphaleonis.Win32.Network.DfsVolumeStates"/> enum that specifies a set of bit flags that describe the DFS root or link.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Network.DfsInfo.Timeout">
            <summary>Specifies the time-out, in seconds, of the DFS root or link.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Network.DfsInfo.PropertyFlags">
            <summary>Specifies a set of flags that describe specific properties of a DFS namespace, root, or link.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Network.DfsInfo.MetadataSize">
            <summary>For domain-based DFS namespaces, this member specifies the size of the corresponding Active Directory data blob, in bytes.
            For stand-alone DFS namespaces, this field specifies the size of the metadata stored in the registry,
            including the key names and value names, in addition to the specific data items associated with them. This field is valid for DFS roots only.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Network.DfsInfo.SecurityDescriptor">
            <summary>Pointer to a SECURITY_DESCRIPTOR structure that specifies a self-relative security descriptor to be associated with the DFS link's reparse point.
            This field is valid for DFS links only.
            </summary>
        </member>
        <member name="T:Alphaleonis.Win32.Network.DfsStorageInfo">
            <summary>Contains information about a DFS root or link target in a DFS namespace or from the cache maintained by the DFS client.
            <para>This class cannot be inherited.</para>
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Network.DfsStorageInfo.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Network.DfsStorageInfo"/> class, which acts as a wrapper for a DFS root or link target.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Network.DfsStorageInfo.#ctor(Alphaleonis.Win32.Network.NativeMethods.DFS_STORAGE_INFO_1)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Network.DfsStorageInfo"/> class, which acts as a wrapper for a DFS root or link target.</summary>
            <param name="structure">An initialized <see cref="T:Alphaleonis.Win32.Network.NativeMethods.DFS_STORAGE_INFO_1"/> instance.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Network.DfsStorageInfo.ToString">
            <summary>The share name of the DFS root target or link target.</summary>
            <returns>A string that represents this instance.</returns>
        </member>
        <member name="P:Alphaleonis.Win32.Network.DfsStorageInfo.ServerName">
            <summary>The server name of the DFS root target or link target.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Network.DfsStorageInfo.ShareName">
            <summary>The share name of the DFS root target or link target.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Network.DfsStorageInfo.State">
            <summary>An <see cref="T:Alphaleonis.Win32.Network.DfsStorageStates"/> enum of the DFS root target or link target.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Network.DfsStorageInfo.TargetPriorityClass">
            <summary>Contains a DFS target's priority class and rank.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Network.DfsStorageInfo.TargetPriorityRank">
            <summary>Specifies the priority rank value of the target. The default value is 0, which indicates the highest priority rank within a priority class.</summary>
        </member>
        <member name="T:Alphaleonis.Win32.Network.DfsPropertyFlags">
            <summary>A set of bit flags that describe specific properties of a DFS namespace, root, or link.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.DfsPropertyFlags.None">
            <summary>No property flag.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.DfsPropertyFlags.InsiteReferrals">
            <summary>DFS_PROPERTY_FLAG_INSITE_REFERRALS
            <para>
              Scope: Domain roots, stand-alone roots, and links.
              If this flag is set at the DFS root, it applies to all links; otherwise, the value of this flag is considered for each individual link.
            </para>
            <para>
              When this flag is set, a DFS referral response from a DFS server for a DFS root or link with the "INSITE" option enabled contains only
              those targets which are in the same site as the DFS client requesting the referral.
              Targets in the two global priority classes are always returned, regardless of their site location.
            </para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.DfsPropertyFlags.RootScalability">
            <summary>DFS_PROPERTY_FLAG_ROOT_SCALABILITY
            <para>
              Scope: The entire DFS namespace for a domain-based DFS namespace only.
            </para>
            <para>
              By default, a DFS root target server polls the PDS to detect changes to the DFS metadata.
              To prevent heavy server load on the PDC, root scalability can be enabled for the DFS namespace.
              Setting this flag will cause the DFS server to poll the nearest domain controller instead of the PDC for DFS metadata changes for the common namespace.
              Note that any changes made to the metadata must still occur on the PDC, however.
            </para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.DfsPropertyFlags.SiteCosting">
            <summary>DFS_PROPERTY_FLAG_SITE_COSTING
            <para>
              Scope: The entire DFS namespace for both domain-based and stand-alone DFS namespaces.
            </para>
            <para>
              By default, targets returned in a referral response from a DFS server to a DFS client for a DFS root or link
              consists of two groups: targets in the same site as the client, and targets outside the site.
            </para>
            <para>
              If site-costing is enabled for the Active Directory, the response can have more than two groups,
              with each group containing targets with the same site cost for the specific DFS client requesting the referral.
              The groups are ordered by increasing site cost. For more information about how site-costing is used to prioritize targets.
            </para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.DfsPropertyFlags.TargetFailback">
            <summary>DFS_PROPERTY_FLAG_TARGET_FAILBACK
            <para>
              Scope: Domain-based DFS roots, stand-alone DFS roots, and DFS links.
              If this flag is set at the DFS root, it applies to all links; otherwise, the value of this flag is considered for each individual link.
            </para>
            <para>
              When this flag is set, optimal target failback is enabled for V4 DFS clients,
              allowing them to fail back to an optimal target after failing over to a non-optimal one.
              The target failback setting is provided to the DFS client in a V4 referral response by a DFS server.
            </para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.DfsPropertyFlags.ClusterEnabled">
            <summary>DFS_PROPERTY_FLAG_CLUSTER_ENABLED
            <para>Scope: Stand-alone DFS roots and links only.</para>
            <para>The DFS root is clustered to provide high availability for storage failover.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.DfsPropertyFlags.AccessBasedDirectoryEnumeration">
            <summary>DFS_PROPERTY_FLAG_ABDE
            <para>Scope: Domain-based DFS roots and stand-alone DFS roots.</para>
            <para>When this flag is set, Access-Based Directory Enumeration (ABDE) mode support is enabled on the entire DFS root target share of the DFS namespace.</para>
            </summary>
        </member>
        <member name="T:Alphaleonis.Win32.Network.DfsTargetPriorityClass">
            <summary>Defines the set of possible DFS target priority class settings.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.DfsTargetPriorityClass.DfsInvalidPriorityClass">
            <summary>The priority class is not valid.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.DfsTargetPriorityClass.DfsSiteCostNormalPriorityClass">
            <summary>The middle or "normal" site cost priority class for a DFS target.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.DfsTargetPriorityClass.DfsGlobalHighPriorityClass">
            <summary>The highest priority class for a DFS target. Targets assigned this class receive global preference.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.DfsTargetPriorityClass.DfsSiteCostHighPriorityClass">
            <summary>The highest site cost priority class for a DFS target. Targets assigned this class receive the most preference among targets of the same site cost for a given DFS client.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.DfsTargetPriorityClass.DfsSiteCostLowPriorityClass">
            <summary>The lowest site cost priority class for a DFS target. Targets assigned this class receive the least preference among targets of the same site cost for a given DFS client.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.DfsTargetPriorityClass.DfsGlobalLowPriorityClass">
            <summary>The lowest level of priority class for a DFS target. Targets assigned this class receive the least preference globally.</summary>
        </member>
        <member name="T:Alphaleonis.Win32.Network.ShareInfoLevel">
            <summary>The <see cref="T:Alphaleonis.Win32.Network.ShareInfo"/> information level.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.ShareInfoLevel.None">
            <summary>No specific information level used.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.ShareInfoLevel.Info1">
            <summary>Contains information about the shared resource, including the name and type of the resource, and a comment associated with the resource.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.ShareInfoLevel.Info2">
            <summary>Contains information about the shared resource, including the name, type, and permissions of the resource, comments associated with the resource,
            the maximum number of concurrent connections, the number of current connections, the local path for the resource, and a password for the current connection.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.ShareInfoLevel.Info503">
            <summary>Contains information about the shared resource, including the server name, name of the resource, type, and permissions,
            the number of connections, and other pertinent information.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.ShareInfoLevel.Info1005">
            <summary>Contains information about the shared resource.</summary>
        </member>
        <member name="T:Alphaleonis.Win32.Network.NativeMethods.ResourceUsage">
            <summary>NETRESOURCE structure.
              <para>ResourceUsage: A set of bit flags describing how the resource can be used.</para>
            </summary>
            <remarks>Note that this member can be specified only if the <see cref="T:Alphaleonis.Win32.Network.NativeMethods.ResourceScope"/> member is equal to <see cref="F:Alphaleonis.Win32.Network.NativeMethods.ResourceScope.GlobalNet"/>.</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.ResourceUsage.Connectable">
            <summary>RESOURCEUSAGE_CONNECTABLE
            <para>The resource is a connectable resource.</para>
            <para>The name pointed to by the lpRemoteName member can be passed to the WNetAddConnection function to make a network connection.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.ResourceUsage.Container">
            <summary>RESOURCEUSAGE_CONTAINER
            <para>The resource is a container resource.</para>
            <para>The name pointed to by the lpRemoteName member can be passed to the WNetAddConnection function to make a network connection.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.ResourceUsage.NoLocalDevice">
            <summary>RESOURCEUSAGE_NOLOCALDEVICE
            <para>The resource is not a local device.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.ResourceUsage.Sibling">
            <summary>RESOURCEUSAGE_SIBLING
            <para>The resource is a sibling.</para>
            <para>This value is not used by Windows.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.ResourceUsage.Attached">
            <summary>RESOURCEUSAGE_ATTACHED
            <para>The resource must be attached.</para>
            <para>This value specifies that a function to enumerate this resource should fail</para>
            <para>if the caller is not authenticated, even if the network permits enumeration without authentication.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.ResourceUsage.All">
            <summary>RESOURCEUSAGE_ALL
            <para>Setting this value is equivalent to setting: <see cref="F:Alphaleonis.Win32.Network.NativeMethods.ResourceUsage.Connectable"/>, <see cref="F:Alphaleonis.Win32.Network.NativeMethods.ResourceUsage.Container"/>, and <see cref="F:Alphaleonis.Win32.Network.NativeMethods.ResourceUsage.Attached"/>.</para>
            </summary>
        </member>
        <member name="T:Alphaleonis.Win32.Network.NativeMethods.ResourceType">
            <summary>NETRESOURCE structure.
            <para>ResourceType: The type of resource.</para>
            <remarks>
            <para>If a network provider cannot distinguish between</para>
            <para>print and disk resources, it can enumerate all resources.</para>
            </remarks>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.ResourceType.Any">
            <summary>RESOURCETYPE_ANY
            <para>ResourceType: All resources.</para>
            <remarks>
            <para>If a network provider cannot distinguish between print and disk resources, it can enumerate all resources.</para>
            <para>This value cannot be combined with <see cref="F:Alphaleonis.Win32.Network.NativeMethods.ResourceType.Disk"/> or <see cref="F:Alphaleonis.Win32.Network.NativeMethods.ResourceType.Print"/>.</para>
            </remarks>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.ResourceType.Disk">
            <summary>RESOURCETYPE_DISK
            <para>All disk resources.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.ResourceType.Print">
            <summary>RESOURCETYPE_PRINT
            <para>All print resources.</para>
            </summary>
        </member>
        <member name="T:Alphaleonis.Win32.Network.NativeMethods.ResourceScope">
            <summary>NETRESOURCE structure.
            <para>ResourceScope: The scope of the enumeration.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.ResourceScope.Connected">
            <summary>RESOURCE_CONNECTED
            <para>Enumerate all currently connected resources.</para>
            <para>The function ignores the <see cref="T:Alphaleonis.Win32.Network.NativeMethods.ResourceUsage"/> parameter.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.ResourceScope.GlobalNet">
            <summary>RESOURCE_GLOBALNET
            <para>Enumerate all resources on the network.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.ResourceScope.Remembered">
            <summary>RESOURCE_REMEMBERED
            <para>Enumerate all remembered (persistent) connections.</para>
            <para>The function ignores the <see cref="T:Alphaleonis.Win32.Network.NativeMethods.ResourceUsage"/> parameter.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.ResourceScope.Recent">
            <summary>RESOURCE_RECENT</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.ResourceScope.Context">
            <summary>RESOURCE_CONTEXT
            <para>Enumerate only resources in the network context of the caller. Specify this value for a Network Neighborhood view.</para>
            <para>The function ignores the <see cref="T:Alphaleonis.Win32.Network.NativeMethods.ResourceUsage"/> parameter.</para>
            </summary>
        </member>
        <member name="T:Alphaleonis.Win32.Network.NativeMethods.ResourceDisplayType">
            <summary>The display options for the network object in a network browsing user interface.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.ResourceDisplayType.Generic">
            <summary>RESOURCEDISPLAYTYPE_GENERIC
            <para>The method used to display the object does not matter.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.ResourceDisplayType.Domain">
            <summary>RESOURCEDISPLAYTYPE_DOMAIN
            <para>The object should be displayed as a domain.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.ResourceDisplayType.Server">
            <summary>RESOURCEDISPLAYTYPE_SERVER
            <para>The object should be displayed as a server.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.ResourceDisplayType.Share">
            <summary>RESOURCEDISPLAYTYPE_SHARE
            <para>The object should be displayed as a share</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.ResourceDisplayType.File">
            <summary>RESOURCEDISPLAYTYPE_FILE
            <para>The object should be displayed as a file.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.ResourceDisplayType.Group">
            <summary>RESOURCEDISPLAYTYPE_GROUP
            <para>The object should be displayed as a group.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.ResourceDisplayType.Network">
            <summary>RESOURCEDISPLAYTYPE_NETWORK
            <para>The object should be displayed as a network.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.ResourceDisplayType.Root">
            <summary>RESOURCEDISPLAYTYPE_ROOT
            <para>The object should be displayed as a logical root for the entire network.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.ResourceDisplayType.ShareAdmin">
            <summary>RESOURCEDISPLAYTYPE_SHAREADMIN
            <para>The object should be displayed as a administrative share.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.ResourceDisplayType.Directory">
            <summary>RESOURCEDISPLAYTYPE_DIRECTORY
            <para>The object should be displayed as a directory.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.ResourceDisplayType.Tree">
            <summary>RESOURCEDISPLAYTYPE_TREE
            <para>The object should be displayed as a tree.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.ResourceDisplayType.NdsContainer">
            <summary>RESOURCEDISPLAYTYPE_NDSCONTAINER
            <para>The object should be displayed as a Netware Directory Service container.</para>
            </summary>
        </member>
        <member name="T:Alphaleonis.Win32.Network.NativeMethods.Connect">
            <summary>Used by function WNetUseConnection(); Set of bit flags describing the connection. This parameter can be any combination of the following values.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.Connect.None">
            <summary>No Connect options are used.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.Connect.UpdateProfile">
            <summary>This flag instructs the operating system to store the network resource connection. If this bit flag is set, the operating system automatically attempts to restore the connection when the user logs on. The system remembers only successful connections that redirect local devices. It does not remember connections that are unsuccessful or deviceless connections.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.Connect.Interactive">
            <summary>If this flag is set, the operating system may interact with the user for authentication purposes.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.Connect.Prompt">
            <summary>This flag instructs the system not to use any default settings for user names or passwords without offering the user the opportunity to supply an alternative. This flag is ignored unless <see cref="F:Alphaleonis.Win32.Network.NativeMethods.Connect.Interactive"/> is also set.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.Connect.Redirect">
            <summary>This flag forces the redirection of a local device when making the connection.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.Connect.SaveCredentialManager">
            <summary>If this flag is set, and the operating system prompts for a credential, the credential should be saved by the credential manager. If the credential manager is disabled for the caller's logon session, or if the network provider does not support saving credentials, this flag is ignored. This flag is also ignored unless you set the "CommandLine" flag.</summary>
        </member>
        <member name="T:Alphaleonis.Win32.Network.NativeMethods.DfsNamespaceFlavors">
            <summary>Contains the name and type (domain-based or stand-alone) of a DFS namespace.</summary>
            <remarks>Minimum supported client: Windows XP with SP1 [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2003 [desktop apps only]</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.DfsNamespaceFlavors.Unknown">
            <summary></summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.DfsNamespaceFlavors.Standalone">
            <summary>DFS_VOLUME_FLAVOR_STANDALONE
            <para>Specifies a stand-alone DFS namespace.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.DfsNamespaceFlavors.AdBlob">
            <summary>DFS_VOLUME_FLAVOR_AD_BLOB
            <para>Specifies a domain-based DFS namespace.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.DfsNamespaceFlavors.All">
            <summary>DFS_VOLUME_FLAVORS bitmask (0x00000300)
            <para>Used to extract the DFS namespace flavor.</para>
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Network.NativeMethods.WNetCancelConnection(System.String,Alphaleonis.Win32.Network.NativeMethods.Connect,System.Boolean)">
            <summary>The WNetCancelConnection function cancels an existing network connection. You can also call the function to remove remembered network connections that are not currently connected.</summary>
            <returns>
            If the function succeeds, the return value is <see cref="F:Alphaleonis.Win32.Win32Errors.NO_ERROR"/>
            If the function fails, the return value is a system error code.
            </returns>
            <remarks>
            <para>Minimum supported client: Windows 2000 Professional [desktop apps only]</para>
            <para>Minimum supported server: Windows 2000 Server [desktop apps only]</para>
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Network.NativeMethods.WNetGetUniversalName(System.String,System.UInt32,Alphaleonis.Win32.SafeGlobalMemoryBufferHandle,System.UInt32@)">
            <summary>The WNetGetUniversalName function takes a drive-based path for a network resource and returns an information structure that contains a more universal form of the name.</summary>
            <returns>
            If the function succeeds, the return value is <see cref="F:Alphaleonis.Win32.Win32Errors.NO_ERROR"/>
            If the function fails, the return value is a system error code.
            </returns>
            <remarks>
            <para>Minimum supported client: Windows 2000 Professional [desktop apps only]</para>
            <para>Minimum supported server: Windows 2000 Server [desktop apps only]</para>
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Network.NativeMethods.WNetUseConnection(System.IntPtr,Alphaleonis.Win32.Network.NativeMethods.NETRESOURCE@,System.String,System.String,Alphaleonis.Win32.Network.NativeMethods.Connect,System.Text.StringBuilder,System.UInt32@,System.UInt32@)">
            <summary>The WNetUseConnection function creates a connection to a network resource. The function can redirect a local device to a network resource.</summary>
            <returns>
            If the function succeeds, the return value is <see cref="F:Alphaleonis.Win32.Win32Errors.NO_ERROR"/>
            If the function fails, the return value is a system error code.
            </returns>
            <remarks>
            <para>Minimum supported client: Windows 2000 Professional [desktop apps only]</para>
            <para>Minimum supported server: Windows 2000 Server [desktop apps only]</para>
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Network.NativeMethods.NetConnectionEnum(System.String,System.String,System.UInt32,Alphaleonis.Win32.SafeGlobalMemoryBufferHandle@,System.Int32,System.UInt32@,System.UInt32@,System.UInt32@)">
            <summary>Lists all connections made to a shared resource on the server or all connections established from a particular computer.</summary>
            <returns>
            If the function succeeds, the return value is NERR_Success.
            If the function fails, the return value is a system error code.
            </returns>
            <remarks>
            <para>If there is more than one user using this connection, then it is possible to get more than one structure for the same connection, but with a different user name.</para>
            <para>Administrator, Server or Print Operator, or Power User group membership is required to successfully execute the NetConnectionEnum function.</para>
            <para>Minimum supported client: Windows XP [desktop apps only]</para>
            <para>Minimum supported server: Windows Server 2003 [desktop apps only]</para>
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Network.NativeMethods.NetFileClose(System.String,System.UInt32)">
            <summary>Forces a resource to close. This function can be used when an error prevents closure by any other means.</summary>
            <returns>
            If the function succeeds, the return value is NERR_Success.
            If the function fails, the return value is a system error code.
            </returns>
            <remarks>
            <para>You should use NetFileClose with caution because it does not write data cached on the client system to the file before closing the file.</para>
            <para>Only members of the Administrators or Server Operators local group can successfully execute the NetFileEnum function.</para>
            <para>Minimum supported client: Windows XP [desktop apps only]</para>
            <para>Minimum supported server: Windows Server 2003 [desktop apps only]</para>
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Network.NativeMethods.NetFileEnum(System.String,System.String,System.String,System.UInt32,Alphaleonis.Win32.SafeGlobalMemoryBufferHandle@,System.Int32,System.UInt32@,System.UInt32@,System.UInt32@)">
            <summary>Returns information about some or all open files on a server, depending on the parameters specified.</summary>
            <returns>
            If the function succeeds, the return value is NERR_Success.
            If the function fails, the return value is a system error code.
            </returns>
            <remarks>
            <para>Only members of the Administrators or Server Operators local group can successfully execute the NetFileEnum function.</para>
            <para>Minimum supported client: Windows XP [desktop apps only]</para>
            <para>Minimum supported server: Windows Server 2003 [desktop apps only]</para>
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Network.NativeMethods.NetShareEnum(System.String,System.UInt32,Alphaleonis.Win32.SafeGlobalMemoryBufferHandle@,System.Int32,System.UInt32@,System.UInt32@,System.UInt32@)">
            <summary>Retrieves information about each (hidden) Server Message Block (SMB) resource/share on a server.</summary>
            <returns>
            If the function succeeds, the return value is NERR_Success.
            If the function fails, the return value is a system error code.
            </returns>
            <remarks>
            <para>For interactive users (users who are logged on locally to the machine), no special group membership is required to execute the NetShareEnum function.</para>
            <para>For non-interactive users, Administrator, Power User, Print Operator, or Server Operator group membership is required to successfully execute the NetShareEnum function at levels 2, 502, and 503. No special group membership is required for level 0 or level 1 calls.</para>
            <para>This function applies only to Server Message Block (SMB) shares.</para>
            <para>Windows Server 2003 and Windows XP: For all users, Administrator, Power User, Print Operator, or Server Operator group membership is required to successfully execute the NetShareEnum function at levels 2 and 502.</para>
            <para>Minimum supported client: Windows XP [desktop apps only]</para>
            <para>Minimum supported server: Windows Server 2003 [desktop apps only]</para>
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Network.NativeMethods.NetShareGetInfo(System.String,System.String,System.UInt32,Alphaleonis.Win32.SafeGlobalMemoryBufferHandle@)">
            <summary>Retrieves information about a particular Server Message Block (SMB) shared resource on a server.</summary>
            <returns>
            If the function succeeds, the return value is NERR_Success.
            If the function fails, the return value is a system error code.
            </returns>
            <remarks>
            <para>For interactive users (users who are logged on locally to the machine), no special group membership is required to execute the NetShareGetInfo function.</para>
            <para>For non-interactive users, Administrator, Power User, Print Operator, or Server Operator group membership is required to successfully execute the NetShareGetInfo function at levels 2, 502, and 503.</para>
            <para>This function applies only to Server Message Block (SMB) shares.</para>
            <para>Windows Server 2003 and Windows XP: For all users, Administrator, Power User, Print Operator, or Server Operator group membership is required to successfully execute the NetShareGetInfo function at levels 2 and 502.</para>
            <para>Minimum supported client: Windows XP [desktop apps only]</para>
            <para>Minimum supported server: Windows Server 2003 [desktop apps only]</para>
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Network.NativeMethods.NetServerDiskEnum(System.String,System.UInt32,Alphaleonis.Win32.SafeGlobalMemoryBufferHandle@,System.Int32,System.UInt32@,System.UInt32@,System.UInt32@)">
            <summary>The NetServerDiskEnum function retrieves a list of disk drives on a server.</summary>
            <returns>
            If the function succeeds, the return value is NERR_Success.
            If the function fails, the return value is a system error code.
            </returns>
            <remarks>
            <para>The function returns an array of three-character strings (a drive letter, a colon, and a terminating null character).</para>
            <para>Only members of the Administrators or Server Operators local group can successfully execute the NetServerDiskEnum function on a remote computer.</para>
            <para>Minimum supported client: Windows 2000 Professional [desktop apps only]</para>
            <para>Minimum supported server: Windows 2000 Server [desktop apps only]</para>
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Network.NativeMethods.NetDfsEnum(System.String,System.UInt32,System.Int32,Alphaleonis.Win32.SafeGlobalMemoryBufferHandle@,System.UInt32@,System.UInt32@)">
            <summary>Enumerates the Distributed File System (DFS) namespaces hosted on a server or DFS links of a namespace hosted by a server.</summary>
            <returns>
            If the function succeeds, the return value is NERR_Success.
            If the function fails, the return value is a system error code.
            </returns>
            <remarks>
            <para>No special group membership is required for using the NetDfsEnum function.</para>
            <para>Minimum supported client: Windows Vista</para>
            <para>Minimum supported server: Windows Server 2003</para>
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Network.NativeMethods.NetDfsGetClientInfo(System.String,System.String,System.String,System.UInt32,Alphaleonis.Win32.SafeGlobalMemoryBufferHandle@)">
            <summary>Retrieves information about a Distributed File System (DFS) root or link from the cache maintained by the DFS client.</summary>
            <returns>
            If the function succeeds, the return value is NERR_Success.
            If the function fails, the return value is a system error code.
            </returns>
            <remarks>
            <para>No special group membership is required for using the NetDfsGetClientInfo function.</para>
            <para>Minimum supported client: Windows Vista</para>
            <para>Minimum supported server: Windows Server 2003</para>
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Network.NativeMethods.NetDfsGetInfo(System.String,System.String,System.String,System.UInt32,Alphaleonis.Win32.SafeGlobalMemoryBufferHandle@)">
            <summary>Retrieves information about a specified Distributed File System (DFS) root or link in a DFS namespace.</summary>
            <returns>
            If the function succeeds, the return value is NERR_Success.
            If the function fails, the return value is a system error code.
            </returns>
            <remarks>
            <para>No special group membership is required for using the NetDfsGetInfo function.</para>
            <para>Minimum supported client: Windows Vista</para>
            <para>Minimum supported server: Windows Server 2003</para>
            </remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.MaxPreferredLength">
            <summary>A constant of type DWORD that is set to –1. This value is valid as an input parameter to any method in section 3.1.4 that takes a PreferedMaximumLength parameter. When specified as an input parameter, this value indicates that the method MUST allocate as much space as the data requires.</summary>
            <remarks>MSDN "2.2.2.2 MAX_PREFERRED_LENGTH": http://msdn.microsoft.com/en-us/library/cc247107.aspx </remarks>
        </member>
        <member name="T:Alphaleonis.Win32.Network.NativeMethods.DFS_INFO_9">
            <summary>Contains the name, status, GUID, time-out, property flags, metadata size, DFS target information, link reparse point security descriptor, and a list of DFS targets for a root or link.</summary>
            <remarks>Minimum supported client: Windows Vista with SP1</remarks>
            <remarks>Minimum supported server: Windows Server 2008</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.DFS_INFO_9.EntryPath">
            <summary>The Universal Naming Convention (UNC) path of a DFS root or link.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.DFS_INFO_9.Comment">
            <summary>The comment associated with the DFS root or link.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.DFS_INFO_9.State">
            <summary>A <see cref="T:Alphaleonis.Win32.Network.DfsVolumeStates"/> that specifies a set of bit flags that describe the DFS root or link.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.DFS_INFO_9.Timeout">
            <summary>Specifies the time-out, in seconds, of the DFS root or link.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.DFS_INFO_9.Guid">
            <summary>Specifies the GUID of the DFS root or link.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.DFS_INFO_9.PropertyFlags">
            <summary>Specifies a set of flags that describe specific properties of a DFS namespace, root, or link.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.DFS_INFO_9.MetadataSize">
            <summary>For domain-based DFS namespaces, this member specifies the size of the corresponding Active Directory data blob, in bytes.
            For stand-alone DFS namespaces, this field specifies the size of the metadata stored in the registry,
            including the key names and value names, in addition to the specific data items associated with them.
            This field is valid for DFS roots only.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.DFS_INFO_9.SdLengthReserved">
            <summary>This member is reserved for system use.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.DFS_INFO_9.pSecurityDescriptor">
            <summary>Pointer to a SECURITY_DESCRIPTOR structure that specifies a self-relative security descriptor to be associated with the DFS link's reparse point.
            This field is valid for DFS links only.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.DFS_INFO_9.NumberOfStorages">
            <summary>Specifies the number of DFS targets.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.DFS_INFO_9.Storage">
            <summary>An array of <see cref="T:Alphaleonis.Win32.Network.NativeMethods.DFS_STORAGE_INFO_1"/> structures.</summary>
        </member>
        <member name="T:Alphaleonis.Win32.Network.NativeMethods.DFS_TARGET_PRIORITY">
            <summary>Contains the priority class and rank of a specific DFS target.</summary>
            <remarks>Minimum supported client: Windows Vista</remarks>
            <remarks>Minimum supported server: Windows Server 2008, Windows Server 2003 with SP1</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.DFS_TARGET_PRIORITY.TargetPriorityClass">
            <summary>DFS_TARGET_PRIORITY_CLASS enumeration value that specifies the priority class of the target.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.DFS_TARGET_PRIORITY.TargetPriorityRank">
            <summary>Specifies the priority rank value of the target. The default value is 0, which indicates the highest priority rank within a priority class.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.DFS_TARGET_PRIORITY.Reserved">
            <summary>This member is reserved and must be zero.</summary>
        </member>
        <member name="T:Alphaleonis.Win32.Network.NativeMethods.DFS_STORAGE_INFO_1">
            <summary>Contains information about a DFS target, including the DFS target server name and share name as well as the target's state and priority.</summary>
            <remarks>Minimum supported client: Windows Vista</remarks>
            <remarks>Minimum supported server: Windows Server 2008, Windows Server 2003 with SP1</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.DFS_STORAGE_INFO_1.State">
            <summary>State of the target.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.DFS_STORAGE_INFO_1.ServerName">
            <summary>The DFS root target or link target server name.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.DFS_STORAGE_INFO_1.ShareName">
            <summary>The DFS root target or link target share name.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.DFS_STORAGE_INFO_1.TargetPriority">
            <summary>DFS_TARGET_PRIORITY structure that contains a DFS target's priority class and rank.</summary>
        </member>
        <member name="T:Alphaleonis.Win32.Network.NativeMethods.NETRESOURCE">
            <summary>Contains information about a network resource.
            <para>The NETRESOURCE structure is returned during an enumeration of network resources.</para>
            <para>The NETRESOURCE structure is also specified when making or querying</para>
            <para>a network connection with calls to various Windows Networking functions.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.NETRESOURCE.dwScope">
            <summary>The scope of the enumeration.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.NETRESOURCE.dwType">
            <summary>The type of resource</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.NETRESOURCE.dwDisplayType">
            <summary>The display options for the network object in a network browsing user interface.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.NETRESOURCE.dwUsage">
            <summary>A set of bit flags describing how the resource can be used.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.NETRESOURCE.lpLocalName">
            <summary>If the <see cref="F:Alphaleonis.Win32.Network.NativeMethods.NETRESOURCE.dwScope"/> member is equal to <see cref="F:Alphaleonis.Win32.Network.NativeMethods.ResourceScope.Connected"/> or <see cref="F:Alphaleonis.Win32.Network.NativeMethods.ResourceScope.Remembered"/>,
            this member is a pointer to a <see langword="null"/>-terminated character string that specifies the name of a local device.
            This member is <see langword="null"/> if the connection does not use a device.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.NETRESOURCE.lpRemoteName">
            <summary>If the entry is a network resource, this member is a <see cref="T:System.String"/> that specifies the remote network name.
            If the entry is a current or persistent connection, <see cref="F:Alphaleonis.Win32.Network.NativeMethods.NETRESOURCE.lpRemoteName"/> member points to 
            the network name associated with the name pointed to by the <see cref="F:Alphaleonis.Win32.Network.NativeMethods.NETRESOURCE.lpLocalName"/> member.
            The <see cref="T:System.String"/> can be <see cref="F:Alphaleonis.Win32.Filesystem.NativeMethods.MaxPath"/> characters in length,
            and it must follow the network provider's naming conventions.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.NETRESOURCE.lpComment">
            <summary>A <see cref="T:System.String"/> that contains a comment supplied by the network provider.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.NETRESOURCE.lpProvider">
            <summary>A <see cref="T:System.String"/> that contains the name of the provider that owns the resource. 
            This member can be <see langword="null"/> if the provider name is unknown.
            </summary>
        </member>
        <member name="T:Alphaleonis.Win32.Network.NativeMethods.FILE_INFO_3">
            <summary>Contains the identifier and other pertinent information about files, devices, and pipes.</summary>
            <remarks>This structure is only for use with the NetFileEnum function.</remarks>
            <remarks>Minimum supported client: Windows XP [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2003 [desktop apps only]</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.FILE_INFO_3.fi3_id">
            <summary>The identification number assigned to the resource when it is opened.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.FILE_INFO_3.fi3_permissions">
            <summary>The access permissions associated with the opening application. This member can be one or more of the following <see cref="T:Alphaleonis.Win32.Network.AccessPermissions"/> values.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.FILE_INFO_3.fi3_num_locks">
            <summary>The number of file locks on the file, device, or pipe.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.FILE_INFO_3.fi3_pathname">
            <summary>The path of the opened resource.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.FILE_INFO_3.fi3_username">
            <summary>Specifies which user (on servers that have user-level security) or which computer (on servers that have share-level security) opened the resource.</summary>
        </member>
        <member name="T:Alphaleonis.Win32.Network.NativeMethods.DFS_INFO_200">
            <summary>Contains the name of a domain-based Distributed File System (DFS) namespace.</summary>
            <remarks>This structure is only for use with the NetDfsEnum, NetDfsGetClientInfo, and NetDfsGetInfo functions.</remarks>
            <remarks>Minimum supported client: Windows XP [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2003 [desktop apps only]</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.DFS_INFO_200.FtDfsName">
            <summary>The name of a domain-based DFS namespace.</summary>
        </member>
        <member name="T:Alphaleonis.Win32.Network.NativeMethods.DFS_INFO_300">
            <summary>Contains the name and type (domain-based or stand-alone) of a DFS namespace.</summary>
            <remarks>The DFS functions use the <see cref="T:Alphaleonis.Win32.Network.NativeMethods.DFS_INFO_300"/> structure to enumerate DFS namespaces hosted on a machine.</remarks>
            <remarks>Minimum supported client: Windows XP with SP1 [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2003 [desktop apps only]</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.DFS_INFO_300.Flags">
            <summary>Value that specifies the type of the DFS namespace. This member can be one of the <see cref="T:Alphaleonis.Win32.Network.NativeMethods.DfsNamespaceFlavors"/> values.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.DFS_INFO_300.DfsName">
            <summary>The name of a DFS namespace.
            This member can have one of the following two formats:
            The first format is: \ServerName\DfsName
            where ServerName is the name of the root target server that hosts the stand-alone DFS namespace and DfsName is the name of the DFS namespace.
            The second format is:
            \DomainName\DomDfsName
            where DomainName is the name of the domain that hosts the domain-based DFS namespace and DomDfsname is the name of the DFS namespace.
            </summary>
        </member>
        <member name="T:Alphaleonis.Win32.Network.NativeMethods.REMOTE_NAME_INFO">
            <summary>Contains path and name information for a network resource.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.REMOTE_NAME_INFO.lpUniversalName">
            <summary>Identifies a network resource.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.REMOTE_NAME_INFO.lpConnectionName">
            <summary>The name of a network connection.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.REMOTE_NAME_INFO.lpRemainingPath">
            <summary>The remaing path.</summary>
        </member>
        <member name="T:Alphaleonis.Win32.Network.NativeMethods.CONNECTION_INFO_1">
            <summary>Contains the identification number of a connection, number of open files, connection time, number of users on the connection, and the type of connection.</summary>
            <remarks>Minimum supported client: Windows XP [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2003 [desktop apps only]</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.CONNECTION_INFO_1.coni1_id">
            <summary>Specifies a connection identification number.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.CONNECTION_INFO_1.coni1_type">
            <summary>A combination of values that specify the type of connection made from the local device name to the shared resource.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.CONNECTION_INFO_1.coni1_num_opens">
            <summary>Specifies the number of files currently open as a result of the connection.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.CONNECTION_INFO_1.coni1_num_users">
            <summary>Specifies the number of users on the connection.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.CONNECTION_INFO_1.coni1_time">
            <summary>Specifies the number of seconds that the connection has been established.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.CONNECTION_INFO_1.coni1_username">
            <summary>If the server sharing the resource is running with user-level security, the UserName member describes which user made the connection. If the server is running with share-level security, coni1_username describes which computer (computername) made the connection.</summary>
            <remarks>Note that Windows does not support share-level security.</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.CONNECTION_INFO_1.oni1_netname">
            <summary>String that specifies either the share name of the server's shared resource or the computername of the client. The value of this member depends on which name was specified as the qualifier parameter to the NetConnectionEnum function.</summary>
        </member>
        <member name="T:Alphaleonis.Win32.Network.NativeMethods.SHARE_INFO_1005">
            <summary>Contains information about the shared resource.</summary>
            <remarks>This structure can be retrieved by calling the NetShareGetInfo function.</remarks>
            <remarks>Minimum supported client: Windows XP [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2003 [desktop apps only]</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.SHARE_INFO_1005.shi1005_flags">
            <summary>A bitmask of flags that specify information about the shared resource.</summary>
        </member>
        <member name="T:Alphaleonis.Win32.Network.NativeMethods.SHARE_INFO_1">
            <summary>Contains information about the shared resource, including the name and type of the resource, and a comment associated with the resource.</summary>
            <remarks>Minimum supported client: Windows XP [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2003 [desktop apps only]</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.SHARE_INFO_1.shi1_netname">
            <summary>The name of a shared resource.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.SHARE_INFO_1.shi1_type">
            <summary>The type of share.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.SHARE_INFO_1.shi1_remark">
            <summary>An optional comment about the shared resource.</summary>
        </member>
        <member name="T:Alphaleonis.Win32.Network.NativeMethods.SHARE_INFO_2">
            <summary>Contains information about the shared resource, including the name, type, and permissions of the resource, comments associated with the resource,
            the maximum number of concurrent connections, the number of current connections, the local path for the resource, and a password for the current connection.
            </summary>
            <remarks>Share information, NT, level 2, requires admin rights to work.</remarks>
            <remarks>Minimum supported client: Windows XP [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2003 [desktop apps only]</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.SHARE_INFO_2.shi2_netname">
            <summary>The name of a shared resource.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.SHARE_INFO_2.shi2_type">
            <summary>The type of share.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.SHARE_INFO_2.shi2_remark">
            <summary>An optional comment about the shared resource.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.SHARE_INFO_2.shi2_permissions">
            <summary>The shared resource's permissions for servers running with share-level security.</summary>
            <remarks>Note that Windows does not support share-level security. This member is ignored on a server running user-level security.</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.SHARE_INFO_2.shi2_max_uses">
            <summary>The maximum number of concurrent connections that the shared resource can accommodate.</summary>
            <remarks>The number of connections is unlimited if the value specified in this member is –1.</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.SHARE_INFO_2.shi2_current_uses">
            <summary>The number of current connections to the resource.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.SHARE_INFO_2.shi2_path">
            <summary>The local path for the shared resource.</summary>
            <remarks>For disks, this member is the path being shared. For print queues, this member is the name of the print queue being shared.</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.SHARE_INFO_2.shi2_passwd">
            <summary>The share's password (when the server is running with share-level security).</summary>
        </member>
        <member name="T:Alphaleonis.Win32.Network.NativeMethods.SHARE_INFO_503">
            <summary>Contains information about the shared resource, including the server name, name of the resource, type, and permissions,
            the number of connections, and other pertinent information.
            </summary>
            <remarks>Minimum supported client: Windows XP [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2003 [desktop apps only]</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.SHARE_INFO_503.shi503_netname">
            <summary>The name of a shared resource.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.SHARE_INFO_503.shi503_type">
            <summary>The type of share.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.SHARE_INFO_503.shi503_remark">
            <summary>An optional comment about the shared resource.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.SHARE_INFO_503.shi503_permissions">
            <summary>The shared resource's permissions for servers running with share-level security.</summary>
            <remarks>Note that Windows does not support share-level security. This member is ignored on a server running user-level security.</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.SHARE_INFO_503.shi503_max_uses">
            <summary>The maximum number of concurrent connections that the shared resource can accommodate.</summary>
            <remarks>The number of connections is unlimited if the value specified in this member is –1.</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.SHARE_INFO_503.shi503_current_uses">
            <summary>The number of current connections to the resource.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.SHARE_INFO_503.shi503_path">
            <summary>The local path for the shared resource.</summary>
            <remarks>For disks, this member is the path being shared. For print queues, this member is the name of the print queue being shared.</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.SHARE_INFO_503.shi503_passwd">
            <summary>The share's password (when the server is running with share-level security).</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.SHARE_INFO_503.shi503_servername">
            <summary>The DNS or NetBIOS name of the remote server on which the shared resource resides.</summary>
            <remarks>A value of "*" indicates no configured server name.</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.SHARE_INFO_503.shi503_reserved">
            <summary>Reserved; must be zero.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.NativeMethods.SHARE_INFO_503.shi503_security_descriptor">
            <summary>Specifies the SECURITY_DESCRIPTOR associated with this share.</summary>
        </member>
        <member name="T:Alphaleonis.Win32.Network.DfsStorageStates">
            <summary>A set of bit flags that describe the storage state of the DFS root or link target.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.DfsStorageStates.None">
            <summary>No storage state.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.DfsStorageStates.Offline">
            <summary>DFS_STORAGE_STATE_OFFLINE
            <para>The DFS root or link target is offline.</para>
            </summary>
            <remarks>Windows Server 2003: The state of a root target cannot be set to DFS_STORAGE_STATE_OFFLINE.</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Network.DfsStorageStates.Online">
            <summary>DFS_STORAGE_STATE_ONLINE
            <para>The DFS root or link target is online.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.DfsStorageStates.Active">
            <summary>DFS_STORAGE_STATE_ACTIVE
            <para>The DFS root or link target is the active target.</para>
            </summary>
        </member>
        <member name="T:Alphaleonis.Win32.Network.DfsVolumeStates">
            <summary>A set of bit flags that describe the state of the DFS root or link;
            <para>the state of the DFS namespace root cannot be changed.</para>
            <para>One <see cref="T:Alphaleonis.Win32.Network.DfsVolumeStates"/> flag is set, and one DFS_VOLUME_FLAVOR flag is set.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.DfsVolumeStates.None">
            <summary>No volume state.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.DfsVolumeStates.Ok">
            <summary>DFS_VOLUME_STATE_OK
            <para>The specified DFS root or link is in the normal state.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.DfsVolumeStates.Inconsistent">
            <summary>DFS_VOLUME_STATE_INCONSISTENT
            <para>The internal DFS database is inconsistent with the specified DFS root or link.</para>
            <para>Attempts to repair the inconsistency have failed.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.DfsVolumeStates.Offline">
            <summary>DFS_VOLUME_STATE_OFFLINE
            <para>The specified DFS root or link is offline or unavailable.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.DfsVolumeStates.Online">
            <summary>DFS_VOLUME_STATE_ONLINE
            <para>The specified DFS root or link is available.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.DfsVolumeStates.FlavorStandalone">
            <summary>DFS_VOLUME_FLAVOR_STANDALONE
            <para>The system sets this flag if the root is associated with a stand-alone DFS namespace.</para>
            </summary>
            <remarks>Windows XP: This value is not supported.</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Network.DfsVolumeStates.FlavorAdBlob">
            <summary>DFS_VOLUME_FLAVOR_AD_BLOB
            <para>The system sets this flag if the root is associated with a domain-based DFS namespace.</para>
            </summary>
            <remarks>Windows XP: This value is not supported.</remarks>
        </member>
        <member name="T:Alphaleonis.Win32.Network.AccessPermissions">
            <summary>A set of bit flags that describe the permissions for the shared resource's on servers running with share-level security.</summary>
            <remarks>Note that Windows does not support share-level security. This member is ignored on a server running user-level security.</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Network.AccessPermissions.None">
            <summary>No permissions.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.AccessPermissions.Read">
            <summary>ACCESS_READ
            <para>Permission to read data from a resource and, by default, to execute the resource.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.AccessPermissions.Write">
            <summary>ACCESS_WRITE
            <para>Permission to write data to the resource.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.AccessPermissions.Create">
            <summary>ACCESS_CREATE
            <para>Permission to create an instance of the resource (such as a file); data can be written to the resource as the resource is created.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.AccessPermissions.Execute">
            <summary>ACCESS_EXEC
            <para>Permission to execute the resource.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.AccessPermissions.Delete">
            <summary>ACCESS_DELETE
            <para>Permission to delete the resource.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.AccessPermissions.Attributes">
            <summary>ACCESS_ATRIB
            <para>Permission to modify the resource's attributes, such as the date and time when a file was last modified.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.AccessPermissions.Permissions">
            <summary>ACCESS_PERM
            <para>Permission to modify the permissions (read, write, create, execute, and delete) assigned to a resource for a user or application.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.AccessPermissions.All">
            <summary>ACCESS_ALL
            <para>Permission to read, write, create, execute, and delete resources, and to modify their attributes and permissions.</para>
            </summary>
        </member>
        <member name="T:Alphaleonis.Win32.Network.ShareResourceTypes">
            <summary>Contains information about the shared resource.</summary>
            <remarks>
            <para>Minimum supported client: Windows XP [desktop apps only]</para>
            <para>Minimum supported server: Windows Server 2003 [desktop apps only]</para>
            </remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Network.ShareResourceTypes.None">
            <summary>No specific resource type used.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.ShareResourceTypes.Dfs">
            <summary>SHI1005_FLAGS_DFS
            <para>The specified share is present in a DFS tree structure. This flag cannot be set with NetShareSetInfo.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.ShareResourceTypes.DfsRoot">
            <summary>SHI1005_FLAGS_DFS_ROOT
            <para>The specified share is the root volume in a DFS tree structure. This flag cannot be set with NetShareSetInfo.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.ShareResourceTypes.RestrictExclusiveOpens">
            <summary>SHI1005_FLAGS_RESTRICT_EXCLUSIVE_OPENS 
            <para>The specified share disallows exclusive file opens, where reads to an open file are disallowed.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.ShareResourceTypes.ForceSharedDelete">
            <summary>SHI1005_FLAGS_FORCE_SHARED_DELETE
            <para>Shared files in the specified share can be forcibly deleted.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.ShareResourceTypes.AllowNamespaceCaching">
            <summary>SHI1005_FLAGS_ALLOW_NAMESPACE_CACHING
            <para>Clients are allowed to cache the namespace of the specified share.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.ShareResourceTypes.AccessBasedDirectoryEnum">
            <summary>SHI1005_FLAGS_ACCESS_BASED_DIRECTORY_ENUM
            <para>The server will filter directory entries based on the access permissions that the user on the client computer has for the server on which the files reside.</para>
            <para>Only files for which the user has read access and directories for which the user has FILE_LIST_DIRECTORY access will be returned. If the user has SeBackupPrivilege, all available information will be returned.</para>
            </summary>
            <remarks>This flag is supported only on servers running Windows Server 2003 with SP1 or later.</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Network.ShareResourceTypes.ForceLevel2OpLock">
            <summary>SHI1005_FLAGS_FORCE_LEVELII_OPLOCK
            <para>Prevents exclusive caching modes that can cause delays for highly shared read-only data.</para>
            </summary>
            <remarks>This flag is supported only on servers running Windows Server 2008 R2 or later.</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Network.ShareResourceTypes.EnableHash">
            <summary>SHI1005_FLAGS_ENABLE_HASH</summary>
            <para>Enables server-side functionality needed for peer caching support.</para>
            <para>Clients on high-latency or low-bandwidth connections can use alternate methods to retrieve data from peers if available, instead of sending requests to the server.</para>
            <para>This is only supported on shares configured for manual caching (CSC_CACHE_MANUAL_REINT).</para>
            <remarks>This flag is supported only on servers running Windows Server 2008 R2 or later.</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Network.ShareResourceTypes.EnableCa">
            <summary>SHI1005_FLAGS_ENABLE_CA (0X4000) - Enables server-side functionality needed for peer caching support. Clients on high-latency or low-bandwidth connections can use alternate methods to retrieve data from peers if available, instead of sending requests to the server. This is only supported on shares configured for manual caching (CSC_CACHE_MANUAL_REINT).</summary>
            <remarks>Windows 7, Windows Server 2008 R2, Windows Vista, Windows Server 2008, and Windows Server 2003:  This flag is not supported.</remarks>
        </member>
        <member name="T:Alphaleonis.Win32.Network.ShareType">
            <summary>The type of the shared resource.</summary>
            <remarks>MSDN: 2.2.2.4 Share Types
            http://msdn.microsoft.com/en-us/library/cc247110.aspx
            </remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Network.ShareType.DiskTree">
            <summary>Disk drive.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.ShareType.PrintQueue">
            <summary>Print queue.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.ShareType.Device">
            <summary>Communication device.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.ShareType.Ipc">
            <summary>Interprocess communication (IPC).</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.ShareType.ClusterFs">
            <summary>A cluster share.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.ShareType.ClusterSoFs">
            <summary>A Scale-Out cluster share.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.ShareType.ClusterDfs">
            <summary>A DFS share in a cluster.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.ShareType.Special">
            <summary>Special share reserved for interprocess communication (IPC$) or remote administration of the server (ADMIN$).
            <para>Can also refer to administrative shares such as C$, D$, E$, and so forth.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.ShareType.Temporary">
            <summary>A temporary share that is not persisted for creation each time the file server initializes.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.ShareType.All">
            <summary>Retriev all known <see cref="T:Alphaleonis.Win32.Network.ShareType"/></summary>
        </member>
        <member name="T:Alphaleonis.Win32.Network.Host">
            <summary>Provides static methods to retrieve network resource information from a local- or remote host.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Network.Host.EnumerateOpenResources">
            <summary>Enumerates open resources from the local host.</summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/> open resources from the local host.</returns>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.Net.NetworkInformation.NetworkInformationException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Network.Host.EnumerateOpenResources(System.String,System.String,System.String,System.Boolean)">
            <summary>Enumerates open resources from the specified host.</summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/> open resources from the specified <paramref name="host"/>.</returns>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.Net.NetworkInformation.NetworkInformationException"/>
            <param name="host">The DNS or NetBIOS name of the remote server. <see langword="null"/> refers to the local host.</param>
            <param name="basePath">
              This parameter may be <see langword="null"/>. Enumerates only resources that have the value of the basepath parameter as a prefix.
              (A prefix is the portion of a path that comes before a backslash.)
            </param>
            <param name="typeName">
              This parameter may be <see langword="null"/>. The name of the user or the name of the connection; If <paramref name="typeName"/>
              does not begin with two backslashes ("\\") it indicates the name of the user. If <paramref name="typeName"/> begins with two
              backslashes ("\\") it indicates the name of the connection.
            </param>
            <param name="continueOnException"><see langword="true"/> suppress any Exception that might be thrown as a result from a failure, such as unavailable resources.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Network.Host.EnumerateOpenResourcesCore(System.String,System.String,System.String,System.Boolean)">
            <summary>>Enumerates open resources from the specified host.</summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/> open resources from the specified <paramref name="host"/>.</returns>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.Net.NetworkInformation.NetworkInformationException"/>
            <param name="host">The DNS or NetBIOS name of the remote server. <see langword="null"/> refers to the local host.</param>
            <param name="basePath">
              This parameter may be <see langword="null"/>. Enumerates only resources that have the value of the basepath parameter as a prefix.
              (A prefix is the portion of a path that comes before a backslash.)
            </param>
            <param name="typeName">
              This parameter may be <see langword="null"/>. The name of the user or the name of the connection; If <paramref name="typeName"/>
              does not begin with two backslashes ("\\") it indicates the name of the user. If <paramref name="typeName"/> begins with two
              backslashes ("\\") it indicates the name of the connection.
            </param>
            <param name="continueOnException"><see langword="true"/> suppress any Exception that might be thrown as a result from a failure, such as unavailable resources.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Network.Host.EnumerateDrives">
            <summary>Enumerates drives from the local host.</summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/> drives from the local host.</returns>
            <exception cref="T:System.Net.NetworkInformation.NetworkInformationException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Network.Host.EnumerateDrives(System.String,System.Boolean)">
            <summary>Enumerates local drives from the specified host.</summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/> drives from the specified host.</returns>
            <exception cref="T:System.Net.NetworkInformation.NetworkInformationException"/>
            <param name="host">The DNS or NetBIOS name of the remote server. <see langword="null"/> refers to the local host.</param>
            <param name="continueOnException">
              <para><see langword="true"/> suppress any Exception that might be thrown as a result from a failure,</para>
              <para>such as unavailable resources.</para>
            </param>
        </member>
        <member name="M:Alphaleonis.Win32.Network.Host.EnumerateDrivesCore(System.String,System.Boolean)">
            <summary>Enumerates local drives from the specified host.</summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/> drives from the specified host.</returns>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.Net.NetworkInformation.NetworkInformationException"/>
            <param name="host">The DNS or NetBIOS name of the remote server. <see langword="null"/> refers to the local host.</param>
            <param name="continueOnException">
              <para><see langword="true"/> suppress any Exception that might be thrown as a result from a failure,</para>
              <para>such as unavailable resources.</para>
            </param>
        </member>
        <member name="M:Alphaleonis.Win32.Network.Host.EnumerateOpenConnections">
            <summary>Enumerates open connections from the local host.</summary>
            <returns><see cref="T:Alphaleonis.Win32.Network.OpenConnectionInfo"/> connection information from the local host.</returns>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.Net.NetworkInformation.NetworkInformationException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Network.Host.EnumerateOpenConnections(System.String,System.String,System.Boolean)">
            <summary>Enumerates open connections from the specified host.</summary>
            <returns><see cref="T:Alphaleonis.Win32.Network.OpenConnectionInfo"/> connection information from the specified <paramref name="host"/>.</returns>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.Net.NetworkInformation.NetworkInformationException"/>
            <param name="host">The DNS or NetBIOS name of the remote server. <see langword="null"/> refers to the local host.</param>
            <param name="share">The name of the Server Message Block (SMB) share.</param>
            <param name="continueOnException">
              <para><see langword="true"/> suppress any Exception that might be thrown as a result from a failure,</para>
              <para>such as unavailable resources.</para>
            </param>
        </member>
        <member name="M:Alphaleonis.Win32.Network.Host.EnumerateShares">
            <summary>Enumerates Server Message Block (SMB) shares from the local host.</summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/> shares from the specified host.</returns>
            <remarks>This method also enumerates hidden shares.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Network.Host.EnumerateShares(System.Boolean)">
            <summary>Enumerates Server Message Block (SMB) shares from the local host.</summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/> shares from the specified host.</returns>
            <remarks>This method also enumerates hidden shares.</remarks>
            <param name="continueOnException"><see langword="true"/> suppress any Exception that might be thrown as a result from a failure, such as unavailable resources.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Network.Host.EnumerateShares(Alphaleonis.Win32.Network.ShareType,System.Boolean)">
            <summary>Enumerates Server Message Block (SMB) shares from the local host.</summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/> shares from the specified host.</returns>
            <remarks>This method also enumerates hidden shares.</remarks>
            <param name="shareType">The type of the shared resource to retrieve.</param>
            <param name="continueOnException"><see langword="true"/> suppress any Exception that might be thrown as a result from a failure, such as unavailable resources.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Network.Host.EnumerateShares(System.String)">
            <summary>Enumerates Server Message Block (SMB) shares from the specified <paramref name="host"/>.</summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/> shares from the specified host.</returns>
            <remarks>This method also enumerates hidden shares.</remarks>
            <param name="host">The DNS or NetBIOS name of the specified host.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Network.Host.EnumerateShares(System.String,System.Boolean)">
            <summary>Enumerates Server Message Block (SMB) shares from the specified <paramref name="host"/>.</summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/> shares from the specified host.</returns>
            <remarks>This method also enumerates hidden shares.</remarks>
            <param name="host">The DNS or NetBIOS name of the specified host.</param>
            <param name="continueOnException"><see langword="true"/> suppress any Exception that might be thrown as a result from a failure, such as unavailable resources.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Network.Host.EnumerateShares(System.String,Alphaleonis.Win32.Network.ShareType,System.Boolean)">
            <summary>Enumerates Server Message Block (SMB) shares from the specified <paramref name="host"/>.</summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/> shares from the specified host.</returns>
            <remarks>This method also enumerates hidden shares.</remarks>
            <param name="host">The DNS or NetBIOS name of the specified host.</param>
            <param name="shareType">The type of the shared resource to retrieve.</param>
            <param name="continueOnException"><see langword="true"/> suppress any Exception that might be thrown as a result from a failure, such as unavailable resources.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Network.Host.GetHostShareFromPath(System.String)">
            <summary>Gets the host and share path name for the given <paramref name="uncPath"/>.</summary>
            <param name="uncPath">The share in the format: \\host\share.</param>
            <returns>The host and share path. For example, if <paramref name="uncPath"/> is: "\\SERVER001\C$\WINDOWS\System32",
              its is returned as string[0] = "SERVER001" and string[1] = "\C$\WINDOWS\System32".
            <para>If the conversion from local path to UNC path fails, <see langword="null"/> is returned.</para>
            </returns>
        </member>
        <member name="M:Alphaleonis.Win32.Network.Host.GetShareInfo(System.String,System.Boolean)">
            <summary>Retrieves information about the Server Message Block (SMB) share as defined on the specified host.</summary>
            <returns>A <see cref="T:Alphaleonis.Win32.Network.ShareInfo"/> class, or <see langword="null"/> on failure or when not available, and <paramref name="continueOnException"/> is <see langword="true"/>.</returns>
            <param name="uncPath">The share in the format: \\host\share.</param>
            <param name="continueOnException"><see langword="true"/> to suppress any Exception that might be thrown as a result from a failure, such as unavailable resources.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Network.Host.GetShareInfo(Alphaleonis.Win32.Network.ShareInfoLevel,System.String,System.Boolean)">
            <summary>Retrieves information about the Server Message Block (SMB) share as defined on the specified host.</summary>
            <returns>A <see cref="T:Alphaleonis.Win32.Network.ShareInfo"/> class, or <see langword="null"/> on failure or when not available, and <paramref name="continueOnException"/> is <see langword="true"/>.</returns>
            <param name="shareLevel">One of the <see cref="T:Alphaleonis.Win32.Network.ShareInfoLevel"/> options.</param>
            <param name="uncPath">The share in the format: \\host\share.</param>
            <param name="continueOnException"><see langword="true"/> to suppress any Exception that might be thrown as a result from a failure, such as unavailable resources.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Network.Host.GetShareInfo(System.String,System.String,System.Boolean)">
            <summary>Retrieves information about the Server Message Block (SMB) share as defined on the specified host.</summary>
            <returns>A <see cref="T:Alphaleonis.Win32.Network.ShareInfo"/> class, or <see langword="null"/> on failure or when not available, and <paramref name="continueOnException"/> is <see langword="true"/>.</returns>
            <param name="host">The DNS or NetBIOS name of the specified host.</param>
            <param name="share">The name of the Server Message Block (SMB) share.</param>
            <param name="continueOnException"><see langword="true"/> to suppress any Exception that might be thrown as a result from a failure, such as unavailable resources.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Network.Host.GetShareInfo(Alphaleonis.Win32.Network.ShareInfoLevel,System.String,System.String,System.Boolean)">
            <summary>Retrieves information about the Server Message Block (SMB) share as defined on the specified host.</summary>
            <returns>A <see cref="T:Alphaleonis.Win32.Network.ShareInfo"/> class, or <see langword="null"/> on failure or when not available, and <paramref name="continueOnException"/> is <see langword="true"/>.</returns>
            <param name="shareLevel">One of the <see cref="T:Alphaleonis.Win32.Network.ShareInfoLevel"/> options.</param>
            <param name="host">A string that specifies the DNS or NetBIOS name of the specified <paramref name="host"/>.</param>
            <param name="share">A string that specifies the name of the Server Message Block (SMB) share.</param>
            <param name="continueOnException"><see langword="true"/> to suppress any Exception that might be thrown as a result from a failure, such as unavailable resources.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Network.Host.EnumerateOpenConnectionsCore(System.String,System.String,System.Boolean)">
            <summary>Enumerates open connections from the specified host.</summary>
            <returns><see cref="T:Alphaleonis.Win32.Network.OpenConnectionInfo"/> connection information from the specified <paramref name="host"/>.</returns>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.Net.NetworkInformation.NetworkInformationException"/>
            <param name="host">The DNS or NetBIOS name of the remote server. <see langword="null"/> refers to the local host.</param>
            <param name="share">The name of the Server Message Block (SMB) share.</param>
            <param name="continueOnException"><see langword="true"/> suppress any Exception that might be thrown as a result from a failure, such as unavailable resources.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Network.Host.EnumerateSharesCore(System.String,Alphaleonis.Win32.Network.ShareType,System.Boolean)">
            <summary>Enumerates Server Message Block (SMB) shares from a local or remote host.</summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/> shares from the specified host.</returns>
            <remarks>This method also enumerates hidden shares.</remarks>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.Net.NetworkInformation.NetworkInformationException"/>
            <param name="host">The DNS or NetBIOS name of the specified host.</param>
            <param name="shareType">The type of the shared resource to retrieve.</param>
            <param name="continueOnException"><see langword="true"/> suppress any Exception that might be thrown as a result from a failure, such as unavailable resources.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Network.Host.GetShareInfoCore(Alphaleonis.Win32.Network.ShareInfoLevel,System.String,System.String,System.Boolean)">
            <summary>Gets the <see cref="T:Alphaleonis.Win32.Network.ShareInfo"/> structure of a Server Message Block (SMB) share.</summary>
            <returns>A <see cref="T:Alphaleonis.Win32.Network.ShareInfo"/> class, or <see langword="null"/> on failure or when not available, and <paramref name="continueOnException"/> is <see langword="true"/>.</returns>
            <exception cref="T:System.Net.NetworkInformation.NetworkInformationException"/>
            <param name="shareLevel">One of the <see cref="T:Alphaleonis.Win32.Network.ShareInfoLevel"/> options.</param>
            <param name="host">A string that specifies the DNS or NetBIOS name of the specified <paramref name="host"/>.</param>
            <param name="share">A string that specifies the name of the Server Message Block (SMB) share.</param>
            <param name="continueOnException"><see langword="true"/> to suppress any Exception that might be thrown as a result from a failure, such as unavailable resources.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Network.Host.EnumerateDfsLinks(System.String)">
            <summary>Enumerates the DFS Links from a DFS namespace.</summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/> of DFS namespaces.</returns>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.Net.NetworkInformation.NetworkInformationException"/>
            <exception cref="T:System.PlatformNotSupportedException"/>
            <param name="dfsName">The Universal Naming Convention (UNC) path of a DFS root or link.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Network.Host.EnumerateDfsRoot">
            <summary>Enumerates the DFS namespaces from the local host.</summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/> of DFS Root namespaces from the local host.</returns>
            <exception cref="T:System.Net.NetworkInformation.NetworkInformationException"/>
            <exception cref="T:System.PlatformNotSupportedException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Network.Host.EnumerateDfsRoot(System.String,System.Boolean)">
            <summary>Enumerates the DFS namespaces from a host.</summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/> of DFS Root namespaces from a host.</returns>
            <exception cref="T:System.Net.NetworkInformation.NetworkInformationException"/>
            <exception cref="T:System.PlatformNotSupportedException"/>
            <param name="host">The DNS or NetBIOS name of a host.</param>
            <param name="continueOnException"><see langword="true"/> suppress any Exception that might be thrown as a result from a failure, such as unavailable resources.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Network.Host.EnumerateDomainDfsRoot">
            <summary>Enumerates the DFS namespaces from the domain.</summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/> of DFS Root namespaces from the domain.</returns>
            <exception cref="T:System.Net.NetworkInformation.NetworkInformationException"/>
            <exception cref="T:System.PlatformNotSupportedException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Network.Host.EnumerateDomainDfsRoot(System.String,System.Boolean)">
            <summary>Enumerates the DFS namespaces from a domain.</summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/> of DFS Root namespaces from a domain.</returns>
            <exception cref="T:System.Net.NetworkInformation.NetworkInformationException"/>
            <exception cref="T:System.PlatformNotSupportedException"/>
            <param name="domain">A domain name.</param>
            <param name="continueOnException"><see langword="true"/> suppress any Exception that might be thrown as a result from a failure, such as unavailable resources.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Network.Host.GetDfsClientInfo(System.String)">
            <summary>Gets information about a DFS root or link from the cache maintained by the DFS client.</summary>
            <returns>A <see cref="T:Alphaleonis.Win32.Network.DfsInfo"/> instance.</returns>
            <exception cref="T:System.Net.NetworkInformation.NetworkInformationException"/>
            <exception cref="T:System.PlatformNotSupportedException"/>
            <param name="dfsName">The Universal Naming Convention (UNC) path of a DFS root or link.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Network.Host.GetDfsClientInfo(System.String,System.String,System.String)">
            <summary>Gets information about a DFS root or link from the cache maintained by the DFS client.</summary>
            <returns>A <see cref="T:Alphaleonis.Win32.Network.DfsInfo"/> instance.</returns>
            <exception cref="T:System.Net.NetworkInformation.NetworkInformationException"/>
            <exception cref="T:System.PlatformNotSupportedException"/>
            <param name="dfsName">The Universal Naming Convention (UNC) path of a DFS root or link.</param>
            <param name="serverName">The name of the DFS root target or link target server.</param>
            <param name="shareName">The name of the share corresponding to the DFS root target or link target.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Network.Host.GetDfsInfo(System.String)">
            <summary>Gets information about a specified DFS root or link in a DFS namespace.</summary>
            <returns>A <see cref="T:Alphaleonis.Win32.Network.DfsInfo"/> instance.</returns>
            <exception cref="T:System.Net.NetworkInformation.NetworkInformationException"/>
            <exception cref="T:System.PlatformNotSupportedException"/>
            <param name="dfsName">The Universal Naming Convention (UNC) path of a DFS root or link.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Network.Host.EnumerateDfsRootCore(System.String,System.Boolean)">
            <summary>Enumerates the DFS namespaces from a host.</summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/> of DFS Root namespaces from a host.</returns>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.Net.NetworkInformation.NetworkInformationException"/>
            <exception cref="T:System.PlatformNotSupportedException"/>
            <param name="host">The DNS or NetBIOS name of a host.</param>
            <param name="continueOnException"><see langword="true"/> suppress any Exception that might be thrown as a result from a failure, such as unavailable resources.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Network.Host.EnumerateDomainDfsRootCore(System.String,System.Boolean)">
            <summary>Enumerates the DFS namespaces from a domain.</summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/> of DFS Root namespaces from a domain.</returns>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.Net.NetworkInformation.NetworkInformationException"/>
            <exception cref="T:System.PlatformNotSupportedException"/>
            <param name="domain">A domain name.</param>
            <param name="continueOnException"><see langword="true"/> suppress any Exception that might be thrown as a result from a failure, such as unavailable resources.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Network.Host.GetDfsInfoCore(System.Boolean,System.String,System.String,System.String)">
            <summary>Retrieves information about a specified DFS root or link in a DFS namespace.</summary>
            <returns>A <see cref="T:Alphaleonis.Win32.Network.DfsInfo"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.Net.NetworkInformation.NetworkInformationException"/>
            <exception cref="T:System.PlatformNotSupportedException"/>
            <param name="getFromClient">
              <see langword="true"/> retrieves information about a Distributed File System (DFS) root or link from the cache maintained by the
              DFS client. When <see langword="false"/> retrieves information about a specified Distributed File System (DFS) root or link in a
              DFS namespace.
            </param>
            <param name="dfsName">The Universal Naming Convention (UNC) path of a DFS root or link.</param>
            <param name="serverName">
              The name of the DFS root target or link target server. If <paramref name="getFromClient"/> is <see langword="false"/>, this
              parameter is always <see langword="null"/>.
            </param>
            <param name="shareName">
              The name of the share corresponding to the DFS root target or link target. If <paramref name="getFromClient"/> is
              <see langword="false"/>, this parameter is always <see langword="null"/>.
            </param>
        </member>
        <member name="M:Alphaleonis.Win32.Network.Host.ConnectDrive(System.String,System.String)">
            <summary>Creates a connection to a network resource. The function can redirect a local device to a network resource.</summary>
            <returns>If <paramref name="localName"/> is <see langword="null"/> or <c>string.Empty</c>, returns the last available drive letter, <see langword="null"/> otherwise.</returns>
            <param name="localName">
              The name of a local device to be redirected, such as "F:". When <paramref name="localName"/> is <see langword="null"/> or
              <c>string.Empty</c>, the last available drive letter will be used. Letters are assigned beginning with Z:, then Y: and so on.
            </param>
            <param name="remoteName">The network resource to connect to. The string can be up to MAX_PATH characters in length.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Network.Host.ConnectDrive(System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>Creates a connection to a network resource. The function can redirect a local device to a network resource.</summary>
            <returns>If <paramref name="localName"/> is <see langword="null"/> or <c>string.Empty</c>, returns the last available drive letter, null otherwise.</returns>
            <param name="localName">
              The name of a local device to be redirected, such as "F:". When <paramref name="localName"/> is <see langword="null"/> or
              <c>string.Empty</c>, the last available drive letter will be used. Letters are assigned beginning with Z:, then Y: and so on.
            </param>
            <param name="remoteName">The network resource to connect to. The string can be up to MAX_PATH characters in length.</param>
            <param name="userName">
              The user name for making the connection. If <paramref name="userName"/> is <see langword="null"/>, the function uses the default
              user name. (The user context for the process provides the default user name)
            </param>
            <param name="password">
              The password to be used for making the network connection. If <paramref name="password"/> is <see langword="null"/>, the function
              uses the current default password associated with the user specified by <paramref name="userName"/>.
            </param>
            <param name="prompt"><see langword="true"/> always pops-up an authentication dialog box.</param>
            <param name="updateProfile"><see langword="true"/> successful network resource connections will be saved.</param>
            <param name="saveCredentials">
              When the operating system prompts for a credential, the credential should be saved by the credential manager when true.
            </param>
        </member>
        <member name="M:Alphaleonis.Win32.Network.Host.ConnectDrive(System.String,System.String,System.Net.NetworkCredential,System.Boolean,System.Boolean,System.Boolean)">
            <summary>Creates a connection to a network resource. The function can redirect a local device to a network resource.</summary>
            <returns>If <paramref name="localName"/> is <see langword="null"/> or <c>string.Empty</c>, returns the last available drive letter, null otherwise.</returns>
            <param name="localName">
              The name of a local device to be redirected, such as "F:". When <paramref name="localName"/> is <see langword="null"/> or
              <c>string.Empty</c>, the last available drive letter will be used. Letters are assigned beginning with Z:, then Y: and so on.
            </param>
            <param name="remoteName">The network resource to connect to. The string can be up to MAX_PATH characters in length.</param>
            <param name="credentials">
              An instance of <see cref="T:System.Net.NetworkCredential"/> which provides credentials for password-based authentication schemes such as basic,
              digest, NTLM, and Kerberos authentication.
            </param>
            <param name="prompt"><see langword="true"/> always pops-up an authentication dialog box.</param>
            <param name="updateProfile"><see langword="true"/> successful network resource connections will be saved.</param>
            <param name="saveCredentials">
              When the operating system prompts for a credential, the credential should be saved by the credential manager when true.
            </param>
        </member>
        <member name="M:Alphaleonis.Win32.Network.Host.ConnectDrive(System.IntPtr,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>Creates a connection to a network resource. The function can redirect a local device to a network resource.</summary>
            <returns>If <paramref name="localName"/> is <see langword="null"/> or <c>string.Empty</c>, returns the last available drive letter, null otherwise.</returns>
            <param name="winOwner">Handle to a window that the provider of network resources can use as an owner window for dialog boxes.</param>
            <param name="localName">
              The name of a local device to be redirected, such as "F:". When <paramref name="localName"/> is <see langword="null"/> or
              <c>string.Empty</c>, the last available drive letter will be used. Letters are assigned beginning with Z:, then Y: and so on.
            </param>
            <param name="remoteName">The network resource to connect to. The string can be up to MAX_PATH characters in length.</param>
            <param name="userName">
              The user name for making the connection. If <paramref name="userName"/> is <see langword="null"/>, the function uses the default
              user name. (The user context for the process provides the default user name)
            </param>
            <param name="password">
              The password to be used for making the network connection. If <paramref name="password"/> is <see langword="null"/>, the function
              uses the current default password associated with the user specified by <paramref name="userName"/>.
            </param>
            <param name="prompt"><see langword="true"/> always pops-up an authentication dialog box.</param>
            <param name="updateProfile"><see langword="true"/> successful network resource connections will be saved.</param>
            <param name="saveCredentials">
              When the operating system prompts for a credential, the credential should be saved by the credential manager when true.
            </param>
        </member>
        <member name="M:Alphaleonis.Win32.Network.Host.ConnectDrive(System.IntPtr,System.String,System.String,System.Net.NetworkCredential,System.Boolean,System.Boolean,System.Boolean)">
            <summary>Creates a connection to a network resource. The function can redirect a local device to a network resource.</summary>
            <returns>If <paramref name="localName"/> is <see langword="null"/> or <c>string.Empty</c>, returns the last available drive letter, null otherwise.</returns>
            <param name="winOwner">Handle to a window that the provider of network resources can use as an owner window for dialog boxes.</param>
            <param name="localName">
              The name of a local device to be redirected, such as "F:". When <paramref name="localName"/> is <see langword="null"/> or
              <c>string.Empty</c>, the last available drive letter will be used. Letters are assigned beginning with Z:, then Y: and so on.
            </param>
            <param name="remoteName">The network resource to connect to. The string can be up to MAX_PATH characters in length.</param>
            <param name="credentials">
              An instance of <see cref="T:System.Net.NetworkCredential"/> which provides credentials for password-based authentication schemes such as basic,
              digest, NTLM, and Kerberos authentication.
            </param>
            <param name="prompt"><see langword="true"/> always pops-up an authentication dialog box.</param>
            <param name="updateProfile"><see langword="true"/> successful network resource connections will be saved.</param>
            <param name="saveCredentials">
              When the operating system prompts for a credential, the credential should be saved by the credential manager when true.
            </param>
        </member>
        <member name="M:Alphaleonis.Win32.Network.Host.ConnectTo(System.String)">
            <summary>Creates a connection to a network resource.</summary>
            <exception cref="T:System.Net.NetworkInformation.NetworkInformationException"/>
            <param name="remoteName">A network resource to connect to, for example: \\server or \\server\share.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Network.Host.ConnectTo(System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>Creates a connection to a network resource.</summary>
            <exception cref="T:System.Net.NetworkInformation.NetworkInformationException"/>
            <param name="remoteName">A network resource to connect to, for example: \\server or \\server\share.</param>
            <param name="userName">
              The user name for making the connection. If <paramref name="userName"/> is <see langword="null"/>, the function uses the default
              user name. (The user context for the process provides the default user name)
            </param>
            <param name="password">
              The password to be used for making the network connection. If <paramref name="password"/> is <see langword="null"/>, the function
              uses the current default password associated with the user specified by <paramref name="userName"/>.
            </param>
            <param name="prompt"><see langword="true"/> always pops-up an authentication dialog box.</param>
            <param name="updateProfile"><see langword="true"/> successful network resource connections will be saved.</param>
            <param name="saveCredentials">
              When the operating system prompts for a credential, the credential should be saved by the credential manager when true.
            </param>
        </member>
        <member name="M:Alphaleonis.Win32.Network.Host.ConnectTo(System.String,System.Net.NetworkCredential,System.Boolean,System.Boolean,System.Boolean)">
             <summary>Creates a connection to a network resource.</summary>
             <param name="remoteName">A network resource to connect to, for example: \\server or \\server\share.</param>
             <param name="credentials">An instance of <see cref="T:System.Net.NetworkCredential"/> which provides credentials for password-based authentication schemes such as basic, digest, NTLM, and Kerberos authentication.</param>
             <param name="prompt"><see langword="true"/> always pops-up an authentication dialog box.</param>
             <param name="updateProfile"><see langword="true"/> successful network resource connections will be saved.</param>
             <param name="saveCredentials">When the operating system prompts for a credential, the credential should be saved by the credential manager when true.</param>
            
             <exception cref="T:System.Net.NetworkInformation.NetworkInformationException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Network.Host.ConnectTo(System.IntPtr,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>Creates a connection to a network resource.</summary>
            <exception cref="T:System.Net.NetworkInformation.NetworkInformationException"/>
            <param name="winOwner">Handle to a window that the provider of network resources can use as an owner window for dialog boxes.</param>
            <param name="remoteName">A network resource to connect to, for example: \\server or \\server\share.</param>
            <param name="userName">
              The user name for making the connection. If <paramref name="userName"/> is <see langword="null"/>, the function uses the default
              user name. (The user context for the process provides the default user name)
            </param>
            <param name="password">
              The password to be used for making the network connection. If <paramref name="password"/> is <see langword="null"/>, the function
              uses the current default password associated with the user specified by <paramref name="userName"/>.
            </param>
            <param name="prompt"><see langword="true"/> always pops-up an authentication dialog box.</param>
            <param name="updateProfile"><see langword="true"/> successful network resource connections will be saved.</param>
            <param name="saveCredentials">When the operating system prompts for a credential, the credential should be saved by the credential manager when true.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Network.Host.ConnectTo(System.IntPtr,System.String,System.Net.NetworkCredential,System.Boolean,System.Boolean,System.Boolean)">
            <summary>Creates a connection to a network resource.</summary>
            <exception cref="T:System.Net.NetworkInformation.NetworkInformationException"/>
            <param name="winOwner">Handle to a window that the provider of network resources can use as an owner window for dialog boxes.</param>
            <param name="remoteName">A network resource to connect to, for example: \\server or \\server\share.</param>
            <param name="credentials">An instance of <see cref="T:System.Net.NetworkCredential"/> which provides credentials for password-based authentication schemes such as basic, digest, NTLM, and Kerberos authentication.</param>
            <param name="prompt"><see langword="true"/> always pops-up an authentication dialog box.</param>
            <param name="updateProfile"><see langword="true"/> successful network resource connections will be saved.</param>
            <param name="saveCredentials">When the operating system prompts for a credential, the credential should be saved by the credential manager when true.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Network.Host.DisconnectDrive(System.String)">
            <summary>Cancels an existing network connection. You can also call the function to remove remembered network connections that are not currently connected.</summary>
            <param name="localName">The name of a local device to be disconnected, such as "F:".</param>
        </member>
        <member name="M:Alphaleonis.Win32.Network.Host.DisconnectDrive(System.String,System.Boolean,System.Boolean)">
            <summary>Cancels an existing network connection. You can also call the function to remove remembered network connections that are not currently connected.</summary>
            <param name="localName">The name of a local device to be disconnected, such as "F:".</param>
            <param name="force">
              Specifies whether the disconnection should occur if there are open files or jobs on the connection.
              If this parameter is <see langword="false"/>, the function fails if there are open files or jobs.
            </param>
            <param name="updateProfile"><see langword="true"/> successful removal of network resource connections will be saved.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Network.Host.DisconnectFrom(System.String)">
            <summary>Cancels an existing network connection. You can also call the function to remove remembered network connections that are not currently connected.</summary>
            <param name="remoteName">A network resource to disconnect from, for example: \\server or \\server\share.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Network.Host.DisconnectFrom(System.String,System.Boolean,System.Boolean)">
            <summary>Cancels an existing network connection. You can also call the function to remove remembered network connections that are not currently connected.</summary>
            <param name="remoteName">A network resource to disconnect from, for example: \\server or \\server\share.</param>
            <param name="force">
              Specifies whether the disconnection should occur if there are open files or jobs on the connection.
              If this parameter is <see langword="false"/>, the function fails if there are open files or jobs.
            </param>
            <param name="updateProfile"><see langword="true"/> successful removal of network resource connections will be saved.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Network.Host.ConnectDisconnectCore(Alphaleonis.Win32.Network.Host.ConnectDisconnectArguments)">
            <summary>Connects to/disconnects from a network resource. The function can redirect a local device to a network resource.</summary>
            <returns>If <see cref="F:Alphaleonis.Win32.Network.Host.ConnectDisconnectArguments.LocalName"/> is <see langword="null"/> or <c>string.Empty</c>, returns the last available drive letter, null otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.Net.NetworkInformation.NetworkInformationException"/>
            <param name="arguments">The <see cref="T:Alphaleonis.Win32.Network.Host.ConnectDisconnectArguments"/>.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Network.Host.GetUncName">
            <summary>Return the host name in UNC format, for example: \\hostname</summary>
            <returns>The unc name.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Network.Host.GetUncName(System.String)">
            <summary>Return the host name in UNC format, for example: \\hostname</summary>
            <param name="computerName">Name of the computer.</param>
            <returns>The unc name.</returns>
        </member>
        <member name="T:Alphaleonis.Win32.Network.Host.FunctionData">
            <summary>Structure is used to pass additional data to the Win32 function.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Network.Host.GetRemoteNameInfoCore(System.String,System.Boolean)">
            <summary>This method uses <see cref="T:Alphaleonis.Win32.Network.NativeMethods.REMOTE_NAME_INFO"/> level to retieve full REMOTE_NAME_INFO structure.</summary>
            <returns>A <see cref="T:Alphaleonis.Win32.Network.NativeMethods.REMOTE_NAME_INFO"/> structure.</returns>
            <remarks>AlphaFS regards network drives created using SUBST.EXE as invalid.</remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.PathTooLongException"/>
            <exception cref="T:System.Net.NetworkInformation.NetworkInformationException"/>
            <param name="path">The local path with drive name.</param>
            <param name="continueOnException"><see langword="true"/> suppress any Exception that might be thrown as a result from a failure, such as unavailable resources.</param>
        </member>
        <member name="F:Alphaleonis.Win32.Network.Host.ConnectDisconnectArguments.WinOwner">
            <summary>Handle to a window that the provider of network resources can use as an owner window for dialog boxes.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.Host.ConnectDisconnectArguments.LocalName">
            <summary>The name of a local device to be redirected, such as "F:". When <see cref="F:Alphaleonis.Win32.Network.Host.ConnectDisconnectArguments.LocalName"/> is <see langword="null"/> or <c>string.Empty</c>, the last available drive letter will be used. Letters are assigned beginning with Z:, then Y: and so on.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.Host.ConnectDisconnectArguments.RemoteName">
            <summary>A network resource to connect to/disconnect from, for example: \\server or \\server\share</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.Host.ConnectDisconnectArguments.Credential">
            <summary>A <see cref="T:System.Net.NetworkCredential"/> instance. Use either this or the combination of <see cref="F:Alphaleonis.Win32.Network.Host.ConnectDisconnectArguments.UserName"/> and <see cref="F:Alphaleonis.Win32.Network.Host.ConnectDisconnectArguments.Password"/>.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.Host.ConnectDisconnectArguments.UserName">
            <summary>The user name for making the connection. If <see cref="F:Alphaleonis.Win32.Network.Host.ConnectDisconnectArguments.UserName"/> is <see langword="null"/>, the function uses the default user name. (The user context for the process provides the default user name)</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.Host.ConnectDisconnectArguments.Password">
            <summary>The password to be used for making the network connection. If <see cref="F:Alphaleonis.Win32.Network.Host.ConnectDisconnectArguments.Password"/> is <see langword="null"/>, the function uses the current default password associated with the user specified by <see cref="F:Alphaleonis.Win32.Network.Host.ConnectDisconnectArguments.UserName"/>.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.Host.ConnectDisconnectArguments.Prompt">
            <summary><see langword="true"/> always pops-up an authentication dialog box.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.Host.ConnectDisconnectArguments.UpdateProfile">
            <summary><see langword="true"/> successful network resource connections will be saved.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.Host.ConnectDisconnectArguments.SaveCredentials">
            <summary>When the operating system prompts for a credential, the credential should be saved by the credential manager when true.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.Host.ConnectDisconnectArguments.IsDeviceMap">
            <summary><see langword="true"/> indicates that the operation concerns a drive mapping.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Network.Host.ConnectDisconnectArguments.IsDisconnect">
            <summary><see langword="true"/> indicates that the operation needs to disconnect from the network resource, otherwise connect.</summary>
        </member>
        <member name="T:Alphaleonis.Win32.Network.DriveConnection">
            <summary>Used to create a temporary connection to a network resource that will be disconnected once this instance is disposed.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Network.DriveConnection.#ctor(System.String)">
            <summary>Creates a temporary connection to a network resource. The function can redirect a local device to a network resource, using the current user credentials.</summary>
            <param name="remoteName">The network resource to connect to. The string can be up to MAX_PATH characters in length.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Network.DriveConnection.#ctor(System.String,System.String,System.String,System.Boolean)">
            <summary>Creates a temporary connection to a network resource. The function can redirect a local device to a network resource, using a user name and password.</summary>
            <param name="remoteName">The network resource to connect to. The string can be up to MAX_PATH characters in length.</param>
            <param name="userName">
              The user name for making the connection. If <paramref name="userName"/> is <see langword="null"/>, the function uses the default
              user name. (The user context for the process provides the default user name)
            </param>
            <param name="password">
              The password to be used for making the network connection. If <paramref name="password"/> is <see langword="null"/>, the function
              uses the current default password associated with the user specified by <paramref name="userName"/>.
            </param>
            <param name="prompt"><see langword="true"/> always pops-up an authentication dialog box.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Network.DriveConnection.#ctor(System.String,System.Net.NetworkCredential,System.Boolean)">
            <summary>Creates a temporary connection to a network resource. The function can redirect a local device to a network resource, <see cref="T:System.Net.NetworkCredential"/> can be supplied.</summary>
            <param name="remoteName">The network resource to connect to. The string can be up to MAX_PATH characters in length.</param>
            <param name="credentials">An instance of <see cref="T:System.Net.NetworkCredential"/> which provides credentials for password-based authentication schemes such as basic, digest, NTLM, and Kerberos authentication.</param>
            <param name="prompt"><see langword="true"/> always pops-up an authentication dialog box.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Network.DriveConnection.Finalize">
            <summary><see cref="T:Alphaleonis.Win32.Network.DriveConnection"/> class destructor.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Network.DriveConnection.Dispose">
            <summary>Releases all resources used by the <see cref="T:Alphaleonis.Win32.Network.DriveConnection"/> class.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Network.DriveConnection.ToString">
            <summary>Returns the last available drive letter used for this connection.</summary>
            <returns>A string that represents this instance.</returns>
        </member>
        <member name="P:Alphaleonis.Win32.Network.DriveConnection.LocalName">
            <summary>The last available drive letter used for this connection.</summary>
            <value>The last available drive letter used for this connection.</value>
        </member>
        <member name="P:Alphaleonis.Win32.Network.DriveConnection.Share">
            <summary>The path originally specified by the user.</summary>
            <value>The path originally specified by the user.</value>
        </member>
        <member name="T:Alphaleonis.Win32.Network.OpenConnectionInfo">
            <summary>Contains the identification number of a connection, number of open files, connection time, number of users on the connection, and the type of connection.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Network.OpenConnectionInfo.#ctor(System.String,Alphaleonis.Win32.Network.NativeMethods.CONNECTION_INFO_1)">
            <summary>Create a OpenConnectionInfo instance.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Network.OpenConnectionInfo.ToString">
            <summary>Returns the full path to the share.</summary>
            <returns>A string that represents this instance.</returns>
        </member>
        <member name="P:Alphaleonis.Win32.Network.OpenConnectionInfo.Host">
            <summary>The local or remote Host.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Network.OpenConnectionInfo.Id">
            <summary>Specifies a connection identification number.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Network.OpenConnectionInfo.ShareType">
            <summary>The type of share.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Network.OpenConnectionInfo.TotalOpenFiles">
            <summary>Specifies the number of files currently open as a result of the connection.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Network.OpenConnectionInfo.TotalUsers">
            <summary>Specifies the number of users on the connection.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Network.OpenConnectionInfo.ConnectedSeconds">
            <summary>Specifies the number of seconds that the connection has been established.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Network.OpenConnectionInfo.UserName">
            <summary>If the server sharing the resource is running with user-level security, the UserName member describes which user made the connection. If the server is running with share-level security, coni1_username describes which computer (computername) made the connection.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Network.OpenConnectionInfo.NetName">
            <summary>String that specifies either the share name of the server's shared resource or the computername of the client. The value of this member depends on which name was specified as the qualifier parameter to the NetConnectionEnum function.</summary>
        </member>
        <member name="T:Alphaleonis.Win32.Network.OpenResourceInfo">
            <summary>Contains the identification number and other pertinent information about files, devices, and pipes. This class cannot be inherited.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Network.OpenResourceInfo.#ctor(System.String,Alphaleonis.Win32.Network.NativeMethods.FILE_INFO_3)">
            <summary>Create a OpenResourceInfo instance.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Network.OpenResourceInfo.Close">
            <summary>Forces the open resource to close.</summary>
            <remarks>You should this method with caution because it does not write data cached on the client system to the file before closing the file.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Network.OpenResourceInfo.ToString">
            <summary>Returns the full path to the share.</summary>
            <returns>A string that represents this instance.</returns>
        </member>
        <member name="P:Alphaleonis.Win32.Network.OpenResourceInfo.Host">
            <summary>The local or remote Host.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Network.OpenResourceInfo.Id">
            <summary>The identification number assigned to the resource when it is opened.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Network.OpenResourceInfo.PathName">
            <summary>The path of the opened resource.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Network.OpenResourceInfo.Permissions">
            <summary>The access permissions associated with the opening application. This member can be one or more of the following <see cref="T:Alphaleonis.Win32.Network.AccessPermissions"/> values.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Network.OpenResourceInfo.TotalLocks">
            <summary>The number of file locks on the file, device, or pipe.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Network.OpenResourceInfo.UserName">
            <summary>Specifies which user (on servers that have user-level security) or which computer (on servers that have share-level security) opened the resource.</summary>
        </member>
        <member name="T:Alphaleonis.Win32.Network.ShareInfo">
            <summary>Contains information about Server Message Block (SMB) shares. This class cannot be inherited.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Network.ShareInfo.#ctor(System.String,Alphaleonis.Win32.Network.ShareInfoLevel,System.Object)">
            <summary>Creates a <see cref="T:Alphaleonis.Win32.Network.ShareInfo"/> instance.</summary>
            <param name="host">A host to retrieve shares from.</param>
            <param name="shareLevel">One of the <see cref="T:Alphaleonis.Win32.Network.ShareInfoLevel"/> options.</param>
            <param name="shareInfo">A <see cref="T:Alphaleonis.Win32.Network.NativeMethods.SHARE_INFO_2"/> or <see cref="T:Alphaleonis.Win32.Network.NativeMethods.SHARE_INFO_503"/> instance.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Network.ShareInfo.ToString">
            <summary>Returns the full path to the share.</summary>
            <returns>A string that represents this instance.</returns>
        </member>
        <member name="P:Alphaleonis.Win32.Network.ShareInfo.CurrentUses">
            <summary>The number of current connections to the resource.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Network.ShareInfo.DirectoryInfo">
            <summary>The <see cref="P:Alphaleonis.Win32.Network.ShareInfo.DirectoryInfo"/> instance associated with this share.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Network.ShareInfo.NetFullPath">
            <summary>Returns the full UNC path to the share.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Network.ShareInfo.MaxUses">
            <summary>The maximum number of concurrent connections that the shared resource can accommodate.</summary>
            <remarks>The number of connections is unlimited if the value specified in this member is –1.</remarks>
        </member>
        <member name="P:Alphaleonis.Win32.Network.ShareInfo.NetName">
            <summary>The name of a shared resource.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Network.ShareInfo.Password">
            <summary>The share's password (when the server is running with share-level security).</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Network.ShareInfo.Path">
            <summary>The local path for the shared resource.</summary>
            <remarks>For disks, this member is the path being shared. For print queues, this member is the name of the print queue being shared.</remarks>
        </member>
        <member name="P:Alphaleonis.Win32.Network.ShareInfo.Permissions">
            <summary>The shared resource's permissions for servers running with share-level security.</summary>
            <remarks>Note that Windows does not support share-level security. This member is ignored on a server running user-level security.</remarks>
        </member>
        <member name="P:Alphaleonis.Win32.Network.ShareInfo.Remark">
            <summary>An optional comment about the shared resource.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Network.ShareInfo.SecurityDescriptor">
            <summary>Specifies the SECURITY_DESCRIPTOR associated with this share.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Network.ShareInfo.ServerName">
            <summary>A pointer to a string that specifies the DNS or NetBIOS name of the remote server on which the shared resource resides.</summary>
            <remarks>A value of "*" indicates no configured server name.</remarks>
        </member>
        <member name="P:Alphaleonis.Win32.Network.ShareInfo.ShareType">
            <summary>The type of share.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Network.ShareInfo.ResourceType">
            <summary>The type of share resource.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Network.ShareInfo.ShareLevel">
            <summary>The structure level for the ShareInfo instance.</summary>
        </member>
        <member name="T:Alphaleonis.Win32.OperatingSystem">
            <summary>Static class providing access to information about the operating system under which the assembly is executing.</summary>
        </member>
        <member name="T:Alphaleonis.Win32.OperatingSystem.EnumOsName">
            <summary>A set of flags that describe the named Windows versions.</summary>
            <remarks>The values of the enumeration are ordered. A later released operating system version has a higher number, so comparisons between named versions are meaningful.</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.OperatingSystem.EnumOsName.Earlier">
            <summary>A Windows version earlier than Windows 2000.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.OperatingSystem.EnumOsName.Windows2000">
            <summary>Windows 2000 (Server or Professional).</summary>
        </member>
        <member name="F:Alphaleonis.Win32.OperatingSystem.EnumOsName.WindowsXP">
            <summary>Windows XP.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.OperatingSystem.EnumOsName.WindowsServer2003">
            <summary>Windows Server 2003.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.OperatingSystem.EnumOsName.WindowsVista">
            <summary>Windows Vista.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.OperatingSystem.EnumOsName.WindowsServer2008">
            <summary>Windows Server 2008.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.OperatingSystem.EnumOsName.Windows7">
            <summary>Windows 7.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.OperatingSystem.EnumOsName.WindowsServer2008R2">
            <summary>Windows Server 2008 R2.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.OperatingSystem.EnumOsName.Windows8">
            <summary>Windows 8.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.OperatingSystem.EnumOsName.WindowsServer2012">
            <summary>Windows Server 2012.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.OperatingSystem.EnumOsName.Windows81">
            <summary>Windows 8.1.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.OperatingSystem.EnumOsName.WindowsServer2012R2">
            <summary>Windows Server 2012 R2</summary>
        </member>
        <member name="F:Alphaleonis.Win32.OperatingSystem.EnumOsName.Windows10">
            <summary>Windows 10</summary>
        </member>
        <member name="F:Alphaleonis.Win32.OperatingSystem.EnumOsName.WindowsServer">
            <summary>Windows Server</summary>
        </member>
        <member name="F:Alphaleonis.Win32.OperatingSystem.EnumOsName.Later">
            <summary>A later version of Windows than currently installed.</summary>
        </member>
        <member name="T:Alphaleonis.Win32.OperatingSystem.EnumProcessorArchitecture">
            <summary>A set of flags to indicate the current processor architecture for which the operating system is targeted and running.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.OperatingSystem.EnumProcessorArchitecture.X86">
            <summary>PROCESSOR_ARCHITECTURE_INTEL
            <para>The system is running a 32-bit version of Windows.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.OperatingSystem.EnumProcessorArchitecture.IA64">
            <summary>PROCESSOR_ARCHITECTURE_IA64
            <para>The system is running on a Itanium processor.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.OperatingSystem.EnumProcessorArchitecture.X64">
            <summary>PROCESSOR_ARCHITECTURE_AMD64
            <para>The system is running a 64-bit version of Windows.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.OperatingSystem.EnumProcessorArchitecture.Unknown">
            <summary>PROCESSOR_ARCHITECTURE_UNKNOWN
            <para>Unknown architecture.</para>
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.OperatingSystem.IsServer">
            <summary>Gets a value indicating whether the operating system is a server operating system.</summary>
            <value><see langword="true"/> if the current operating system is a server operating system; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:Alphaleonis.Win32.OperatingSystem.IsWow64Process">
            <summary>Gets a value indicating whether the current process is running under WOW64.</summary>
            <value><see langword="true"/> if the current process is running under WOW64; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:Alphaleonis.Win32.OperatingSystem.OSVersion">
            <summary>Gets the numeric version of the operating system.</summary>            
            <value>The numeric version of the operating system.</value>
        </member>
        <member name="P:Alphaleonis.Win32.OperatingSystem.VersionName">
            <summary>Gets the named version of the operating system.</summary>
            <value>The named version of the operating system.</value>
        </member>
        <member name="P:Alphaleonis.Win32.OperatingSystem.ProcessorArchitecture">
            <summary>Gets the processor architecture for which the operating system is targeted.</summary>
            <value>The processor architecture for which the operating system is targeted.</value>
            <remarks>If running under WOW64 this will return a 32-bit processor. Use <see cref="P:Alphaleonis.Win32.OperatingSystem.IsWow64Process"/> to determine if this is the case.</remarks>      
        </member>
        <member name="P:Alphaleonis.Win32.OperatingSystem.ServicePackVersion">
            <summary>Gets the version of the service pack currently installed on the operating system.</summary>
            <value>The version of the service pack currently installed on the operating system.</value>
            <remarks>Only the <see cref="P:System.Version.Major"/> and <see cref="P:System.Version.Minor"/> fields are used.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.OperatingSystem.IsAtLeast(Alphaleonis.Win32.OperatingSystem.EnumOsName)">
            <summary>Determines whether the operating system is of the specified version or later.</summary>
            <returns><see langword="true"/> if the operating system is of the specified <paramref name="version"/> or later; otherwise, <see langword="false"/>.</returns>      
            <param name="version">The lowest version for which to return true.</param>
        </member>
        <member name="M:Alphaleonis.Win32.OperatingSystem.IsAtLeast(Alphaleonis.Win32.OperatingSystem.EnumOsName,System.Int32)">
            <summary>Determines whether the operating system is of the specified version or later, allowing specification of a minimum service pack that must be installed on the lowest version.</summary>
            <returns><see langword="true"/> if the operating system matches the specified <paramref name="version"/> with the specified service pack, or if the operating system is of a later version; otherwise, <see langword="false"/>.</returns>      
            <param name="version">The minimum required version.</param>
            <param name="servicePackVersion">The major version of the service pack that must be installed on the minimum required version to return true. This can be 0 to indicate that no service pack is required.</param>
        </member>
        <member name="M:Alphaleonis.Win32.OperatingSystem.NativeMethods.RtlGetVersion(Alphaleonis.Win32.OperatingSystem.NativeMethods.RTL_OSVERSIONINFOEXW@)">
            <summary>The RtlGetVersion routine returns version information about the currently running operating system.</summary>
            <returns>RtlGetVersion returns STATUS_SUCCESS.</returns>
            <remarks>Available starting with Windows 2000.</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.OperatingSystem.NativeMethods.GetNativeSystemInfo(Alphaleonis.Win32.OperatingSystem.NativeMethods.SYSTEM_INFO@)">
            <summary>Retrieves information about the current system to an application running under WOW64.
            If the function is called from a 64-bit application, it is equivalent to the GetSystemInfo function.
            </summary>
            <returns>This function does not return a value.</returns>
            <remarks>To determine whether a Win32-based application is running under WOW64, call the <see cref="M:Alphaleonis.Win32.OperatingSystem.NativeMethods.IsWow64Process(System.IntPtr,System.Boolean@)"/> function.</remarks>
            <remarks>Minimum supported client: Windows XP [desktop apps | Windows Store apps]</remarks>
            <remarks>Minimum supported server: Windows Server 2003 [desktop apps | Windows Store apps]</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.OperatingSystem.NativeMethods.IsWow64Process(System.IntPtr,System.Boolean@)">
            <summary>Determines whether the specified process is running under WOW64.</summary>
            <returns>
            If the function succeeds, the return value is a nonzero value.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows Vista, Windows XP with SP2 [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2008, Windows Server 2003 with SP1 [desktop apps only]</remarks>
        </member>
        <member name="T:Alphaleonis.Win32.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.Buffer_Not_Large_Enough">
            <summary>
              Looks up a localized string similar to Buffer is not large enough for the requested operation..
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.Cannot_Create_Directory">
            <summary>
              Looks up a localized string similar to Cannot create directory..
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.Cannot_Determine_Copy_Or_Move">
            <summary>
              Looks up a localized string similar to Cannot determine Copy or Move action..
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.Destination_Buffer_Not_Large_Enough">
            <summary>
              Looks up a localized string similar to Destination buffer not large enough for the requested operation..
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.Device_Not_Ready">
            <summary>
              Looks up a localized string similar to The device is not ready..
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.Exception_From_Successful_Operation">
             <summary>
               Looks up a localized string similar to Incorrectly implemented function attempting to generate exception from successful operation.
            .
             </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.File_Is_Hidden">
            <summary>
              Looks up a localized string similar to The specified file is hidden: [{0}].
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.File_Or_Directory_Already_Exists">
            <summary>
              Looks up a localized string similar to The file or directory already exists..
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.Handle_Is_Closed">
            <summary>
              Looks up a localized string similar to The handle is closed..
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.Handle_Is_Invalid">
            <summary>
              Looks up a localized string similar to The handle is invalid..
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.Handle_Is_Invalid_Win32Error">
            <summary>
              Looks up a localized string similar to The handle is invalid. Win32Error: [{0}].
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.HardLinks_Not_Supported">
            <summary>
              Looks up a localized string similar to Creating hard-links on non-NTFS partitions is not supported..
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.Illegal_Characters_In_Path">
            <summary>
              Looks up a localized string similar to Illegal characters: [{0}] in path..
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.Invalid_File_Attribute">
            <summary>
              Looks up a localized string similar to An attempt to set an invalid file attribute failed..
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.Invalid_Stream_Name">
            <summary>
              Looks up a localized string similar to Invalid stream name..
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.Invalid_Subpath">
            <summary>
              Looks up a localized string similar to Invalid Subpath.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.Invalid_Transaction_Request">
            <summary>
              Looks up a localized string similar to Invalid transaction request..
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.Negative_Count">
            <summary>
              Looks up a localized string similar to Count cannot be negative..
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.Negative_Destination_Offset">
            <summary>
              Looks up a localized string similar to Destination offset cannot be negative..
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.Negative_Length">
            <summary>
              Looks up a localized string similar to Length cannot be negative..
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.Negative_Lock_Length">
            <summary>
              Looks up a localized string similar to Lock length cannot be negative..
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.Negative_Offset">
            <summary>
              Looks up a localized string similar to Offset cannot be negative..
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.No_Stream_Seeking_Support">
            <summary>
              Looks up a localized string similar to This stream does not support seeking..
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.Not_A_Reparse_Point">
            <summary>
              Looks up a localized string similar to The file or directory is not a reparse point..
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.Not_A_Valid_Guid">
            <summary>
              Looks up a localized string similar to Argument is not a valid Volume GUID..
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.Path_Is_Zero_Length_Or_Only_White_Space">
            <summary>
              Looks up a localized string similar to Path is a zero-length string or contains only white space..
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.Privilege_Name_Cannot_Be_Empty">
            <summary>
              Looks up a localized string similar to Privilege name cannot be empty..
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.Read_Incomplete_Header">
            <summary>
              Looks up a localized string similar to Incomplete header read..
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.Requires_Windows_Vista_Or_Higher">
            <summary>
              Looks up a localized string similar to This method requires Windows Vista or higher..
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.Returned_Invalid_Security_Descriptor">
            <summary>
              Looks up a localized string similar to Invalid security descriptor returned from system..
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.Source_Offset_And_Length_Outside_Bounds">
            <summary>
              Looks up a localized string similar to Source offset and length outside the bounds of the array.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.Target_Directory_Is_A_File">
            <summary>
              Looks up a localized string similar to The target directory is a file, not a directory: [{0}].
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.Target_File_Is_A_Directory">
            <summary>
              Looks up a localized string similar to The target file is a directory, not a file: [{0}].
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.Transaction_Already_Aborted">
            <summary>
              Looks up a localized string similar to Transaction already aborted..
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.Transaction_Already_Committed">
            <summary>
              Looks up a localized string similar to Transaction already committed..
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.Transaction_Invalid">
            <summary>
              Looks up a localized string similar to Invalid transaction object..
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.Transaction_Not_Active">
            <summary>
              Looks up a localized string similar to Transaction not active..
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.Transaction_Not_Requested">
            <summary>
              Looks up a localized string similar to Transaction not requested..
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.Transactional_Conflict">
            <summary>
              Looks up a localized string similar to Transactional conflict..
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.UNC_Path_Should_Match_Format">
            <summary>
              Looks up a localized string similar to Network share path should match the format: \\server\share.
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.Unlock_Position_Negative">
            <summary>
              Looks up a localized string similar to Backup FileStream Unlock Position must not be negative..
            </summary>
        </member>
        <member name="P:Alphaleonis.Win32.Resources.Unsupported_Path_Format">
            <summary>
              Looks up a localized string similar to The given path&apos;s format is not supported: [{0}].
            </summary>
        </member>
        <member name="T:Alphaleonis.Win32.SafeGlobalMemoryBufferHandle">
            <summary>Represents a block of native memory of a specified size allocated using the LocalAlloc function from Kernel32.dll.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.SafeGlobalMemoryBufferHandle.#ctor">
            <summary>Creates new instance with zero IntPtr.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.SafeGlobalMemoryBufferHandle.#ctor(System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.SafeGlobalMemoryBufferHandle"/> class allocating the specified number of bytes of unmanaged memory.</summary>
            <param name="capacity">The capacity.</param>
        </member>
        <member name="M:Alphaleonis.Win32.SafeGlobalMemoryBufferHandle.ReleaseHandle">
            <summary>Called when object is disposed or finalized.</summary>
        </member>
        <member name="T:Alphaleonis.Win32.SafeNativeMemoryBufferHandle">
            <summary>Base class for classes representing a block of unmanaged memory.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.SafeNativeMemoryBufferHandle.#ctor(System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.SafeNativeMemoryBufferHandle"/> specifying the allocated capacity of the memory block.</summary>
            <param name="capacity">The capacity.</param>
        </member>
        <member name="P:Alphaleonis.Win32.SafeNativeMemoryBufferHandle.Capacity">
            <summary>Gets the capacity. Only valid if this instance was created using a constructor that specifies the size,
            it is not correct if this handle was returned by a native method using p/invoke.
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.SafeNativeMemoryBufferHandle.CopyFrom(System.Byte[],System.Int32,System.Int32)">
            <summary>Copies data from a one-dimensional, managed 8-bit unsigned integer array to the unmanaged memory pointer referenced by this instance.</summary>
            <param name="source">The one-dimensional array to copy from. </param>
            <param name="startIndex">The zero-based index into the array where Copy should start.</param>
            <param name="length">The number of array elements to copy.</param>
        </member>
        <member name="M:Alphaleonis.Win32.SafeNativeMemoryBufferHandle.CopyTo(System.Byte[],System.Int32,System.Int32)">
            <summary>Copies data from an unmanaged memory pointer to a managed 8-bit unsigned integer array.</summary>
            <param name="destination">The array to copy to.</param>
            <param name="destinationOffset">The zero-based index in the destination array where copying should start.</param>
            <param name="length">The number of array elements to copy.</param>
        </member>
        <member name="M:Alphaleonis.Win32.SafeNativeMemoryBufferHandle.CopyTo(System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>Copies data from this unmanaged memory pointer to a managed 8-bit unsigned integer array.</summary>
            <param name="sourceOffset">The offset in the buffer to start copying from.</param>
            <param name="destination">The array to copy to.</param>
            <param name="destinationOffset">The zero-based index in the destination array where copying should start.</param>
            <param name="length">The number of array elements to copy.</param>
        </member>
        <member name="M:Alphaleonis.Win32.SafeNativeMemoryBufferHandle.StructureToPtr(System.Object,System.Boolean)">
            <summary>Marshals data from a managed object to an unmanaged block of memory.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.SafeNativeMemoryBufferHandle.PtrToStructure``1(System.Int32)">
            <summary>Marshals data from an unmanaged block of memory to a newly allocated managed object of the specified type.</summary>
            <returns>A managed object containing the data pointed to by the ptr parameter.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.SafeNativeMemoryBufferHandle.PtrToStringUni(System.Int32,System.Int32)">
            <summary>Allocates a managed System.String and copies a specified number of characters from an unmanaged Unicode string into it.</summary>
            <returns>A managed string that holds a copy of the unmanaged string if the value of the ptr parameter is not null; otherwise, this method returns null.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.SafeNativeMemoryBufferHandle.PtrToStringUni">
            <summary>Allocates a managed System.String and copies all characters up to the first null character from an unmanaged Unicode string into it.</summary>
            <returns>A managed string that holds a copy of the unmanaged string if the value of the ptr parameter is not null; otherwise, this method returns null.</returns>
        </member>
        <member name="T:Alphaleonis.Win32.Security.Crc64">
            <summary>Implements an ISO-3309 compliant 64-bit CRC hash algorithm.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Security.Crc64.#ctor">
            <summary>Initializes a new instance of <see cref="T:Alphaleonis.Win32.Security.Crc64"/> </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Security.Crc64.#ctor(System.UInt64,System.UInt64)">
            <summary>Initializes a new instance of <see cref="T:Alphaleonis.Win32.Security.Crc64"/></summary>
            <param name="polynomial">The polynomial.</param>
            <param name="seed">The seed.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Security.Crc64.Initialize">
            <summary>
            Initializes an implementation of the
            <see cref="T:System.Security.Cryptography.HashAlgorithm" /> class.
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Security.Crc64.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>When overridden in a derived class, routes data written to the object into the hash algorithm for computing the hash.</summary>
            <param name="array">The input to compute the hash code for..</param>
            <param name="ibStart">The offset into the byte array from which to begin using data.</param>
            <param name="cbSize">The number of bytes in the byte array to use as data.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Security.Crc64.HashFinal">
            <summary>
            Finalizes the hash computation after the last data is processed by the cryptographic stream
            object.
            </summary>
            <returns>
            This method finalizes any partial computation and returns the correct hash value for the data
            stream.
            </returns>
        </member>
        <member name="P:Alphaleonis.Win32.Security.Crc64.HashSize">
            <summary>Gets the size, in bits, of the computed hash code.</summary>
            <value>The size, in bits, of the computed hash code.</value>
        </member>
        <member name="M:Alphaleonis.Win32.Security.Crc64.CalculateHash(System.UInt64,System.UInt64[],System.Collections.Generic.IList{System.Byte},System.Int32,System.Int32)">
            <summary>Calculates the hash.</summary>
            <param name="seed">The seed.</param>
            <param name="table">The table.</param>
            <param name="buffer">The buffer.</param>
            <param name="start">The start.</param>
            <param name="size">The size.</param>
            <returns>The calculated hash.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Security.Crc64.UInt64ToBigEndianBytes(System.UInt64)">
            <summary>Int 64 to big endian bytes.</summary>
            <param name="value">The value.</param>
            <returns>A byte[].</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Security.Crc64.InitializeTable(System.UInt64)">
            <summary>Initializes the table.</summary>
            <param name="polynomial">The polynomial.</param>
            <returns>An ulong[].</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Security.Crc64.CreateTable(System.UInt64)">
            <summary>Creates a table.</summary>
            <param name="polynomial">The polynomial.</param>
            <returns>A new array of ulong.</returns>
        </member>
        <member name="T:Alphaleonis.Win32.Security.HashType">
            <summary>Enum containing the supported hash types.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.HashType.CRC32">
            <summary>CRC-32 (Cyclic Redundancy Check)</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.HashType.CRC64ISO3309">
            <summary>CRC-64 ISO-3309 compliant.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.HashType.MD5">
            <summary>MD5 (Message digest)</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.HashType.RIPEMD160">
            <summary>RIPEMD-160 is a 160-bit cryptographic hash function. It is intended for use as a replacement for the 128-bit hash functions MD4, MD5, and RIPEMD.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.HashType.SHA1">
            <summary>SHA-1 (Secure Hash Algorithm)</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.HashType.SHA256">
            <summary>SHA-256 (Secure Hash Algorithm)</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.HashType.SHA384">
            <summary>SHA-384 (Secure Hash Algorithm)</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.HashType.SHA512">
            <summary>SHA-512 (Secure Hash Algorithm)</summary>
        </member>
        <member name="T:Alphaleonis.Win32.Security.ObjectType">
            <summary>The ObjectType (SE_OBJECT_TYPE) enumeration contains values that correspond to the types of Windows objects that support security.
            The functions, such as GetSecurityInfo and SetSecurityInfo, that set and retrieve the security information of an object, use these values to indicate the type of object.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.ObjectType.UnknownObjectType">
            <summary>Unknown object type.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.ObjectType.FileObject">
            <summary>Indicates a file or directory. The name string that identifies a file or directory object can be in one of the following formats:
              A relative path, such as FileName.dat or ..\FileName
              An absolute path, such as FileName.dat, C:\DirectoryName\FileName.dat, or G:\RemoteDirectoryName\FileName.dat.
              A UNC name, such as \\ComputerName\ShareName\FileName.dat.
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.ObjectType.Service">
            <summary>Indicates a Windows service. A service object can be a local service, such as ServiceName, or a remote service, such as \\ComputerName\ServiceName.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.ObjectType.Printer">
            <summary>Indicates a printer. A printer object can be a local printer, such as PrinterName, or a remote printer, such as \\ComputerName\PrinterName.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.ObjectType.RegistryKey">
            <summary>Indicates a registry key. A registry key object can be in the local registry, such as CLASSES_ROOT\SomePath or in a remote registry, such as \\ComputerName\CLASSES_ROOT\SomePath.
            The names of registry keys must use the following literal strings to identify the predefined registry keys: "CLASSES_ROOT", "CURRENT_USER", "MACHINE", and "USERS".
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.ObjectType.LmShare">
            <summary>Indicates a network share. A share object can be local, such as ShareName, or remote, such as \\ComputerName\ShareName.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.ObjectType.KernelObject">
            <summary>Indicates a local kernel object. The GetSecurityInfo and SetSecurityInfo functions support all types of kernel objects.
            The GetNamedSecurityInfo and SetNamedSecurityInfo functions work only with the following kernel objects: semaphore, event, mutex, waitable timer, and file mapping.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.ObjectType.WindowObject">
            <summary>Indicates a window station or desktop object on the local computer. You cannot use GetNamedSecurityInfo and SetNamedSecurityInfo with these objects because the names of window stations or desktops are not unique.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.ObjectType.DsObject">
            <summary>Indicates a directory service object or a property set or property of a directory service object.
            The name string for a directory service object must be in X.500 form, for example: CN=SomeObject,OU=ou2,OU=ou1,DC=DomainName,DC=CompanyName,DC=com,O=internet</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.ObjectType.DsObjectAll">
            <summary>Indicates a directory service object and all of its property sets and properties.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.ObjectType.ProviderDefinedObject">
            <summary>Indicates a provider-defined object.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.ObjectType.WmiGuidObject">
            <summary>Indicates a WMI object.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.ObjectType.RegistryWow6432Key">
            <summary>Indicates an object for a registry entry under WOW64.</summary>
        </member>
        <member name="T:Alphaleonis.Win32.Security.SecurityDescriptorControl">
            <summary>The SECURITY_DESCRIPTOR_CONTROL data type is a set of bit flags that qualify the meaning of a security descriptor or its components.
            Each security descriptor has a Control member that stores the SECURITY_DESCRIPTOR_CONTROL bits.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.SecurityDescriptorControl.None">
            <summary></summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.SecurityDescriptorControl.OwnerDefaulted">
            <summary>SE_OWNER_DEFAULTED (0x0001) - Indicates an SD with a default owner security identifier (SID). You can use this bit to find all of the objects that have default owner permissions set.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.SecurityDescriptorControl.GroupDefaulted">
            <summary>SE_GROUP_DEFAULTED (0x0002) - Indicates an SD with a default group SID. You can use this bit to find all of the objects that have default group permissions set.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.SecurityDescriptorControl.DaclPresent">
            <summary>SE_DACL_PRESENT (0x0004) - Indicates an SD that has a discretionary access control list (DACL). If this flag is not set, or if this flag is set and the DACL is NULL, the SD allows full access to everyone.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.SecurityDescriptorControl.DaclDefaulted">
            <summary>SE_DACL_DEFAULTED (0x0008) - Indicates an SD with a default DACL. For example, if an object creator does not specify a DACL, the object receives the default DACL from the access token of the creator. This flag can affect how the system treats the DACL, with respect to access control entry (ACE) inheritance. The system ignores this flag if the SE_DACL_PRESENT flag is not set.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.SecurityDescriptorControl.SaclPresent">
            <summary>SE_SACL_PRESENT (0x0010) - Indicates an SD that has a system access control list (SACL).</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.SecurityDescriptorControl.SaclDefaulted">
            <summary>SE_SACL_DEFAULTED (0x0020) - Indicates an SD with a default SACL. For example, if an object creator does not specify an SACL, the object receives the default SACL from the access token of the creator. This flag can affect how the system treats the SACL, with respect to ACE inheritance. The system ignores this flag if the SE_SACL_PRESENT flag is not set.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.SecurityDescriptorControl.DaclAutoInheritReq">
            <summary>SE_DACL_AUTO_INHERIT_REQ (0x0100) - Requests that the provider for the object protected by the SD automatically propagate the DACL to existing child objects. If the provider supports automatic inheritance, it propagates the DACL to any existing child objects, and sets the SE_DACL_AUTO_INHERITED bit in the security descriptors of the object and its child objects.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.SecurityDescriptorControl.SaclAutoInheritReq">
            <summary>SE_SACL_AUTO_INHERIT_REQ (0x0200) - Requests that the provider for the object protected by the SD automatically propagate the SACL to existing child objects. If the provider supports automatic inheritance, it propagates the SACL to any existing child objects, and sets the SE_SACL_AUTO_INHERITED bit in the SDs of the object and its child objects.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.SecurityDescriptorControl.DaclAutoInherited">
            <summary>SE_DACL_AUTO_INHERITED (0x0400) - Windows 2000 only. Indicates an SD in which the DACL is set up to support automatic propagation of inheritable ACEs to existing child objects. The system sets this bit when it performs the automatic inheritance algorithm for the object and its existing child objects. This bit is not set in SDs for Windows NT versions 4.0 and earlier, which do not support automatic propagation of inheritable ACEs.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.SecurityDescriptorControl.SaclAutoInherited">
            <summary>SE_SACL_AUTO_INHERITED (0x0800) - Windows 2000: Indicates an SD in which the SACL is set up to support automatic propagation of inheritable ACEs to existing child objects. The system sets this bit when it performs the automatic inheritance algorithm for the object and its existing child objects. This bit is not set in SDs for Windows NT versions 4.0 and earlier, which do not support automatic propagation of inheritable ACEs.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.SecurityDescriptorControl.DaclProtected">
            <summary>SE_DACL_PROTECTED (0x1000) - Windows 2000: Prevents the DACL of the SD from being modified by inheritable ACEs.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.SecurityDescriptorControl.SaclProtected">
            <summary>SE_SACL_PROTECTED (0x2000) - Windows 2000: Prevents the SACL of the SD from being modified by inheritable ACEs.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.SecurityDescriptorControl.RmControlValid">
            <summary>SE_RM_CONTROL_VALID (0x4000) - Indicates that the resource manager control is valid.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.SecurityDescriptorControl.SelfRelative">
            <summary>SE_SELF_RELATIVE (0x8000) - Indicates an SD in self-relative format with all of the security information in a contiguous block of memory. If this flag is not set, the SD is in absolute format. For more information, see Absolute and Self-Relative Security Descriptors.</summary>
        </member>
        <member name="T:Alphaleonis.Win32.Security.SecurityInformation">
            <summary>The SECURITY_INFORMATION data type identifies the object-related security information being set or queried.
            This security information includes:
              The owner of an object;
              The primary group of an object;
              The discretionary access control list (DACL) of an object;
              The system access control list (SACL) of an object;
            </summary>
            <remarks>
            An unsigned 32-bit integer specifies portions of a SECURITY_DESCRIPTOR by means of bit flags.
            Individual bit values (combinable with the bitwise OR operation) are as shown in the following table.
            </remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Security.SecurityInformation.None">
            <summary></summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.SecurityInformation.Owner">
            <summary>OWNER_SECURITY_INFORMATION (0x00000001) - The owner identifier of the object is being referenced.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.SecurityInformation.Group">
            <summary>GROUP_SECURITY_INFORMATION (0x00000002) - The primary group identifier of the object is being referenced.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.SecurityInformation.Dacl">
            <summary>DACL_SECURITY_INFORMATION (0x00000004) - The DACL of the object is being referenced.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.SecurityInformation.Sacl">
            <summary>SACL_SECURITY_INFORMATION (0x00000008) - The SACL of the object is being referenced.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.SecurityInformation.Label">
            <summary>LABEL_SECURITY_INFORMATION (0x00000010) - The mandatory integrity label is being referenced. The mandatory integrity label is an ACE in the SACL of the object.</summary>
            <remarks>Windows Server 2003 and Windows XP: This bit flag is not available.</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Security.SecurityInformation.Attribute">
            <summary>ATTRIBUTE_SECURITY_INFORMATION (0x00000020) - The resource properties of the object being referenced.
            The resource properties are stored in SYSTEM_RESOURCE_ATTRIBUTE_ACE types in the SACL of the security descriptor.
            </summary>
            <remarks>Windows Server 2008 R2, Windows 7, Windows Server 2008, Windows Vista, Windows Server 2003, and Windows XP: This bit flag is not available.</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Security.SecurityInformation.Scope">
            <summary>SCOPE_SECURITY_INFORMATION (0x00000040) - The Central Access Policy (CAP) identifier applicable on the object that is being referenced.
            Each CAP identifier is stored in a SYSTEM_SCOPED_POLICY_ID_ACE type in the SACL of the SD.
            </summary>
            <remarks>Windows Server 2008 R2, Windows 7, Windows Server 2008, Windows Vista, Windows Server 2003, and Windows XP: This bit flag is not available.</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Security.SecurityInformation.Backup">
            <summary>BACKUP_SECURITY_INFORMATION (0x00010000) - All parts of the security descriptor. This is useful for backup and restore software that needs to preserve the entire security descriptor.</summary>
            <remarks>Windows Server 2008 R2, Windows 7, Windows Server 2008, Windows Vista, Windows Server 2003, and Windows XP: This bit flag is not available.</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Security.SecurityInformation.UnprotectedSacl">
            <summary>UNPROTECTED_SACL_SECURITY_INFORMATION (0x10000000) - The SACL inherits ACEs from the parent object.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.SecurityInformation.UnprotectedDacl">
            <summary>UNPROTECTED_DACL_SECURITY_INFORMATION (0x20000000) - The DACL inherits ACEs from the parent object.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.SecurityInformation.ProtectedSacl">
            <summary>PROTECTED_SACL_SECURITY_INFORMATION (0x40000000) - The SACL cannot inherit ACEs.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.SecurityInformation.ProtectedDacl">
            <summary>PROTECTED_DACL_SECURITY_INFORMATION (0x80000000) - The DACL cannot inherit access control entries (ACEs).</summary>
        </member>
        <member name="T:Alphaleonis.Win32.Security.SafeLocalMemoryBufferHandle">
            <summary>An IntPtr wrapper which can be used as the result of a Marshal.AllocHGlobal operation.
            <para>Calls Marshal.FreeHGlobal when disposed or finalized.</para>
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Security.SafeLocalMemoryBufferHandle.#ctor">
            <summary>Creates new instance with zero IntPtr.</summary>      
        </member>
        <member name="M:Alphaleonis.Win32.Security.SafeLocalMemoryBufferHandle.CopyFrom(System.Byte[],System.Int32,System.Int32)">
            <summary>Copies data from a one-dimensional, managed 8-bit unsigned integer array to the unmanaged memory pointer referenced by this instance.</summary>
            <param name="source">The one-dimensional array to copy from.</param>
            <param name="startIndex">The zero-based index into the array where Copy should start.</param>
            <param name="length">The number of array elements to copy.</param>      
        </member>
        <member name="M:Alphaleonis.Win32.Security.SafeLocalMemoryBufferHandle.ReleaseHandle">
            <summary>Called when object is disposed or finalized.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Security.NativeMethods.AdjustTokenPrivileges(System.IntPtr,System.Boolean,Alphaleonis.Win32.Security.TokenPrivileges@,System.UInt32,Alphaleonis.Win32.Security.TokenPrivileges@,System.UInt32@)">
            <summary>The AdjustTokenPrivileges function enables or disables privileges in the specified access token. Enabling or disabling privileges in an access token requires TOKEN_ADJUST_PRIVILEGES access.</summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            To determine whether the function adjusted all of the specified privileges, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows XP [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2003 [desktop apps only]</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Security.NativeMethods.LookupPrivilegeDisplayName(System.String,System.String,System.Text.StringBuilder@,System.UInt32@,System.UInt32@)">
            <summary>The LookupPrivilegeDisplayName function retrieves the display name that represents a specified privilege.</summary>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, it returns zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows XP [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2003 [desktop apps only]</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Security.NativeMethods.LookupPrivilegeValue(System.String,System.String,Alphaleonis.Win32.Security.Luid@)">
            <summary>The LookupPrivilegeValue function retrieves the locally unique identifier (LUID) used on a specified system to locally represent the specified privilege name.</summary>
            <returns>
            If the function succeeds, the function returns nonzero.
            If the function fails, it returns zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows XP [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2003 [desktop apps only]</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Security.NativeMethods.GetNamedSecurityInfo(System.String,Alphaleonis.Win32.Security.ObjectType,Alphaleonis.Win32.Security.SecurityInformation,System.IntPtr@,System.IntPtr@,System.IntPtr@,System.IntPtr@,Alphaleonis.Win32.SafeGlobalMemoryBufferHandle@)">
            <summary>The GetNamedSecurityInfo function retrieves a copy of the security descriptor for an object specified by name.
            <para>&#160;</para>
            <returns>
            <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
            <para>If the function fails, the return value is a nonzero error code defined in WinError.h.</para>
            </returns>
            <para>&#160;</para>
            <remarks>
            <para>Minimum supported client: Windows XP [desktop apps only]</para>
            <para>Minimum supported server: Windows Server 2003 [desktop apps only]</para>
            </remarks>
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Security.NativeMethods.GetSecurityInfo(System.Runtime.InteropServices.SafeHandle,Alphaleonis.Win32.Security.ObjectType,Alphaleonis.Win32.Security.SecurityInformation,System.IntPtr@,System.IntPtr@,System.IntPtr@,System.IntPtr@,Alphaleonis.Win32.SafeGlobalMemoryBufferHandle@)">
            <summary>The GetSecurityInfo function retrieves a copy of the security descriptor for an object specified by a handle.</summary>
            <returns>
            If the function succeeds, the function returns nonzero.
            If the function fails, it returns zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows XP [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2003 [desktop apps only]</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Security.NativeMethods.SetSecurityInfo(System.Runtime.InteropServices.SafeHandle,Alphaleonis.Win32.Security.ObjectType,Alphaleonis.Win32.Security.SecurityInformation,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>The SetSecurityInfo function sets specified security information in the security descriptor of a specified object. 
            The caller identifies the object by a handle.</summary>
            <returns>
            If the function succeeds, the function returns ERROR_SUCCESS.
            If the function fails, it returns a nonzero error code defined in WinError.h.
            </returns>
            <remarks>Minimum supported client: Windows XP [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2003 [desktop apps only]</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Security.NativeMethods.SetNamedSecurityInfo(System.String,Alphaleonis.Win32.Security.ObjectType,Alphaleonis.Win32.Security.SecurityInformation,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>The SetNamedSecurityInfo function sets specified security information in the security descriptor of a specified object. The caller identifies the object by name.
            <para>&#160;</para>
            <returns>
            <para>If the function succeeds, the function returns ERROR_SUCCESS.</para>
            <para>If the function fails, it returns a nonzero error code defined in WinError.h.</para>
            </returns>
            <para>&#160;</para>
            <remarks>
            <para>Minimum supported client: Windows XP [desktop apps only]</para>
            <para>Minimum supported server: Windows Server 2003 [desktop apps only]</para>
            </remarks>
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Security.NativeMethods.GetSecurityDescriptorDacl(Alphaleonis.Win32.SafeGlobalMemoryBufferHandle,System.Boolean@,System.IntPtr@,System.Boolean@)">
            <summary>The GetSecurityDescriptorDacl function retrieves a pointer to the discretionary access control list (DACL) in a specified security descriptor.</summary>
            <returns>
            If the function succeeds, the function returns nonzero.
            If the function fails, it returns zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows XP [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2003 [desktop apps only]</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Security.NativeMethods.GetSecurityDescriptorSacl(Alphaleonis.Win32.SafeGlobalMemoryBufferHandle,System.Boolean@,System.IntPtr@,System.Boolean@)">
            <summary>The GetSecurityDescriptorSacl function retrieves a pointer to the system access control list (SACL) in a specified security descriptor.</summary>
            <returns>
            If the function succeeds, the function returns nonzero.
            If the function fails, it returns zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows XP [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2003 [desktop apps only]</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Security.NativeMethods.GetSecurityDescriptorGroup(Alphaleonis.Win32.SafeGlobalMemoryBufferHandle,System.IntPtr@,System.Boolean@)">
            <summary>The GetSecurityDescriptorGroup function retrieves the primary group information from a security descriptor.</summary>
            <returns>
            If the function succeeds, the function returns nonzero.
            If the function fails, it returns zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows XP [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2003 [desktop apps only]</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Security.NativeMethods.GetSecurityDescriptorControl(Alphaleonis.Win32.SafeGlobalMemoryBufferHandle,Alphaleonis.Win32.Security.SecurityDescriptorControl@,System.UInt32@)">
            <summary>The GetSecurityDescriptorControl function retrieves a security descriptor control and revision information.</summary>
            <returns>
            If the function succeeds, the function returns nonzero.
            If the function fails, it returns zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows XP [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2003 [desktop apps only]</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Security.NativeMethods.GetSecurityDescriptorOwner(Alphaleonis.Win32.SafeGlobalMemoryBufferHandle,System.IntPtr@,System.Boolean@)">
            <summary>The GetSecurityDescriptorOwner function retrieves the owner information from a security descriptor.</summary>
            <returns>
            If the function succeeds, the function returns nonzero.
            If the function fails, it returns zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>Minimum supported client: Windows XP [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2003 [desktop apps only]</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Security.NativeMethods.GetSecurityDescriptorLength(Alphaleonis.Win32.SafeGlobalMemoryBufferHandle)">
            <summary>The GetSecurityDescriptorLength function returns the length, in bytes, of a structurally valid security descriptor. The length includes the length of all associated structures.</summary>
            <returns>
            If the function succeeds, the function returns the length, in bytes, of the SECURITY_DESCRIPTOR structure.
            If the SECURITY_DESCRIPTOR structure is not valid, the return value is undefined.
            </returns>
            <remarks>Minimum supported client: Windows XP [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2003 [desktop apps only]</remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Security.NativeMethods.LocalFree(System.IntPtr)">
            <summary>Frees the specified local memory object and invalidates its handle.</summary>
            <returns>
            If the function succeeds, the return value is <see langword="null"/>.
            If the function fails, the return value is equal to a handle to the local memory object. To get extended error information, call GetLastError.
            </returns>
            <remarks>SetLastError is set to <see langword="false"/>.</remarks>
            <remarks>
            Note  The local functions have greater overhead and provide fewer features than other memory management functions.
            New applications should use the heap functions unless documentation states that a local function should be used.
            For more information, see Global and Local Functions.
            </remarks>
            <remarks>Minimum supported client: Windows XP [desktop apps only]</remarks>
            <remarks>Minimum supported server: Windows Server 2003 [desktop apps only]</remarks>
        </member>
        <member name="T:Alphaleonis.Win32.Security.NativeMethods.SecurityAttributes">
            <summary>Class used to represent the SECURITY_ATTRIBUES native Win32 structure. It provides initialization function from an <see cref="T:System.Security.AccessControl.ObjectSecurity"/> object.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Security.NativeMethods.SecurityAttributes.ToUnmanagedSecurityAttributes(System.Security.AccessControl.ObjectSecurity)">
            <summary>Marshals an ObjectSecurity instance to unmanaged memory.</summary>
            <returns>A safe handle containing the marshalled security descriptor.</returns>
            <param name="securityDescriptor">The security descriptor.</param>
        </member>
        <member name="T:Alphaleonis.Win32.Security.Crc32">
            <summary>Implements a 32-bit CRC hash algorithm compatible with Zip etc.</summary>
            <remarks>
            Crc32 should only be used for backward compatibility with older file formats
            and algorithms. It is not secure enough for new applications.
            If you need to call multiple times for the same data either use the HashAlgorithm
            interface or remember that the result of one Compute call needs to be ~ (XOR) before
            being passed in as the seed for the next Compute call.
            </remarks>
        </member>
        <member name="M:Alphaleonis.Win32.Security.Crc32.#ctor">
            <summary>
            Initializes a new instance of Crc32.
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Security.Crc32.#ctor(System.UInt32,System.UInt32)">
            <summary>Initializes a new instance of Crc32.</summary>
            <param name="polynomial">The polynomial.</param>
            <param name="seed">The seed.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Security.Crc32.Initialize">
            <summary>
            Initializes an implementation of the
            <see cref="T:System.Security.Cryptography.HashAlgorithm" /> class.
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Security.Crc32.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>When overridden in a derived class, routes data written to the object into the hash algorithm for computing the hash.</summary>
            <param name="array">The input to compute the hash code for..</param>
            <param name="ibStart">The offset into the byte array from which to begin using data.</param>
            <param name="cbSize">The number of bytes in the byte array to use as data.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Security.Crc32.HashFinal">
            <summary>
            Finalizes the hash computation after the last data is processed by the cryptographic stream
            object.
            </summary>
            <returns>
            This method finalizes any partial computation and returns the correct hash value for the data
            stream.
            </returns>
        </member>
        <member name="P:Alphaleonis.Win32.Security.Crc32.HashSize">
            <summary>Gets the size, in bits, of the computed hash code.</summary>
            <value>The size, in bits, of the computed hash code.</value>
        </member>
        <member name="M:Alphaleonis.Win32.Security.Crc32.InitializeTable(System.UInt32)">
            <summary>Initializes the table.</summary>
            <param name="polynomial">The polynomial.</param>
            <returns>The table.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Security.Crc32.CalculateHash(System.UInt32[],System.UInt32,System.Collections.Generic.IList{System.Byte},System.Int32,System.Int32)">
            <summary>Calculates the hash.</summary>
            <param name="table">The table.</param>
            <param name="seed">The seed.</param>
            <param name="buffer">The buffer.</param>
            <param name="start">The start.</param>
            <param name="size">The size.</param>
            <returns>The calculated hash.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Security.Crc32.UInt32ToBigEndianBytes(System.UInt32)">
            <summary>Int 32 to big endian bytes.</summary>
            <param name="uint32">The second uint 3.</param>
            <returns>A byte[].</returns>
        </member>
        <member name="T:Alphaleonis.Win32.Security.Privilege">
            <summary>Represents a privilege for an access token. The privileges available on the local machine are available as 
            static instances from this class. To create a <see cref="T:Alphaleonis.Win32.Security.Privilege"/> representing a privilege on another system,
            use the constructor specifying a system name together with one of these static instances.
            </summary>
            <seealso cref="T:Alphaleonis.Win32.Security.PrivilegeEnabler"/>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.AssignPrimaryToken">
            <summary>Required to assign the primary token of a process. User Right: Replace a process-level token.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.Audit">
            <summary>Required to generate audit-log entries. Give this privilege to secure servers. User Right: Generate security audits.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.Backup">
            <summary>Required to perform backup operations. This privilege causes the system to grant all read access control to any file, regardless of the access control list (ACL) specified for the file. Any access request other than read is still evaluated with the ACL. User Right: Back up files and directories.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.ChangeNotify">
            <summary>Required to receive notifications of changes to files or directories. This privilege also causes the system to skip all traversal access checks. It is enabled by default for all users. User Right: Bypass traverse checking.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.CreateGlobal">
            <summary>Required to create named file mapping objects in the global namespace during Terminal Services sessions. This privilege is enabled by default for administrators, services, and the local system account. User Right: Create global objects.</summary>
            <remarks>Windows XP/2000:  This privilege is not supported. Note that this value is supported starting with Windows Server 2003, Windows XP SP2, and Windows 2000 SP4.</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.CreatePagefile">
            <summary>Required to create a paging file. User Right: Create a pagefile.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.CreatePermanent">
            <summary>Required to create a permanent object. User Right: Create permanent shared objects.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.CreateSymbolicLink">
            <summary>Required to create a symbolic link. User Right: Create symbolic links.</summary>           
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.CreateToken">
            <summary>Required to create a primary token. User Right: Create a token object.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.Debug">
            <summary>Required to debug and adjust the memory of a process owned by another account. User Right: Debug programs.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.EnableDelegation">
            <summary>Required to mark user and computer accounts as trusted for delegation. User Right: Enable computer and user accounts to be trusted for delegation.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.Impersonate">
            <summary>Required to impersonate. User Right: Impersonate a client after authentication.</summary>
            <remarks>Windows XP/2000:  This privilege is not supported. Note that this value is supported starting with Windows Server 2003, Windows XP SP2, and Windows 2000 SP4.</remarks>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.IncreaseBasePriority">
            <summary>Required to increase the base priority of a process. User Right: Increase scheduling priority.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.IncreaseQuota">
            <summary>Required to increase the quota assigned to a process. User Right: Adjust memory quotas for a process.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.IncreaseWorkingSet">
            <summary>Required to allocate more memory for applications that run in the context of users. User Right: Increase a process working set.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.LoadDriver">
            <summary>Required to load or unload a device driver. User Right: Load and unload device drivers.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.LockMemory">
            <summary>Required to lock physical pages in memory. User Right: Lock pages in memory.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.MachineAccount">
            <summary>Required to create a computer account. User Right: Add workstations to domain.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.ManageVolume">
            <summary>Required to enable volume management privileges. User Right: Manage the files on a volume.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.ProfileSingleProcess">
            <summary>Required to gather profiling information for a single process. User Right: Profile single process.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.Relabel">
            <summary>Required to modify the mandatory integrity level of an object. User Right: Modify an object label.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.RemoteShutdown">
            <summary>Required to shut down a system using a network request. User Right: Force shutdown from a remote system.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.Restore">
            <summary>Required to perform restore operations. This privilege causes the system to grant all write access control to any file, regardless of the ACL specified for the file. Any access request other than write is still evaluated with the ACL. Additionally, this privilege enables you to set any valid user or group SID as the owner of a file. User Right: Restore files and directories.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.Security">
            <summary>Required to perform a number of security-related functions, such as controlling and viewing audit messages. This privilege identifies its holder as a security operator. User Right: Manage auditing and security log.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.Shutdown">
            <summary>Required to shut down a local system. User Right: Shut down the system.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.SyncAgent">
            <summary>Required for a domain controller to use the LDAP directory synchronization services. This privilege enables the holder to read all objects and properties in the directory, regardless of the protection on the objects and properties. By default, it is assigned to the Administrator and LocalSystem accounts on domain controllers. User Right: Synchronize directory service data.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.SystemEnvironment">
            <summary>Required to modify the nonvolatile RAM of systems that use this type of memory to store configuration information. User Right: Modify firmware environment values.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.SystemProfile">
            <summary>Required to gather profiling information for the entire system. User Right: Profile system performance.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.SystemTime">
            <summary>Required to modify the system time. User Right: Change the system time.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.TakeOwnership">
            <summary>Required to take ownership of an object without being granted discretionary access. This privilege allows the owner value to be set only to those values that the holder may legitimately assign as the owner of an object. User Right: Take ownership of files or other objects.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.Tcb">
            <summary>This privilege identifies its holder as part of the trusted computer base. Some trusted protected subsystems are granted this privilege. User Right: Act as part of the operating system.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.TimeZone">
            <summary>Required to adjust the time zone associated with the computer's internal clock. User Right: Change the time zone.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.TrustedCredManAccess">
            <summary>Required to access Credential Manager as a trusted caller. User Right: Access Credential Manager as a trusted caller.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.Undock">
            <summary>Required to undock a laptop. User Right: Remove computer from docking station.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Security.Privilege.UnsolicitedInput">
            <summary>Required to read unsolicited input from a terminal device. User Right: Not applicable.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Security.Privilege.#ctor(System.String,Alphaleonis.Win32.Security.Privilege)">
            <summary>Create a new <see cref="T:Alphaleonis.Win32.Security.Privilege"/> representing the specified privilege on the specified system.</summary>
            <param name="systemName">Name of the system.</param>
            <param name="privilege">The privilege to copy the privilege name from.</param>
        </member>
        <member name="P:Alphaleonis.Win32.Security.Privilege.Name">
            <summary>Gets the system name identifying this privilege.</summary>
            <value>The system name identifying this privilege.</value>
        </member>
        <member name="M:Alphaleonis.Win32.Security.Privilege.LookupDisplayName">
            <summary>Retrieves the display name that represents this privilege.</summary>
            <returns>The display name that represents this privilege.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Security.Privilege.LookupLuid">
            <summary>Retrieves the locally unique identifier (LUID) used on to represent this privilege (on the system from which it originates).</summary>
            <returns>the locally unique identifier (LUID) used on to represent this privilege (on the system from which it originates).</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Security.Privilege.Equals(Alphaleonis.Win32.Security.Privilege)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns><see langword="true"/> if the current object is equal to the <paramref name="other"/> parameter; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Security.Privilege.Equals(System.Object)">
            <summary>Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.</summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns><see langword="true"/> if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.NullReferenceException"/>
        </member>
        <member name="M:Alphaleonis.Win32.Security.Privilege.GetHashCode">
            <summary>Serves as a hash function for a particular type.</summary>
            <returns>A hash code for the current Object.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Security.Privilege.ToString">
            <summary>Returns the system name for this privilege.</summary>
            <remarks>This is equivalent to <see cref="P:Alphaleonis.Win32.Security.Privilege.Name"/>.</remarks>
            <returns>A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.</returns>
        </member>
        <member name="M:Alphaleonis.Win32.Security.Privilege.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Security.Privilege"/> class, representing a privilege with the specified name on the local system.</summary>
            <param name="name">The name.</param>
        </member>
        <member name="T:Alphaleonis.Win32.Security.PrivilegeEnabler">
            <summary>Used to enable one or more privileges. The privileges specified will be enabled during the lifetime of the instance. Users create an instance of this object in a <c>using</c> statement to ensure that it is properly disposed when the elevated privileges are no longer needed.</summary>
        </member>
        <member name="M:Alphaleonis.Win32.Security.PrivilegeEnabler.#ctor(Alphaleonis.Win32.Security.Privilege,Alphaleonis.Win32.Security.Privilege[])">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Security.PrivilegeEnabler"/> class.
            This will enable the privileges specified (unless already enabled), and ensure that they are disabled again when
            the object is disposed. (Any privileges already enabled will not be disabled).
            </summary>
            <param name="privilege">The privilege to enable.</param>
            <param name="privileges">Additional privileges to enable.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Security.PrivilegeEnabler.Dispose">
            <summary>Makes sure any privileges enabled by this instance are disabled.</summary>
        </member>
        <member name="P:Alphaleonis.Win32.Security.PrivilegeEnabler.EnabledPrivileges">
            <summary>Gets the enabled privileges. Note that this might not contain all privileges specified to the constructor. Only the privileges actually enabled by this instance is returned.</summary>
            <value>The enabled privileges.</value>
        </member>
        <member name="T:Alphaleonis.Win32.Security.InternalPrivilegeEnabler">
            <summary>
            This object is used to enable a specific privilege for the currently running process during its lifetime. 
            It should be disposed as soon as the elevated privilege is no longer needed.
            For more information see the documentation on AdjustTokenPrivileges on MSDN.
            </summary>
        </member>
        <member name="M:Alphaleonis.Win32.Security.InternalPrivilegeEnabler.#ctor(Alphaleonis.Win32.Security.Privilege)">
            <summary>Initializes a new instance of the <see cref="T:Alphaleonis.Win32.Security.PrivilegeEnabler"/> class and enabling the specified privilege for the currently running process.</summary>
            <param name="privilegeName">The name of the privilege.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Security.InternalPrivilegeEnabler.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            In this case the privilege previously enabled will be disabled.
            </summary>            
        </member>
        <member name="M:Alphaleonis.Win32.Security.InternalPrivilegeEnabler.AdjustPrivilege(System.Boolean)">
            <summary>Adjusts the privilege.</summary>
            <param name="enable"><see langword="true"/> the privilege will be enabled, otherwise disabled.</param>
        </member>
        <member name="M:Alphaleonis.Win32.Win32Errors.GetHrFromWin32Error(System.UInt32)">
            <summary>Use this to translate error codes into HRESULTs like 0x80070006 for ERROR_INVALID_HANDLE.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Win32Errors.ERROR_SUCCESS">
            <summary>(0) The operation completed successfully.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Win32Errors.NO_ERROR">
            <summary>(0) The operation completed successfully.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Win32Errors.ERROR_INVALID_FUNCTION">
            <summary>(1) Incorrect function.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Win32Errors.ERROR_FILE_NOT_FOUND">
            <summary>(2) The system cannot find the file specified.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Win32Errors.ERROR_PATH_NOT_FOUND">
            <summary>(3) The system cannot find the path specified.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Win32Errors.ERROR_ACCESS_DENIED">
            <summary>(5) Access is denied.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Win32Errors.ERROR_INVALID_DRIVE">
            <summary>(15) The system cannot find the drive specified.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Win32Errors.ERROR_NOT_SAME_DEVICE">
            <summary>(17) The system cannot move the file to a different disk drive.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Win32Errors.ERROR_NO_MORE_FILES">
            <summary>(18) There are no more files.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Win32Errors.ERROR_NOT_READY">
            <summary>(21) The device is not ready.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Win32Errors.ERROR_SEEK">
            <summary>(25) The drive cannot locate a specific area or track on the disk.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Win32Errors.ERROR_SHARING_VIOLATION">
            <summary>(32) The process cannot access the file because it is being used by another process.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Win32Errors.ERROR_LOCK_VIOLATION">
            <summary>(33) The process cannot access the file because another process has locked a portion of the file.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Win32Errors.ERROR_HANDLE_EOF">
            <summary>(38) Reached the end of the file.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Win32Errors.ERROR_BAD_NETPATH">
            <summary>(53) The network path was not found.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Win32Errors.ERROR_NETWORK_ACCESS_DENIED">
            <summary>(65) Network access is denied.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Win32Errors.ERROR_BAD_NET_NAME">
            <summary>(67) The network name cannot be found.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Win32Errors.ERROR_FILE_EXISTS">
            <summary>(80) The file exists.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Win32Errors.ERROR_INVALID_PARAMETER">
            <summary>(87) The parameter is incorrect.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Win32Errors.ERROR_INSUFFICIENT_BUFFER">
            <summary>(122) The data area passed to a system call is too small.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Win32Errors.ERROR_INVALID_NAME">
            <summary>(123) The filename, directory name, or volume label syntax is incorrect.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Win32Errors.ERROR_SAME_DRIVE">
            <summary>(143) The system cannot join or substitute a drive to or for a directory on the same drive.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Win32Errors.ERROR_DIR_NOT_EMPTY">
            <summary>(145) The directory is not empty.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Win32Errors.ERROR_ALREADY_EXISTS">
            <summary>(183) Cannot create a file when that file already exists.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Win32Errors.ERROR_MORE_DATA">
            <summary>(234) More data is available.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Win32Errors.ERROR_DIRECTORY">
            <summary>(267) The directory name is invalid.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Win32Errors.ERROR_OPERATION_ABORTED">
            <summary>(995) The I/O operation has been aborted because of either a thread exit or an application request.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Win32Errors.ERROR_REQUEST_ABORTED">
            <summary>(1235) The request was aborted.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Win32Errors.ERROR_SUCCESS_REBOOT_INITIATED">
            <summary>(1641) The requested operation completed successfully.
            <para>The system will be restarted so the changes can take effect.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Win32Errors.RPC_X_BAD_STUB_DATA">
            <summary>(1783) The stub received bad data.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Win32Errors.ERROR_SUCCESS_REBOOT_REQUIRED">
            <summary>(3010) The requested operation is successful.
            <para>Changes will not be effective until the system is rebooted.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Win32Errors.ERROR_SUCCESS_RESTART_REQUIRED">
            <summary>(3011) The requested operation is successful.
            <para>Changes will not be effective until the service is restarted.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Win32Errors.ERROR_NOT_A_REPARSE_POINT">
            <summary>(4390) The file or directory is not a reparse point.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Win32Errors.ERROR_FILE_READ_ONLY">
            <summary>(6009) The specified file is read only.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Win32Errors.ERROR_BAD_RECOVERY_POLICY">
            <summary>(6012) Recovery policy configured for this system contains invalid recovery certificate.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Win32Errors.ERROR_INVALID_TRANSACTION">
            <summary>(6700) The transaction handle associated with this operation is not valid.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Win32Errors.ERROR_TRANSACTION_NOT_ACTIVE">
            <summary>(6701) The requested operation was made in the context
            <para>of a transaction that is no longer active.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Win32Errors.ERROR_TRANSACTION_REQUEST_NOT_VALID">
            <summary>(6702) The requested operation is not valid
            <para>on the Transaction object in its current state.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Win32Errors.ERROR_TRANSACTION_NOT_REQUESTED">
            <summary>(6703) The caller has called a response API, but the response is not expected
            <para>because the TM did not issue the corresponding request to the caller.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Win32Errors.ERROR_TRANSACTION_ALREADY_ABORTED">
            <summary>(6704) It is too late to perform the requested operation,
            <para>since the Transaction has already been aborted.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Win32Errors.ERROR_TRANSACTION_ALREADY_COMMITTED">
            <summary>(6705) It is too late to perform the requested operation,
            <para>since the Transaction has already been committed.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Win32Errors.ERROR_TRANSACTIONAL_CONFLICT">
            <summary>(6800) The function attempted to use a name
            <para>that is reserved for use by another transaction.</para>
            </summary>
        </member>
        <member name="F:Alphaleonis.Win32.Win32Errors.ERROR_TRANSACTIONS_UNSUPPORTED_REMOTE">
            <summary>(6805) The remote server or share does not support transacted file operations.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Win32Errors.S_OK">
            <summary>(0) The operation completed successfully.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Win32Errors.NERR_Success">
            <summary>(0) The operation completed successfully.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Win32Errors.NERR_FileIdNotFound">
            <summary>(2314) There is not an open file with that identification number.</summary>
        </member>
        <member name="F:Alphaleonis.Win32.Win32Errors.CR_SUCCESS">
            <summary>(0) The operation completed successfully.</summary>
        </member>
        <member name="M:Alphaleonis.Utils.GetEnumDescription(System.Enum)">
            <summary>Gets an attribute on an enum field value.</summary>
            <returns>The description belonging to the enum option, as a string</returns>
            <param name="enumValue">One of the <see cref="T:Alphaleonis.Win32.Filesystem.DeviceGuid"/> enum types.</param>
        </member>
        <member name="M:Alphaleonis.Utils.IsNullOrWhiteSpace(System.String)">
            <summary>Indicates whether a specified string is null, empty, or consists only of white-space characters.</summary>
            <returns><see langword="true"/> if the <paramref name="value"/> parameter is null or <see cref="F:System.String.Empty"/>, or if <paramref name="value"/> consists exclusively of white-space characters.</returns>
            <param name="value">The string to test.</param>
        </member>
        <member name="M:Alphaleonis.Utils.UnitSizeToText``1(``0)">
            <summary>Converts a number of type T to string, suffixed with a unit size.</summary>
        </member>
        <member name="M:Alphaleonis.Utils.PercentCalculate(System.Double,System.Double,System.Double)">
            <summary>Calculates a percentage value.</summary>
            <param name="currentValue"/>
            <param name="minimumValue"/>
            <param name="maximumValue"/>
        </member>
    </members>
</doc>

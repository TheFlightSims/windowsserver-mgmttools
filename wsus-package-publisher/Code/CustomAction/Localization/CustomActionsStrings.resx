<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddA" xml:space="preserve">
    <value>Add a </value>
  </data>
  <data name="AddThisRegKey" xml:space="preserve">
    <value>Add this Registry Key : </value>
  </data>
  <data name="AndKillProcessIfItRunMoreThan" xml:space="preserve">
    <value>and kill the process if it run more than </value>
  </data>
  <data name="AndStoreReturnCodeToVariable" xml:space="preserve">
    <value>and store the return code to the variable.</value>
  </data>
  <data name="Automatic" xml:space="preserve">
    <value>Automatic</value>
  </data>
  <data name="ChangeTheStartingModeOf" xml:space="preserve">
    <value>Change the starting mode of </value>
  </data>
  <data name="Configured" xml:space="preserve">
    <value>configured</value>
  </data>
  <data name="CopyTheFile" xml:space="preserve">
    <value>Copy the file </value>
  </data>
  <data name="CreateTheFolder" xml:space="preserve">
    <value>Create the folder </value>
  </data>
  <data name="CreateTheTextFile" xml:space="preserve">
    <value>Create the text file </value>
  </data>
  <data name="Delete" xml:space="preserve">
    <value>Delete </value>
  </data>
  <data name="DeleteTheFile" xml:space="preserve">
    <value>Delete the file </value>
  </data>
  <data name="DeleteTheFolder" xml:space="preserve">
    <value>Delete the folder </value>
  </data>
  <data name="DeleteThisRegKey" xml:space="preserve">
    <value>Delete this registry key : </value>
  </data>
  <data name="DescriptionAddRegKeyAction" xml:space="preserve">
    <value>Allows to add a Registry Key.</value>
  </data>
  <data name="DescriptionAddRegValueAction" xml:space="preserve">
    <value>Allows to add a Registry Value.</value>
  </data>
  <data name="DescriptionChangeServiceAction" xml:space="preserve">
    <value>Allows to change the starting mode of a service.</value>
  </data>
  <data name="DescriptionCopyFileAction" xml:space="preserve">
    <value>Allows to copy a file.</value>
  </data>
  <data name="DescriptionCreateFolderAction" xml:space="preserve">
    <value>Allows to create a folder.</value>
  </data>
  <data name="DescriptionCreateTextFileAction" xml:space="preserve">
    <value>Allows to create a text file.</value>
  </data>
  <data name="DescriptionDeleteFileAction" xml:space="preserve">
    <value>Allows to delete a file.</value>
  </data>
  <data name="DescriptionDeleteFolderAction" xml:space="preserve">
    <value>Allows to delete a folder.</value>
  </data>
  <data name="DescriptionDeleteRegKeyAction" xml:space="preserve">
    <value>Allow to delete a Registry Key.</value>
  </data>
  <data name="DescriptionDeleteRegValueAction" xml:space="preserve">
    <value>Allows to delete a Registry Value.</value>
  </data>
  <data name="DescriptionExecutableAction" xml:space="preserve">
    <value>Allows to execute a file.</value>
  </data>
  <data name="DescriptionRenameFileAction" xml:space="preserve">
    <value>Allows to rename a file.</value>
  </data>
  <data name="DescriptionRenameFolderAction" xml:space="preserve">
    <value>Alllows to rename a folder.</value>
  </data>
  <data name="DescriptionRenameRegKeyAction" xml:space="preserve">
    <value>Allows to rename a Registry key.</value>
  </data>
  <data name="DescriptionRunPowershellScriptAction" xml:space="preserve">
    <value>Allows to run a Powershell script.</value>
  </data>
  <data name="DescriptionRunVBScriptAction" xml:space="preserve">
    <value>Allows to run a VbScript.</value>
  </data>
  <data name="DescriptionStartServiceAction" xml:space="preserve">
    <value>Allows to start a service.</value>
  </data>
  <data name="DescriptionStopServiceAction" xml:space="preserve">
    <value>Allows to stop a service.</value>
  </data>
  <data name="DescriptionUnregisterServiceAction" xml:space="preserve">
    <value>Allows to Unregister a service.</value>
  </data>
  <data name="Disable" xml:space="preserve">
    <value>Disable</value>
  </data>
  <data name="ExecuteTheFile" xml:space="preserve">
    <value>Execute the file </value>
  </data>
  <data name="ExecuteThePowershellScript" xml:space="preserve">
    <value>Execute the Powershell script </value>
  </data>
  <data name="ExecuteTheVbScript" xml:space="preserve">
    <value>Execute the VbScript </value>
  </data>
  <data name="In" xml:space="preserve">
    <value> in </value>
  </data>
  <data name="Into" xml:space="preserve">
    <value> into </value>
  </data>
  <data name="Manual" xml:space="preserve">
    <value>Manual</value>
  </data>
  <data name="Minutes" xml:space="preserve">
    <value>minutes</value>
  </data>
  <data name="Misconfigured" xml:space="preserve">
    <value>misconfigured</value>
  </data>
  <data name="NoHelpAvailable" xml:space="preserve">
    <value>No help available for this Action.</value>
  </data>
  <data name="NotConfigured" xml:space="preserve">
    <value>not configured</value>
  </data>
  <data name="RegValueNamed" xml:space="preserve">
    <value> registry value named </value>
  </data>
  <data name="RenameTheFile" xml:space="preserve">
    <value>Rename the file</value>
  </data>
  <data name="RenameTheFolder" xml:space="preserve">
    <value>Rename the folder </value>
  </data>
  <data name="RenameThisRegKey" xml:space="preserve">
    <value>Rename this Registry Key : </value>
  </data>
  <data name="StartTheService" xml:space="preserve">
    <value>Start the service : </value>
  </data>
  <data name="StopTheService" xml:space="preserve">
    <value>Stop the service : </value>
  </data>
  <data name="ThisActionDoesNothing" xml:space="preserve">
    <value>This Action does nothing.</value>
  </data>
  <data name="ThisActionIs" xml:space="preserve">
    <value>This Action is</value>
  </data>
  <data name="To" xml:space="preserve">
    <value> to </value>
  </data>
  <data name="UnregisterTheService" xml:space="preserve">
    <value>Unregister the service : </value>
  </data>
  <data name="whichContent" xml:space="preserve">
    <value> which content </value>
  </data>
  <data name="WithContent" xml:space="preserve">
    <value> with the content : </value>
  </data>
  <data name="WithParameters" xml:space="preserve">
    <value>with parameters </value>
  </data>
  <data name="DescriptionChangeRegDataAction" xml:space="preserve">
    <value>Allows to change a Data in a Registry Value.</value>
  </data>
  <data name="DescriptionRenameRegValueAction" xml:space="preserve">
    <value>Allows to rename a Registry Value.</value>
  </data>
  <data name="ChangeRegData" xml:space="preserve">
    <value>Change the Registry Data : </value>
  </data>
  <data name="WithTheData" xml:space="preserve">
    <value> with the data : </value>
  </data>
  <data name="DescriptionImportRegFileAction" xml:space="preserve">
    <value>import a .reg file.</value>
  </data>
  <data name="ImportTheFile" xml:space="preserve">
    <value>Import the file : </value>
  </data>
  <data name="DescriptionShutdownAction" xml:space="preserve">
    <value>Allows to shutdown the computer.</value>
  </data>
  <data name="Shutdown" xml:space="preserve">
    <value>Shutdown the computer.</value>
  </data>
  <data name="DescriptionRebootAction" xml:space="preserve">
    <value>Allows to reboot the computer.</value>
  </data>
  <data name="Reboot" xml:space="preserve">
    <value>Reboot the computer.</value>
  </data>
  <data name="DescriptionKillProcessAction" xml:space="preserve">
    <value>Allows to kill a process.</value>
  </data>
  <data name="KillProcess" xml:space="preserve">
    <value>Kill the process : </value>
  </data>
  <data name="DescriptionRegisterDLLAction" xml:space="preserve">
    <value>Allows to register a DLL.</value>
  </data>
  <data name="DescriptionUnregisterDLLAction" xml:space="preserve">
    <value>Allows to unregister a DLL.</value>
  </data>
  <data name="ThisActionRefersToUserProfile" xml:space="preserve">
    <value>This action refers to a user profile.</value>
  </data>
  <data name="DescriptionWaitAction" xml:space="preserve">
    <value>Allows to wait an amount of time.</value>
  </data>
  <data name="Seconds" xml:space="preserve">
    <value>seconds</value>
  </data>
  <data name="Wait" xml:space="preserve">
    <value>Wait</value>
  </data>
  <data name="DescriptionReturnCodeAction" xml:space="preserve">
    <value>Allows to set a return code to send when finished.</value>
  </data>
  <data name="ReturnStaticCode" xml:space="preserve">
    <value>Always return the code : </value>
  </data>
  <data name="ReturnVariable" xml:space="preserve">
    <value>Return the code previously stored in the variable.</value>
  </data>
  <data name="TheXmlElementHasNotBeenMatchWithProperty" xml:space="preserve">
    <value>The Xml Element '{0}' has not been match with any properties of '{1}'</value>
  </data>
  <data name="RenameThisRegValue" xml:space="preserve">
    <value>Rename this Registry value : </value>
  </data>
  <data name="RegisterDLL" xml:space="preserve">
    <value>Register this DLL : </value>
  </data>
  <data name="UnregisterThisDLL" xml:space="preserve">
    <value>Unregister this DLL : </value>
  </data>
  <data name="CreateThisShortcut" xml:space="preserve">
    <value>Create a shortcut named </value>
  </data>
  <data name="DescriptionCreateShortcutAction" xml:space="preserve">
    <value>Allow to create a shortcut</value>
  </data>
  <data name="WhichTarget" xml:space="preserve">
    <value> which target </value>
  </data>
  <data name="DescriptionDeleteTask" xml:space="preserve">
    <value>Allow to delete a scheduled task</value>
  </data>
  <data name="DeleteThisTask" xml:space="preserve">
    <value>Delete the scheduled task : </value>
  </data>
  <data name="DescriptionUinstallMsiProductByGuid" xml:space="preserve">
    <value>Allow to uninstall a MSI product by knowing his Guid.</value>
  </data>
  <data name="DescriptionUninstallMsiProductByNameAction" xml:space="preserve">
    <value>Allow to uninstall MSI applications by knowing their name</value>
  </data>
  <data name="UninstallThisMsiApplication" xml:space="preserve">
    <value>Uninstall the application : {0} with parameters {1}</value>
  </data>
  <data name="DescriptionInstallMsi" xml:space="preserve">
    <value>Allow to install a MSI application</value>
  </data>
  <data name="RestartLevel_Force" xml:space="preserve">
    <value>Always restart</value>
  </data>
  <data name="RestartLevel_None" xml:space="preserve">
    <value>No restart</value>
  </data>
  <data name="RestartLevel_Prompt" xml:space="preserve">
    <value>Prompt user if needed</value>
  </data>
  <data name="UILevel_Base" xml:space="preserve">
    <value>Basic UI</value>
  </data>
  <data name="UILevel_Full" xml:space="preserve">
    <value>Full UI</value>
  </data>
  <data name="UILevel_None" xml:space="preserve">
    <value>No UI</value>
  </data>
  <data name="UILevel_Reduced" xml:space="preserve">
    <value>Reduced UI</value>
  </data>
  <data name="Install" xml:space="preserve">
    <value>Install </value>
  </data>
</root>